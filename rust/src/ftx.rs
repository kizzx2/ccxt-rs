#![allow(clippy::all)]
#![allow(dead_code)]
#![allow(unreachable_code)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(unused_comparisons)]
#![allow(unused_mut)]
#![allow(unused_variables)]

use async_trait::async_trait;
use std::str::FromStr;
use serde::{Deserialize, Serialize};
use serde_json::json;
use crate::exchange::{Exchange, ExchangeImpl, Precise, Value, ValueTrait, JSON, Array, Object, Math, parse_int, shift_2, extend_2, normalize};

use crate::exchange::{PRECISE_BASE, TRUNCATE, ROUND, ROUND_UP, ROUND_DOWN};
use crate::exchange::{DECIMAL_PLACES, SIGNIFICANT_DIGITS, TICK_SIZE, NO_PADDING, PAD_WITH_ZERO};

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

#[async_trait]
pub trait Ftx : Exchange {
    fn describe(&self) -> Value {
        Value::Json(serde_json::Value::from_str(r###"{
            "id": "ftx",
            "name": "FTX",
            "countries": [
                "BS"
            ],
            "enableRateLimit": true,
            "rateLimit": 28.57,
            "certified": true,
            "pro": true,
            "alias": false,
            "has": {
                "publicAPI": true,
                "privateAPI": true,
                "spot": true,
                "margin": true,
                "swap": true,
                "future": true,
                "option": false,
                "cancelAllOrders": true,
                "cancelOrder": true,
                "createLimitOrder": true,
                "createMarketOrder": true,
                "createOrder": true,
                "createReduceOnlyOrder": true,
                "createStopOrder": true,
                "createStopLimitOrder": true,
                "createStopMarketOrder": true,
                "editOrder": true,
                "fetchBalance": true,
                "fetchBorrowInterest": true,
                "fetchBorrowRate": true,
                "fetchBorrowRateHistory": true,
                "fetchBorrowRates": true,
                "fetchCurrencies": true,
                "fetchDepositAddress": true,
                "fetchDeposits": true,
                "fetchFundingHistory": true,
                "fetchFundingRate": true,
                "fetchFundingRateHistory": true,
                "fetchFundingRates": false,
                "fetchIndexOHLCV": true,
                "fetchL2OrderBook": true,
                "fetchLeverageTiers": false,
                "fetchMarketLeverageTiers": false,
                "fetchMarkets": true,
                "fetchMarkOHLCV": false,
                "fetchMyTrades": true,
                "fetchOHLCV": true,
                "fetchOpenOrders": true,
                "fetchOrder": true,
                "fetchOrderBook": true,
                "fetchOrders": true,
                "fetchOrderTrades": true,
                "fetchPosition": false,
                "fetchPositions": true,
                "fetchPositionsRisk": false,
                "fetchPremiumIndexOHLCV": false,
                "fetchStatus": "emulated",
                "fetchTicker": true,
                "fetchTickers": true,
                "fetchTime": false,
                "fetchTrades": true,
                "fetchTradingFee": true,
                "fetchTradingFees": true,
                "fetchWithdrawals": true,
                "reduceMargin": false,
                "setLeverage": true,
                "setMarginMode": false,
                "setPositionMode": false,
                "transfer": true,
                "withdraw": true,
                "fetchBorrowRateHistories": true,
                "fetchMarginMode": false,
                "fetchOpenInterestHistory": false,
                "fetchPositionMode": false
            },
            "urls": {
                "logo": "https://user-images.githubusercontent.com/1294454/67149189-df896480-f2b0-11e9-8816-41593e17f9ec.jpg",
                "api": {
                    "public": "https://{hostname}",
                    "private": "https://{hostname}"
                },
                "www": "https://ftx.com",
                "doc": "https://github.com/ftexchange/ftx",
                "fees": "https://ftexchange.zendesk.com/hc/en-us/articles/360024479432-Fees",
                "referral": {
                    "url": "https://ftx.com/#a=ccxt",
                    "discount": 0.05
                }
            },
            "api": {
                "public": {
                    "get": {
                        "coins": 1,
                        "markets": 1,
                        "markets/{market_name}": 1,
                        "markets/{market_name}/orderbook": 1,
                        "markets/{market_name}/trades": 1,
                        "markets/{market_name}/candles": 1,
                        "futures": 1,
                        "futures/{future_name}": 1,
                        "futures/{future_name}/stats": 1,
                        "funding_rates": 1,
                        "indexes/{index_name}/weights": 1,
                        "expired_futures": 1,
                        "indexes/{market_name}/candles": 1,
                        "wallet/coins": 1,
                        "lt/tokens": 1,
                        "lt/{token_name}": 1,
                        "etfs/rebalance_info": 1,
                        "options/requests": 1,
                        "options/trades": 1,
                        "options/historical_volumes/BTC": 1,
                        "stats/24h_options_volume": 1,
                        "options/open_interest/BTC": 1,
                        "options/historical_open_interest/BTC": 1,
                        "spot_margin/history": 1,
                        "spot_margin/borrow_summary": 1,
                        "nft/nfts": 1,
                        "nft/{nft_id}": 1,
                        "nft/{nft_id}/trades": 1,
                        "nft/all_trades": 1,
                        "nft/{nft_id}/account_info": 1,
                        "nft/collections": 1,
                        "ftxpay/apps/{user_specific_id}/details": 1
                    },
                    "post": {
                        "ftxpay/apps/{user_specific_id}/orders": 1
                    }
                },
                "private": {
                    "get": {
                        "subaccounts": 1,
                        "subaccounts/{nickname}/balances": 1,
                        "account": 1,
                        "positions": 1,
                        "wallet/balances": 1,
                        "wallet/all_balances": 1,
                        "wallet/deposit_address/{coin}": 1,
                        "wallet/deposits": 1,
                        "wallet/withdrawals": 1,
                        "wallet/airdrops": 1,
                        "wallet/withdrawal_fee": 1,
                        "wallet/saved_addresses": 1,
                        "orders": 1,
                        "orders/history": 1,
                        "orders/{order_id}": 1,
                        "orders/by_client_id/{client_order_id}": 1,
                        "conditional_orders": 1,
                        "conditional_orders/{conditional_order_id}/triggers": 1,
                        "conditional_orders/history": 1,
                        "fills": 1,
                        "funding_payments": 1,
                        "lt/balances": 1,
                        "lt/creations": 1,
                        "lt/redemptions": 1,
                        "options/my_requests": 1,
                        "options/requests/{request_id}/quotes": 1,
                        "options/my_quotes": 1,
                        "options/account_info": 1,
                        "options/positions": 1,
                        "options/fills": 1,
                        "staking/stakes": 1,
                        "staking/unstake_requests": 1,
                        "staking/balances": 1,
                        "staking/staking_rewards": 1,
                        "otc/quotes/{quoteId}": 1,
                        "spot_margin/borrow_rates": 1,
                        "spot_margin/lending_rates": 1,
                        "spot_margin/market_info": 1,
                        "spot_margin/borrow_history": 1,
                        "spot_margin/lending_history": 1,
                        "spot_margin/offers": 1,
                        "spot_margin/lending_info": 1,
                        "nft/balances": 1,
                        "nft/bids": 1,
                        "nft/deposits": 1,
                        "nft/withdrawals": 1,
                        "nft/fills": 1,
                        "nft/gallery/{gallery_id}": 1,
                        "nft/gallery_settings": 1,
                        "stats/latency_stats": 1,
                        "pnl/historical_changes": 1,
                        "support/tickets": 1,
                        "support/tickets/{ticketId}/messages": 1,
                        "support/tickets/count_unread": 1,
                        "twap_orders": 1,
                        "twap_orders/{twap_order_id}": 1
                    },
                    "post": {
                        "subaccounts": 1,
                        "subaccounts/update_name": 1,
                        "subaccounts/transfer": 1,
                        "account/leverage": 1,
                        "wallet/deposit_address/list": 1,
                        "wallet/withdrawals": 90,
                        "wallet/saved_addresses": 1,
                        "orders": 1,
                        "conditional_orders": 1,
                        "orders/{order_id}/modify": 1,
                        "orders/by_client_id/{client_order_id}/modify": 1,
                        "conditional_orders/{order_id}/modify": 1,
                        "lt/{token_name}/create": 1,
                        "lt/{token_name}/redeem": 1,
                        "options/requests": 1,
                        "options/requests/{request_id}/quotes": 1,
                        "options/quotes/{quote_id}/accept": 1,
                        "staking/unstake_requests": 1,
                        "srm_stakes/stakes": 1,
                        "otc/quotes/{quote_id}/accept": 1,
                        "otc/quotes": 1,
                        "spot_margin/offers": 1,
                        "nft/offer": 1,
                        "nft/buy": 1,
                        "nft/auction": 1,
                        "nft/edit_auction": 1,
                        "nft/cancel_auction": 1,
                        "nft/bids": 1,
                        "nft/redeem": 1,
                        "nft/gallery_settings": 1,
                        "ftxpay/apps/{user_specific_id}/orders": 1,
                        "support/tickets": 1,
                        "support/tickets/{ticketId}/messages": 1,
                        "support/tickets/{ticketId}/status": 1,
                        "support/tickets/{ticketId}/mark_as_read": 1,
                        "twap_orders": 1
                    },
                    "delete": {
                        "subaccounts": 1,
                        "wallet/saved_addresses/{saved_address_id}": 1,
                        "orders/{order_id}": 1,
                        "orders/by_client_id/{client_order_id}": 1,
                        "orders": 1,
                        "conditional_orders/{order_id}": 1,
                        "options/requests/{request_id}": 1,
                        "options/quotes/{quote_id}": 1,
                        "staking/unstake_requests/{request_id}": 1,
                        "twap_orders/{twap_order_id}": 1
                    }
                }
            },
            "requiredCredentials": {
                "apiKey": true,
                "secret": true,
                "uid": false,
                "login": false,
                "password": false,
                "twofa": false,
                "privateKey": false,
                "walletAddress": false,
                "token": false
            },
            "currencies": {},
            "timeframes": {
                "15s": "15",
                "1m": "60",
                "5m": "300",
                "15m": "900",
                "1h": "3600",
                "4h": "14400",
                "1d": "86400",
                "3d": "259200",
                "1w": "604800",
                "2w": "1209600",
                "1M": "2592000"
            },
            "fees": {
                "trading": {
                    "tierBased": true,
                    "percentage": true,
                    "taker": 0.0007,
                    "maker": 0.0002,
                    "tiers": {
                        "taker": [
                            [
                                0,
                                0.0007
                            ],
                            [
                                2000000,
                                0.0006
                            ],
                            [
                                5000000,
                                0.00055
                            ],
                            [
                                10000000,
                                0.0005
                            ],
                            [
                                25000000,
                                0.0045
                            ],
                            [
                                50000000,
                                0.0004
                            ]
                        ],
                        "maker": [
                            [
                                0,
                                0.0002
                            ],
                            [
                                2000000,
                                0.00015
                            ],
                            [
                                5000000,
                                0.0001
                            ],
                            [
                                10000000,
                                0.00005
                            ],
                            [
                                25000000,
                                0
                            ],
                            [
                                50000000,
                                0
                            ]
                        ]
                    }
                },
                "funding": {
                    "withdraw": {},
                    "deposit": {}
                }
            },
            "status": {
                "status": "ok"
            },
            "exceptions": {
                "exact": {},
                "broad": {}
            },
            "httpExceptions": {},
            "commonCurrencies": {
                "XBT": "BTC",
                "BCC": "BCH",
                "BCHABC": "BCH",
                "BCHSV": "BSV",
                "AMC": "AMC Entertainment Holdings",
                "STARS": "StarLaunch"
            },
            "precisionMode": 2,
            "paddingMode": 0,
            "limits": {
                "leverage": {},
                "amount": {},
                "price": {},
                "cost": {}
            },
            "hostname": "ftx.com",
            "options": {
                "fetchMarkets": {
                    "throwOnUndefinedExpiry": false
                },
                "cancelOrder": {
                    "method": "privateDeleteOrdersOrderId"
                },
                "fetchOpenOrders": {
                    "method": "privateGetOrders"
                },
                "fetchOrders": {
                    "method": "privateGetOrdersHistory"
                },
                "sign": {
                    "ftx.com": "FTX",
                    "ftx.us": "FTXUS"
                },
                "networks": {
                    "AVAX": "avax",
                    "BEP2": "bep2",
                    "BEP20": "bsc",
                    "BNB": "bep2",
                    "BSC": "bsc",
                    "ERC20": "erc20",
                    "ETH": "erc20",
                    "FTM": "ftm",
                    "MATIC": "matic",
                    "OMNI": "omni",
                    "SOL": "sol",
                    "SPL": "sol",
                    "TRC20": "trx",
                    "TRX": "trx"
                }
            }
        }"###).unwrap())
    }

    /// Returns an associative dictionary of currencies
    ///
    /// Fetches all available currencies on an exchange
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_currencies(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut response: Value = Ftx::dispatch(self, "publicGetCoins".into(), params.clone(), Value::Undefined).await;
        let mut currencies: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_array());
        //
        //     {
        //         "success":true,
        //         "result": [
        //             {"id":"BTC","name":"Bitcoin"},
        //             {"id":"ETH","name":"Ethereum"},
        //             {"id":"ETHMOON","name":"10X Long Ethereum Token","underlying":"ETH"},
        //             {"id":"EOSBULL","name":"3X Long EOS Token","underlying":"EOS"},
        //         ],
        //     }
        //
        let mut result: Value = Value::new_object();
        let mut i: usize = 0;
        while i < currencies.len() {
            let mut currency: Value = currencies.get(i.into());
            let mut id: Value = self.safe_string(currency.clone(), Value::from("id"), Value::Undefined);
            let mut code: Value = Ftx::safe_currency_code(self, id.clone(), Value::Undefined);
            let mut name: Value = self.safe_string(currency.clone(), Value::from("name"), Value::Undefined);
            result.set(code.clone(), Value::Json(normalize(&Value::Json(json!({
                "id": id,
                "code": code,
                "info": currency,
                "type": Value::Undefined,
                "name": name,
                "active": Value::Undefined,
                "deposit": Value::Undefined,
                "withdraw": Value::Undefined,
                "fee": Value::Undefined,
                "precision": Value::Undefined,
                "limits": Value::Json(normalize(&Value::Json(json!({
                    "withdraw": Value::Json(normalize(&Value::Json(json!({
                        "min": Value::Undefined,
                        "max": Value::Undefined
                    }))).unwrap()),
                    "amount": Value::Json(normalize(&Value::Json(json!({
                        "min": Value::Undefined,
                        "max": Value::Undefined
                    }))).unwrap())
                }))).unwrap())
            }))).unwrap()));
            i += 1;
        };
        return result.clone();
    }

    /// Returns an array of objects representing market data
    ///
    /// Retrieves data on all markets for ftx
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    async fn fetch_markets(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut response: Value = Ftx::dispatch(self, "publicGetMarkets".into(), params.clone(), Value::Undefined).await;
        //
        //     {
        //         'success': true,
        //         "result": [
        //             {
        //                 "ask":170.37,
        //                 "baseCurrency":null,
        //                 "bid":170.31,
        //                 "change1h":-0.019001554672655036,
        //                 "change24h":-0.024841165359738997,
        //                 "changeBod":-0.03816406029469881,
        //                 "enabled":true,
        //                 "last":170.37,
        //                 "name":"ETH-PERP",
        //                 "price":170.37,
        //                 "priceIncrement":0.01,
        //                 "quoteCurrency":null,
        //                 "quoteVolume24h":7742164.59889,
        //                 "sizeIncrement":0.001,
        //                 "type":"future",
        //                 "underlying":"ETH",
        //                 "volumeUsd24h":7742164.59889
        //             },
        //             {
        //                 "ask":170.44,
        //                 "baseCurrency":"ETH",
        //                 "bid":170.41,
        //                 "change1h":-0.018485459257126403,
        //                 "change24h":-0.023825887743413515,
        //                 "changeBod":-0.037605872388481086,
        //                 "enabled":true,
        //                 "last":172.72,
        //                 "name":"ETH/USD",
        //                 "price":170.44,
        //                 "priceIncrement":0.01,
        //                 "quoteCurrency":"USD",
        //                 "quoteVolume24h":382802.0252,
        //                 "sizeIncrement":0.001,
        //                 "type":"spot",
        //                 "underlying":null,
        //                 "volumeUsd24h":382802.0252
        //             },
        //         ],
        //     }
        //
        //     {
        //         name: "BTC-PERP",
        //         enabled:  true,
        //         postOnly:  false,
        //         priceIncrement: "1.0",
        //         sizeIncrement: "0.0001",
        //         minProvideSize: "0.001",
        //         last: "60397.0",
        //         bid: "60387.0",
        //         ask: "60388.0",
        //         price: "60388.0",
        //         type: "future",
        //         baseCurrency:  null,
        //         quoteCurrency:  null,
        //         underlying: "BTC",
        //         restricted:  false,
        //         highLeverageFeeExempt:  true,
        //         change1h: "-0.0036463231533270636",
        //         change24h: "-0.01844838515677064",
        //         changeBod: "-0.010130151132675475",
        //         quoteVolume24h: "2892083192.6099",
        //         volumeUsd24h: "2892083192.6099"
        //     }
        //
        let mut all_futures_response: Value = Value::Undefined;
        if self.get("has".into()).get(Value::from("future")).is_truthy() && self.get("hostname".into()) != Value::from("ftx.us") {
            all_futures_response = Ftx::dispatch(self, "publicGetFutures".into(), Value::Undefined, Value::Undefined).await;
        };
        //
        //    {
        //        success: true,
        //        result: [
        //            {
        //                name: "1INCH-PERP",
        //                underlying: "1INCH",
        //                description: "1INCH Token Perpetual Futures",
        //                type: "perpetual",
        //                expiry: null,
        //                perpetual: true,
        //                expired: false,
        //                enabled: true,
        //                postOnly: false,
        //                priceIncrement: "0.0001",
        //                sizeIncrement: "1.0",
        //                last: "2.5556",
        //                bid: "2.5555",
        //                ask: "2.5563",
        //                index: "2.5612449804010833",
        //                mark: "2.5587",
        //                imfFactor: "0.0005",
        //                lowerBound: "2.4315",
        //                upperBound: "2.6893",
        //                underlyingDescription: "1INCH Token",
        //                expiryDescription: "Perpetual",
        //                moveStart: null,
        //                marginPrice: "2.5587",
        //                positionLimitWeight: "20.0",
        //                group: "perpetual",
        //                change1h: "0.00799716356760164",
        //                change24h: "0.004909276569004792",
        //                changeBod: "0.008394419484511705",
        //                volumeUsd24h: "17834492.0818",
        //                volume: "7224898.0",
        //                openInterest: "5597917.0",
        //                openInterestUsd: "14323390.2279",
        //            },
        //            ...
        //        ],
        //    }
        //
        let mut result: Value = Value::new_array();
        let mut markets: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_array());
        let mut all_futures: Value = self.safe_value(all_futures_response.clone(), Value::from("result"), Value::new_array());
        let mut all_futures_dict: Value = self.index_by(all_futures.clone(), Value::from("name"), Value::Undefined);
        let mut i: usize = 0;
        while i < markets.len() {
            let mut market: Value = markets.get(i.into());
            let mut id: Value = self.safe_string(market.clone(), Value::from("name"), Value::Undefined);
            let mut future: Value = self.safe_value(all_futures_dict.clone(), id.clone(), Value::Undefined);
            let mut market_type: Value = self.safe_string(market.clone(), Value::from("type"), Value::Undefined);
            let mut contract: Value = (market_type.clone() == Value::from("future")).into();
            let mut base_id: Value = self.safe_string_2(market.clone(), Value::from("baseCurrency"), Value::from("underlying"), Value::Undefined);
            let mut quote_id: Value = self.safe_string(market.clone(), Value::from("quoteCurrency"), Value::from("USD"));
            let mut settle_id: Value = if contract.is_truthy() { Value::from("USD") } else { Value::Undefined };
            let mut base: Value = Ftx::safe_currency_code(self, base_id.clone(), Value::Undefined);
            let mut quote: Value = Ftx::safe_currency_code(self, quote_id.clone(), Value::Undefined);
            let mut settle: Value = Ftx::safe_currency_code(self, settle_id.clone(), Value::Undefined);
            let mut spot: Value = (!contract.is_truthy()).into();
            let mut margin: Value = (!contract.is_truthy()).into();
            let mut perpetual: Value = self.safe_value(future.clone(), Value::from("perpetual"), false.into());
            let mut swap: Value = perpetual.clone();
            let mut option: Value = false.into();
            let mut is_future: Value = (contract.is_truthy() && !swap.is_truthy()).into();
            let mut expiry: Value = Value::Undefined;
            let mut expiry_datetime: Value = self.safe_string(future.clone(), Value::from("expiry"), Value::Undefined);
            let mut r#type: Value = Value::from("spot");
            let mut symbol: Value = base.clone() + Value::from("/") + quote.clone();
            if swap.is_truthy() {
                r#type = Value::from("swap");
                symbol = base.clone() + Value::from("/") + quote.clone() + Value::from(":") + settle.clone();
            } else if is_future.is_truthy() {
                r#type = Value::from("future");
                expiry = self.parse8601(expiry_datetime.clone());
                if expiry.clone().is_nullish() {
                    // it is likely a future that is expiring in this moment
                    let mut options: Value = self.safe_value(self.get("options".into()), Value::from("fetchMarkets"), Value::new_object());
                    let mut throw_on_undefined_expiry: Value = self.safe_value(options.clone(), Value::from("throwOnUndefinedExpiry"), false.into());
                    if throw_on_undefined_expiry.is_truthy() {
                        panic!(r###"BadResponse::new(self.get("id".into()) + Value::from(" symbol '") + id.clone() + Value::from("' is a future contract with an invalid expiry datetime."))"###);
                    } else {
                        continue;
                    };
                };
                let mut parsed_id: Value = id.split(Value::from("-"));
                let mut length: Value = parsed_id.len().into();
                if Value::from(len()) > Value::from(2) {
                    // handling for MOVE contracts
                    // BTC-MOVE-2022Q1
                    // BTC-MOVE-0106
                    // BTC-MOVE-WK-0121
                    parsed_id.pop();
                    // remove expiry
                    // [ 'BTC', 'MOVE' ]
                    // [ 'BTC', 'MOVE' ]
                    // [ 'BTC', 'MOVE', 'WK' ]
                    base = parsed_id.join(Value::from("-"));
                };
                symbol = base.clone() + Value::from("/") + quote.clone() + Value::from(":") + settle.clone() + Value::from("-") + self.yymmdd(expiry.clone(), Value::from(""));
            };
            // check if a market is a spot or future market
            let mut size_increment: Value = self.safe_string(market.clone(), Value::from("sizeIncrement"), Value::Undefined);
            let mut min_provide_size: Value = self.safe_string(market.clone(), Value::from("minProvideSize"), Value::Undefined);
            let mut min_amount_string: Value = size_increment.clone();
            if min_provide_size.clone().is_nonnullish() {
                min_amount_string = if Precise::string_gt(min_provide_size.clone(), size_increment.clone()) { size_increment.clone() } else { min_provide_size.clone() };
            };
            result.push(Value::Json(normalize(&Value::Json(json!({
                "id": id,
                "symbol": symbol,
                "base": base,
                "quote": quote,
                "settle": settle,
                "baseId": base_id,
                "quoteId": quote_id,
                "settleId": settle_id,
                "type": r#type,
                "spot": spot,
                "margin": margin,
                "swap": swap,
                "future": is_future,
                "option": option,
                "active": self.safe_value(market.clone(), Value::from("enabled"), Value::Undefined),
                "contract": contract,
                "linear": if contract.is_truthy() { true.into() } else { Value::Undefined },
                "inverse": if contract.is_truthy() { false.into() } else { Value::Undefined },
                "contractSize": self.parse_number(Value::from("1"), Value::Undefined),
                "expiry": expiry,
                "expiryDatetime": self.iso8601(expiry.clone()),
                "strike": Value::Undefined,
                "optionType": Value::Undefined,
                "precision": Value::Json(normalize(&Value::Json(json!({
                    "amount": self.parse_number(size_increment.clone(), Value::Undefined),
                    "price": Ftx::safe_number(self, market.clone(), Value::from("priceIncrement"), Value::Undefined)
                }))).unwrap()),
                "limits": Value::Json(normalize(&Value::Json(json!({
                    "leverage": Value::Json(normalize(&Value::Json(json!({
                        "min": self.parse_number(Value::from("1"), Value::Undefined),
                        "max": self.parse_number(Value::from("20"), Value::Undefined)
                    }))).unwrap()),
                    "amount": Value::Json(normalize(&Value::Json(json!({
                        "min": self.parse_number(min_amount_string.clone(), Value::Undefined),
                        "max": Value::Undefined
                    }))).unwrap()),
                    "price": Value::Json(normalize(&Value::Json(json!({
                        "min": Value::Undefined,
                        "max": Value::Undefined
                    }))).unwrap()),
                    "cost": Value::Json(normalize(&Value::Json(json!({
                        "min": Value::Undefined,
                        "max": Value::Undefined
                    }))).unwrap())
                }))).unwrap()),
                "info": market
            }))).unwrap()));
            i += 1;
        };
        return result.clone();
    }

    fn parse_ticker(&self, mut ticker: Value, mut market: Value) -> Value {
        //
        //     {
        //         "ask":171.29,
        //         "baseCurrency":null, // base currency for spot markets
        //         "bid":171.24,
        //         "change1h":-0.0012244897959183673,
        //         "change24h":-0.031603346901854366,
        //         "changeBod":-0.03297013492914808,
        //         "enabled":true,
        //         "last":171.44,
        //         "name":"ETH-PERP",
        //         "price":171.29,
        //         "priceIncrement":0.01,
        //         "quoteCurrency":null, // quote currency for spot markets
        //         "quoteVolume24h":8570651.12113,
        //         "sizeIncrement":0.001,
        //         "type":"future",
        //         "underlying":"ETH", // null for spot markets
        //         "volumeUsd24h":8570651.12113,
        //     }
        //
        let mut market_id: Value = self.safe_string(ticker.clone(), Value::from("name"), Value::Undefined);
        if self.get("markets_by_id".into()).contains_key(market_id.clone()) {
            market = self.get("markets_by_id".into()).get(market_id.clone());
        };
        let mut symbol: Value = Ftx::safe_symbol(self, market_id.clone(), market.clone(), Value::Undefined);
        let mut last: Value = self.safe_string(ticker.clone(), Value::from("last"), Value::Undefined);
        let mut timestamp: Value = self.safe_timestamp(ticker.clone(), Value::from("time"), self.milliseconds());
        let mut percentage: Value = self.safe_string(ticker.clone(), Value::from("change24h"), Value::Undefined);
        if percentage.clone().is_nonnullish() {
            percentage = Precise::string_mul(percentage.clone(), Value::from("100"));
        };
        return Ftx::safe_ticker(self, Value::Json(normalize(&Value::Json(json!({
            "symbol": symbol,
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "high": self.safe_string(ticker.clone(), Value::from("high"), Value::Undefined),
            "low": self.safe_string(ticker.clone(), Value::from("low"), Value::Undefined),
            "bid": self.safe_string(ticker.clone(), Value::from("bid"), Value::Undefined),
            "bidVolume": self.safe_string(ticker.clone(), Value::from("bidSize"), Value::Undefined),
            "ask": self.safe_string(ticker.clone(), Value::from("ask"), Value::Undefined),
            "askVolume": self.safe_string(ticker.clone(), Value::from("askSize"), Value::Undefined),
            "vwap": Value::Undefined,
            "open": Value::Undefined,
            "close": last,
            "last": last,
            "previousClose": Value::Undefined,
            "change": Value::Undefined,
            "percentage": percentage,
            "average": Value::Undefined,
            "baseVolume": Value::Undefined,
            "quoteVolume": self.safe_string(ticker.clone(), Value::from("quoteVolume24h"), Value::Undefined),
            "info": ticker
        }))).unwrap()), market.clone());
    }

    /// Returns a [ticker structure](https://docs.ccxt.com/en/latest/manual.html#ticker-structure)
    ///
    /// Fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch the ticker for
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_ticker(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Ftx::market(self, symbol.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "market_name": market.get(Value::from("id"))
        }))).unwrap());
        let mut response: Value = Ftx::dispatch(self, "publicGetMarketsMarketName".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "success":true,
        //         "result":{
        //             "ask":171.29,
        //             "baseCurrency":null, // base currency for spot markets
        //             "bid":171.24,
        //             "change1h":-0.0012244897959183673,
        //             "change24h":-0.031603346901854366,
        //             "changeBod":-0.03297013492914808,
        //             "enabled":true,
        //             "last":171.44,
        //             "name":"ETH-PERP",
        //             "price":171.29,
        //             "priceIncrement":0.01,
        //             "quoteCurrency":null, // quote currency for spot markets
        //             "quoteVolume24h":8570651.12113,
        //             "sizeIncrement":0.001,
        //             "type":"future",
        //             "underlying":"ETH", // null for spot markets
        //             "volumeUsd24h":8570651.12113,
        //         }
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        return Ftx::parse_ticker(self, result.clone(), market.clone());
    }

    /// Returns an array of [ticker structures](https://docs.ccxt.com/en/latest/manual.html#ticker-structure)
    ///
    /// Fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
    ///
    /// # Arguments
    ///
    /// * `symbols` {[string]|undefined} - unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_tickers(&mut self, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        symbols = Ftx::market_symbols(self, symbols.clone());
        let mut response: Value = Ftx::dispatch(self, "publicGetMarkets".into(), params.clone(), Value::Undefined).await;
        //
        //     {
        //         'success': true,
        //         "result": [
        //             {
        //                 "ask":170.44,
        //                 "baseCurrency":"ETH",
        //                 "bid":170.41,
        //                 "change1h":-0.018485459257126403,
        //                 "change24h":-0.023825887743413515,
        //                 "changeBod":-0.037605872388481086,
        //                 "enabled":true,
        //                 "last":172.72,
        //                 "name":"ETH/USD",
        //                 "price":170.44,
        //                 "priceIncrement":0.01,
        //                 "quoteCurrency":"USD",
        //                 "quoteVolume24h":382802.0252,
        //                 "sizeIncrement":0.001,
        //                 "type":"spot",
        //                 "underlying":null,
        //                 "volumeUsd24h":382802.0252
        //             },
        //         ],
        //     }
        //
        let mut tickers: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_array());
        return Ftx::parse_tickers(self, tickers.clone(), symbols.clone(), Value::Undefined);
    }

    /// Returns a dictionary of [order book structures](https://docs.ccxt.com/en/latest/manual.html#order-book-structure) indexed by market symbols
    ///
    /// Fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch the order book for
    /// * `limit` {int|undefined} - the maximum amount of order book entries to return
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_order_book(&mut self, mut symbol: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Ftx::market(self, symbol.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "market_name": market.get(Value::from("id"))
        }))).unwrap());
        if limit.clone().is_nonnullish() {
            request.set("depth".into(), limit.clone());
        };
        // max 100, default 20
        let mut response: Value = Ftx::dispatch(self, "publicGetMarketsMarketNameOrderbook".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "success":true,
        //         "result":{
        //             "asks":[
        //                 [171.95,279.865],
        //                 [171.98,102.42],
        //                 [171.99,124.11],
        //             ],
        //             "bids":[
        //                 [171.93,69.749],
        //                 [171.9,288.325],
        //                 [171.88,87.47],
        //             ],
        //         }
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        return Ftx::parse_order_book(self, result.clone(), symbol.clone(), Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined);
    }

    fn parse_ohlcv(&self, mut ohlcv: Value, mut market: Value) -> Value {
        //
        //     {
        //         "close":177.23,
        //         "high":177.45,
        //         "low":177.2,
        //         "open":177.43,
        //         "startTime":"2019-10-17T13:27:00+00:00",
        //         "time":1571318820000.0,
        //         "volume":0.0
        //     }
        //
        return Value::Json(serde_json::Value::Array(vec![self.safe_integer(ohlcv.clone(), Value::from("time"), Value::Undefined).into(), Ftx::safe_number(self, ohlcv.clone(), Value::from("open"), Value::Undefined).into(), Ftx::safe_number(self, ohlcv.clone(), Value::from("high"), Value::Undefined).into(), Ftx::safe_number(self, ohlcv.clone(), Value::from("low"), Value::Undefined).into(), Ftx::safe_number(self, ohlcv.clone(), Value::from("close"), Value::Undefined).into(), Ftx::safe_number(self, ohlcv.clone(), Value::from("volume"), Value::Undefined).into()]));
    }

    fn get_market_id(&mut self, mut symbol: Value, mut key: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut parts: Value = Ftx::get_market_params(self, symbol.clone(), key.clone(), params.clone());
        return self.safe_string(parts.clone(), Value::from(1), symbol.clone());
    }

    fn get_market_params(&mut self, mut symbol: Value, mut key: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut market: Value = Value::Undefined;
        let mut market_id: Value = Value::Undefined;
        if self.get("markets".into()).contains_key(symbol.clone()) {
            market = Ftx::market(self, symbol.clone());
            market_id = market.get(Value::from("id"));
        } else {
            market_id = self.safe_string(params.clone(), key.clone(), symbol.clone());
        };
        return Value::Json(serde_json::Value::Array(vec![market.clone().into(), market_id.clone().into()]));
    }

    /// Returns a list of candles ordered as timestamp, open, high, low, close, volume (units in quote currency)
    ///
    /// Fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch OHLCV data for
    /// * `timeframe` {string} - the length of time each candle represents
    /// * `since` {int|undefined} - timestamp in ms of the earliest candle to fetch
    /// * `limit` {int|undefined} - the maximum amount of candles to fetch
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    /// * `params.price` {string|undefined} - "index" for index price candles
    /// * `params.until` {int|undefined} - timestamp in ms of the latest candle to fetch
    async fn fetch_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let (mut market, mut market_id) = shift_2(Ftx::get_market_params(self, symbol.clone(), Value::from("market_name"), params.clone()));
        // max 1501 candles, including the current candle when since is not specified
        let mut max_limit: Value = Value::from(5000);
        let mut default_limit: Value = Value::from(1500);
        limit = if limit.clone().is_nullish() { default_limit.clone() } else { Math::min(limit.clone(), max_limit.clone()) };
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "resolution": self.get("timeframes".into()).get(timeframe.clone()),
            "market_name": market_id,
            "limit": limit
        }))).unwrap());
        // 'start_time': parseInt (since / 1000),
        // 'end_time': this.seconds (),
        let mut price: Value = self.safe_string(params.clone(), Value::from("price"), Value::Undefined);
        let mut until: Value = self.safe_integer(params.clone(), Value::from("until"), Value::Undefined);
        params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("price").into(), Value::from("until").into()])));
        if since.clone().is_nonnullish() {
            let mut start_time: Value = parse_int(since.clone() / Value::from(1000));
            request.set("start_time".into(), start_time.clone());
            let mut duration: Value = self.parse_timeframe(timeframe.clone());
            let mut end_time: Value = self.sum(start_time.clone(), limit.clone() * duration.clone());
            request.set("end_time".into(), Math::min(end_time.clone(), self.seconds()));
            if duration.clone() > Value::from(86400) {
                let mut whole_days_in_timeframe: Value = parse_int(duration.clone() / Value::from(86400));
                request.set("limit".into(), Math::min(limit.clone() * whole_days_in_timeframe.clone(), max_limit.clone()));
            };
        };
        if until.clone().is_nonnullish() {
            request.set("end_time".into(), parse_int(until.clone() / Value::from(1000)));
        };
        let mut method: Value = Value::from("publicGetMarketsMarketNameCandles");
        if price.clone() == Value::from("index") {
            if self.get("markets".into()).contains_key(symbol.clone()) {
                request.set("market_name".into(), market.get(Value::from("baseId")));
            };
            method = Value::from("publicGetIndexesMarketNameCandles");
        };
        let mut response: Value = Ftx::dispatch(self, method, extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "success": true,
        //         "result":[
        //             {
        //                 "close":177.23,
        //                 "high":177.45,
        //                 "low":177.2,
        //                 "open":177.43,
        //                 "startTime":"2019-10-17T13:27:00+00:00",
        //                 "time":1571318820000.0,
        //                 "volume":0.0
        //             },
        //             {
        //                 "close":177.26,
        //                 "high":177.33,
        //                 "low":177.23,
        //                 "open":177.23,
        //                 "startTime":"2019-10-17T13:28:00+00:00",
        //                 "time":1571318880000.0,
        //                 "volume":0.0
        //             },
        //         ],
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_array());
        return Ftx::parse_ohlcvs(self, result.clone(), market.clone(), timeframe.clone(), since.clone(), limit.clone());
    }

    fn parse_trade(&mut self, mut trade: Value, mut market: Value) -> Value {
        //
        // fetchTrades (public)
        //
        //     {
        //         "id":1715826,
        //         "liquidation":false,
        //         "price":171.62,
        //         "side":"buy",
        //         "size":2.095,
        //         "time":"2019-10-18T12:59:54.288166+00:00"
        //     }
        //
        // fetchMyTrades (private)
        //
        //     {
        //         "fee": 20.1374935,
        //         "feeRate": 0.0005,
        //         "feeCurrency": "USD",
        //         "future": "EOS-0329",
        //         "id": 11215,
        //         "liquidity": "taker",
        //         "market": "EOS-0329",
        //         "baseCurrency": null,
        //         "quoteCurrency": null,
        //         "orderId": 8436981,
        //         "price": 4.201,
        //         "side": "buy",
        //         "size": 9587,
        //         "time": "2019-03-27T19:15:10.204619+00:00",
        //         "type": "order"
        //     }
        //
        //     {
        //         "baseCurrency": "BTC",
        //         "fee": 0,
        //         "feeCurrency": "USD",
        //         "feeRate": 0,
        //         "future": null,
        //         "id": 664079556,
        //         "liquidity": "taker",
        //         "market": null,
        //         "orderId": null,
        //         "price": 34830.61359,
        //         "quoteCurrency": "USD",
        //         "side": "sell",
        //         "size": 0.0005996,
        //         "time": "2021-01-15T16:05:29.246135+00:00",
        //         "tradeId": null,
        //         "type": "otc"
        //     }
        //
        //     with -ve fee
        //     {
        //         "id": 1171258927,
        //         "fee": -0.0000713875,
        //         "side": "sell",
        //         "size": 1,
        //         "time": "2021-03-11T13:34:35.523627+00:00",
        //         "type": "order",
        //         "price": 14.2775,
        //         "future": null,
        //         "market": "SOL/USD",
        //         "feeRate": -0.000005,
        //         "orderId": 33182929044,
        //         "tradeId": 582936801,
        //         "liquidity": "maker",
        //         "feeCurrency": "USD",
        //         "baseCurrency": "SOL",
        //         "quoteCurrency": "USD"
        //     }
        //
        //     // from OTC order
        //     {
        //         "id": 1172129651,
        //         "fee": 0,
        //         "side": "sell",
        //         "size": 1.47568846,
        //         "time": "2021-03-11T15:04:46.893383+00:00",
        //         "type": "otc",
        //         "price": 14.60932598,
        //         "future": null,
        //         "market": null,
        //         "feeRate": 0,
        //         "orderId": null,
        //         "tradeId": null,
        //         "liquidity": "taker",
        //         "feeCurrency": "USD",
        //         "baseCurrency": "BCHA",
        //         "quoteCurrency": "USD"
        //     }
        //
        let mut id: Value = self.safe_string(trade.clone(), Value::from("id"), Value::Undefined);
        let mut taker_or_maker: Value = self.safe_string(trade.clone(), Value::from("liquidity"), Value::Undefined);
        // a workaround for the OTC trades, they don't have a symbol
        let mut base_id: Value = self.safe_string(trade.clone(), Value::from("baseCurrency"), Value::Undefined);
        let mut quote_id: Value = self.safe_string(trade.clone(), Value::from("quoteCurrency"), Value::Undefined);
        let mut default_market_id: Value = Value::Undefined;
        if base_id.clone().is_nonnullish() && quote_id.clone().is_nonnullish() {
            default_market_id = base_id.clone() + Value::from("/") + quote_id.clone();
        };
        let mut market_id: Value = self.safe_string(trade.clone(), Value::from("market"), default_market_id.clone());
        market = Ftx::safe_market(self, market_id.clone(), market.clone(), Value::from("/"));
        let mut symbol: Value = market.get(Value::from("symbol"));
        let mut timestamp: Value = self.parse8601(self.safe_string(trade.clone(), Value::from("time"), Value::Undefined));
        let mut price_string: Value = self.safe_string(trade.clone(), Value::from("price"), Value::Undefined);
        let mut amount_string: Value = self.safe_string(trade.clone(), Value::from("size"), Value::Undefined);
        let mut side: Value = self.safe_string(trade.clone(), Value::from("side"), Value::Undefined);
        let mut fee: Value = Value::Undefined;
        let mut fee_cost_string: Value = self.safe_string(trade.clone(), Value::from("fee"), Value::Undefined);
        if fee_cost_string.clone().is_nonnullish() {
            let mut fee_currency_id: Value = self.safe_string(trade.clone(), Value::from("feeCurrency"), Value::Undefined);
            let mut fee_currency_code: Value = Ftx::safe_currency_code(self, fee_currency_id.clone(), Value::Undefined);
            fee = Value::Json(normalize(&Value::Json(json!({
                "cost": fee_cost_string,
                "currency": fee_currency_code,
                "rate": self.safe_string(trade.clone(), Value::from("feeRate"), Value::Undefined)
            }))).unwrap());
        };
        let mut order_id: Value = self.safe_string(trade.clone(), Value::from("orderId"), Value::Undefined);
        return Ftx::safe_trade(self, Value::Json(normalize(&Value::Json(json!({
            "info": trade,
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "symbol": symbol,
            "id": id,
            "order": order_id,
            "type": Value::Undefined,
            "takerOrMaker": taker_or_maker,
            "side": side,
            "price": price_string,
            "amount": amount_string,
            "cost": Value::Undefined,
            "fee": fee
        }))).unwrap()), market.clone());
    }

    /// Returns a list of [trade structures](https://docs.ccxt.com/en/latest/manual.html?#public-trades)
    ///
    /// Get the list of most recent trades for a particular symbol
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch trades for
    /// * `since` {int|undefined} - timestamp in ms of the earliest trade to fetch
    /// * `limit` {int|undefined} - the maximum amount of trades to fetch
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_trades(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let (mut market, mut market_id) = shift_2(Ftx::get_market_params(self, symbol.clone(), Value::from("market_name"), params.clone()));
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "market_name": market_id
        }))).unwrap());
        if since.clone().is_nonnullish() {
            // the exchange aligns results to end_time returning 5000 trades max
            // the user must set the end_time (in seconds) close enough to start_time
            // for a proper pagination, fetch the most recent trades first
            // then set the end_time parameter to the timestamp of the last trade
            // start_time and end_time must be in seconds, divided by a thousand
            request.set("start_time".into(), parse_int(since.clone() / Value::from(1000)));
            // start_time doesn't work without end_time
            request.set("end_time".into(), self.seconds());
        };
        if limit.clone().is_nonnullish() {
            request.set("limit".into(), limit.clone());
        };
        let mut response: Value = Ftx::dispatch(self, "publicGetMarketsMarketNameTrades".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "success":true,
        //         "result":[
        //             {
        //                 "id":1715826,
        //                 "liquidation":false,
        //                 "price":171.62,
        //                 "side":"buy",
        //                 "size":2.095,
        //                 "time":"2019-10-18T12:59:54.288166+00:00"
        //             },
        //             {
        //                 "id":1715763,
        //                 "liquidation":false,
        //                 "price":171.89,
        //                 "side":"sell",
        //                 "size":1.477,
        //                 "time":"2019-10-18T12:58:38.443734+00:00"
        //             },
        //         ],
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_array());
        return Ftx::parse_trades(self, result.clone(), market.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    fn parse_trading_fee(&self, mut fee: Value, mut market: Value) -> Value {
        //
        //     {
        //         "backstopProvider": true,
        //         "collateral": 3568181.02691129,
        //         "freeCollateral": 1786071.456884368,
        //         "initialMarginRequirement": 0.12222384240257728,
        //         "liquidating": false,
        //         "maintenanceMarginRequirement": 0.07177992558058484,
        //         "makerFee": 0.0002,
        //         "marginFraction": 0.5588433331419503,
        //         "openMarginFraction": 0.2447194090423075,
        //         "takerFee": 0.0005,
        //         "totalAccountValue": 3568180.98341129,
        //         "totalPositionSize": 6384939.6992,
        //         "username": "user@domain.com",
        //         "positions": [
        //             {
        //                 "cost": -31.7906,
        //                 "entryPrice": 138.22,
        //                 "future": "ETH-PERP",
        //                 "initialMarginRequirement": 0.1,
        //                 "longOrderSize": 1744.55,
        //                 "maintenanceMarginRequirement": 0.04,
        //                 "netSize": -0.23,
        //                 "openSize": 1744.32,
        //                 "realizedPnl": 3.39441714,
        //                 "shortOrderSize": 1732.09,
        //                 "side": "sell",
        //                 "size": 0.23,
        //                 "unrealizedPnl": 0,
        //             },
        //         ],
        //     },
        //
        let mut symbol: Value = Ftx::safe_symbol(self, Value::Undefined, market.clone(), Value::Undefined);
        let mut maker: Value = Ftx::safe_number(self, fee.clone(), Value::from("makerFee"), Value::Undefined);
        let mut taker: Value = Ftx::safe_number(self, fee.clone(), Value::from("takerFee"), Value::Undefined);
        return Value::Json(normalize(&Value::Json(json!({
            "info": fee,
            "symbol": symbol,
            "maker": maker,
            "taker": taker,
            "percentage": true,
            "tierBased": true
        }))).unwrap());
    }

    fn parse_trading_fees(&self, mut response: Value) -> Value {
        let mut result: Value = Value::new_object();
        let mut i: usize = 0;
        while i < self.get("symbols".into()).len() {
            let mut symbol: Value = self.get("symbols".into()).get(i.into());
            let mut market: Value = Ftx::market(self, symbol.clone());
            result.set(symbol.clone(), Ftx::parse_trading_fee(self, response.clone(), market.clone()));
            i += 1;
        };
        return result.clone();
    }

    /// Returns a [fee structure](https://docs.ccxt.com/en/latest/manual.html#fee-structure)
    ///
    /// Fetch the trading fee for a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch the fee for
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_trading_fee(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Ftx::market(self, symbol.clone());
        let mut response: Value = Ftx::dispatch(self, "privateGetAccount".into(), params.clone(), Value::Undefined).await;
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        return Ftx::parse_trading_fee(self, result.clone(), market.clone());
    }

    /// Returns a dictionary of [fee structures](https://docs.ccxt.com/en/latest/manual.html#fee-structure) indexed by market symbols
    ///
    /// Fetch the trading fees for multiple markets
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_trading_fees(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut response: Value = Ftx::dispatch(self, "privateGetAccount".into(), params.clone(), Value::Undefined).await;
        //
        //     {
        //         "success": true,
        //         "result": {
        //             "backstopProvider": true,
        //             "collateral": 3568181.02691129,
        //             "freeCollateral": 1786071.456884368,
        //             "initialMarginRequirement": 0.12222384240257728,
        //             "liquidating": false,
        //             "maintenanceMarginRequirement": 0.07177992558058484,
        //             "makerFee": 0.0002,
        //             "marginFraction": 0.5588433331419503,
        //             "openMarginFraction": 0.2447194090423075,
        //             "takerFee": 0.0005,
        //             "totalAccountValue": 3568180.98341129,
        //             "totalPositionSize": 6384939.6992,
        //             "username": "user@domain.com",
        //             "positions": [
        //                 {
        //                     "cost": -31.7906,
        //                     "entryPrice": 138.22,
        //                     "future": "ETH-PERP",
        //                     "initialMarginRequirement": 0.1,
        //                     "longOrderSize": 1744.55,
        //                     "maintenanceMarginRequirement": 0.04,
        //                     "netSize": -0.23,
        //                     "openSize": 1744.32,
        //                     "realizedPnl": 3.39441714,
        //                     "shortOrderSize": 1732.09,
        //                     "side": "sell",
        //                     "size": 0.23,
        //                     "unrealizedPnl": 0,
        //                 },
        //             ],
        //         },
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        return Ftx::parse_trading_fees(self, result.clone());
    }

    /// Returns a list of [funding rate structures](https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure)
    ///
    /// Fetches historical funding rate prices
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - unified symbol of the market to fetch the funding rate history for
    /// * `since` {int|undefined} - timestamp in ms of the earliest funding rate to fetch
    /// * `limit` {int|undefined} - the maximum amount of [funding rate structures](https://docs.ccxt.com/en/latest/manual.html?#funding-rate-history-structure) to fetch
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    /// * `params.until` {int|undefined} - timestamp in ms of the latest funding rate to fetch
    async fn fetch_funding_rate_history(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::new_object();
        if symbol.clone().is_nonnullish() {
            let mut market: Value = Ftx::market(self, symbol.clone());
            symbol = market.get(Value::from("symbol"));
            request.set("future".into(), market.get(Value::from("id")));
        };
        if since.clone().is_nonnullish() {
            request.set("start_time".into(), parse_int(since.clone() / Value::from(1000)));
        };
        let mut until: Value = self.safe_integer_2(params.clone(), Value::from("until"), Value::from("till"), Value::Undefined);
        // unified in milliseconds
        params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("until").into(), Value::from("till").into()])));
        if until.clone().is_nonnullish() {
            request.set("end_time".into(), parse_int(until.clone() / Value::from(1000)));
        };
        let mut response: Value = Ftx::dispatch(self, "publicGetFundingRates".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //        "success": true,
        //        "result": [
        //          {
        //            "future": "BTC-PERP",
        //            "rate": 0.0025,
        //            "time": "2019-06-02T08:00:00+00:00"
        //          }
        //        ]
        //      }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_array());
        let mut rates: Value = Value::new_array();
        let mut i: usize = 0;
        while i < result.len() {
            let mut entry: Value = result.get(i.into());
            let mut market_id: Value = self.safe_string(entry.clone(), Value::from("future"), Value::Undefined);
            let mut timestamp: Value = self.parse8601(self.safe_string(entry.clone(), Value::from("time"), Value::Undefined));
            rates.push(Value::Json(normalize(&Value::Json(json!({
                "info": entry,
                "symbol": Ftx::safe_symbol(self, market_id.clone(), Value::Undefined, Value::Undefined),
                "fundingRate": Ftx::safe_number(self, entry.clone(), Value::from("rate"), Value::Undefined),
                "timestamp": timestamp,
                "datetime": self.iso8601(timestamp.clone())
            }))).unwrap()));
            i += 1;
        };
        let mut sorted: Value = self.sort_by(rates.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        return Ftx::filter_by_symbol_since_limit(self, sorted.clone(), symbol.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    fn parse_balance(&self, mut response: Value) -> Value {
        let mut result: Value = Value::Json(normalize(&Value::Json(json!({
            "info": response
        }))).unwrap());
        let mut balances: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_array());
        let mut i: usize = 0;
        while i < balances.len() {
            let mut balance: Value = balances.get(i.into());
            let mut code: Value = Ftx::safe_currency_code(self, self.safe_string(balance.clone(), Value::from("coin"), Value::Undefined), Value::Undefined);
            let mut account: Value = Ftx::account(self);
            account.set("free".into(), self.safe_string_2(balance.clone(), Value::from("availableWithoutBorrow"), Value::from("free"), Value::Undefined));
            account.set("total".into(), self.safe_string(balance.clone(), Value::from("total"), Value::Undefined));
            result.set(code.clone(), account.clone());
            i += 1;
        };
        return Ftx::safe_balance(self, result.clone());
    }

    /// Returns a [balance structure](https://docs.ccxt.com/en/latest/manual.html?#balance-structure)
    ///
    /// Query for balance and get the amount of funds available for trading or funds locked in orders
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut response: Value = Ftx::dispatch(self, "privateGetWalletBalances".into(), params.clone(), Value::Undefined).await;
        //
        //     {
        //         "success": true,
        //         "result": [
        //             {
        //                 "coin": "USDTBEAR",
        //                 "free": 2320.2,
        //                 "total": 2340.2
        //             },
        //         ],
        //     }
        //
        return Ftx::parse_balance(self, response.clone());
    }

    fn parse_order_status(&self, mut status: Value) -> Value {
        let mut statuses: Value = Value::Json(normalize(&Value::Json(json!({
            "new": "open",
            "open": "open",
            "closed": "closed",
            "triggered": "closed"
        }))).unwrap());
        // filled or canceled
        return self.safe_string(statuses.clone(), status.clone(), status.clone());
    }

    fn parse_order(&mut self, mut order: Value, mut market: Value) -> Value {
        //
        // limit orders - fetchOrder, fetchOrders, fetchOpenOrders, createOrder, editOrder
        //
        //     {
        //         "createdAt": "2019-03-05T09:56:55.728933+00:00",
        //         "filledSize": 0,
        //         "future": "XRP-PERP",
        //         "id": 9596912,
        //         "market": "XRP-PERP",
        //         "price": 0.306525,
        //         "remainingSize": 31431,
        //         "side": "sell",
        //         "size": 31431,
        //         "status": "open",
        //         "type": "limit",
        //         "reduceOnly": false,
        //         "ioc": false,
        //         "postOnly": false,
        //         "clientId": null,
        //     }
        //
        // market orders - fetchOrder, fetchOrders, fetchOpenOrders, createOrder
        //
        //     {
        //         "avgFillPrice": 2666.0,
        //         "clientId": None,
        //         "createdAt": "2020-02-12T00: 53: 49.009726+00: 00",
        //         "filledSize": 0.0007,
        //         "future": None,
        //         "id": 3109208514,
        //         "ioc": True,
        //         "market": "BNBBULL/USD",
        //         "postOnly": False,
        //         "price": None,
        //         "reduceOnly": False,
        //         "remainingSize": 0.0,
        //         "side": "buy",
        //         "size": 0.0007,
        //         "status": "closed",
        //         "type": "market"
        //     }
        //
        // createOrder (conditional, "stop", "trailingStop", or "takeProfit")
        //
        //     {
        //         "createdAt": "2019-03-05T09:56:55.728933+00:00",
        //         "future": "XRP-PERP",
        //         "id": 9596912,
        //         "market": "XRP-PERP",
        //         "triggerPrice": 0.306525,
        //         "orderId": null,
        //         "side": "sell",
        //         "size": 31431,
        //         "status": "open",
        //         "type": "stop",
        //         "orderPrice": null,
        //         "error": null,
        //         "triggeredAt": null,
        //         "reduceOnly": false
        //     }
        //
        // editOrder (conditional, stop, trailing stop, take profit)
        //
        //     {
        //         "createdAt": "2019-03-05T09:56:55.728933+00:00",
        //         "future": "XRP-PERP",
        //         "id": 9596912,
        //         "market": "XRP-PERP",
        //         "triggerPrice": 0.306225,
        //         "orderId": null,
        //         "side": "sell",
        //         "size": 31431,
        //         "status": "open",
        //         "type": "stop",
        //         "orderPrice": null,
        //         "error": null,
        //         "triggeredAt": null,
        //         "reduceOnly": false,
        //         "orderType": "market",
        //         "filledSize": 0,
        //         "avgFillPrice": null,
        //         "retryUntilFilled": false
        //     }
        //
        // canceled order with a closed status
        //
        //     {
        //         "avgFillPrice":null,
        //         "clientId":null,
        //         "createdAt":"2020-09-01T13:45:57.119695+00:00",
        //         "filledSize":0.0,
        //         "future":null,
        //         "id":8553541288,
        //         "ioc":false,
        //         "liquidation":false,
        //         "market":"XRP/USDT",
        //         "postOnly":false,
        //         "price":0.5,
        //         "reduceOnly":false,
        //         "remainingSize":0.0,
        //         "side":"sell",
        //         "size":46.0,
        //         "status":"closed",
        //         "type":"limit"
        //     }
        //
        let mut id: Value = self.safe_string(order.clone(), Value::from("id"), Value::Undefined);
        let mut timestamp: Value = self.parse8601(self.safe_string(order.clone(), Value::from("createdAt"), Value::Undefined));
        let mut status: Value = Ftx::parse_order_status(self, self.safe_string(order.clone(), Value::from("status"), Value::Undefined));
        let mut amount: Value = self.safe_string(order.clone(), Value::from("size"), Value::Undefined);
        let mut filled: Value = self.safe_string(order.clone(), Value::from("filledSize"), Value::Undefined);
        let mut remaining: Value = self.safe_string(order.clone(), Value::from("remainingSize"), Value::Undefined);
        if Precise::string_equals(remaining.clone(), Value::from("0")) {
            remaining = Precise::string_sub(amount.clone(), filled.clone());
            if Precise::string_gt(remaining.clone(), Value::from("0")) {
                status = Value::from("canceled");
            };
        };
        let mut market_id: Value = self.safe_string(order.clone(), Value::from("market"), Value::Undefined);
        market = Ftx::safe_market(self, market_id.clone(), market.clone(), Value::Undefined);
        let mut symbol: Value = market.get(Value::from("symbol"));
        if symbol.clone().is_nullish() {
            // support for delisted market ids
            // https://github.com/ccxt/ccxt/issues/7113
            symbol = market_id.clone();
        };
        let mut side: Value = self.safe_string(order.clone(), Value::from("side"), Value::Undefined);
        let mut r#type: Value = self.safe_string(order.clone(), Value::from("type"), Value::Undefined);
        let mut average: Value = self.safe_string(order.clone(), Value::from("avgFillPrice"), Value::Undefined);
        let mut price: Value = self.safe_string_2(order.clone(), Value::from("price"), Value::from("triggerPrice"), average.clone());
        let mut last_trade_timestamp: Value = self.parse8601(self.safe_string(order.clone(), Value::from("triggeredAt"), Value::Undefined));
        let mut client_order_id: Value = self.safe_string(order.clone(), Value::from("clientId"), Value::Undefined);
        let mut stop_price: Value = Ftx::safe_number(self, order.clone(), Value::from("triggerPrice"), Value::Undefined);
        let mut post_only: Value = self.safe_value(order.clone(), Value::from("postOnly"), Value::Undefined);
        let mut ioc: Value = self.safe_value(order.clone(), Value::from("ioc"), Value::Undefined);
        let mut time_in_force: Value = Value::Undefined;
        if ioc.is_truthy() {
            time_in_force = Value::from("IOC");
        };
        if post_only.is_truthy() {
            time_in_force = Value::from("PO");
        };
        return Ftx::safe_order(self, Value::Json(normalize(&Value::Json(json!({
            "info": order,
            "id": id,
            "clientOrderId": client_order_id,
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "lastTradeTimestamp": last_trade_timestamp,
            "symbol": symbol,
            "type": r#type,
            "timeInForce": time_in_force,
            "postOnly": post_only,
            "reduceOnly": self.safe_value(order.clone(), Value::from("reduceOnly"), Value::Undefined),
            "side": side,
            "price": price,
            "stopPrice": stop_price,
            "amount": amount,
            "cost": Value::Undefined,
            "average": average,
            "filled": filled,
            "remaining": remaining,
            "status": status,
            "fee": Value::Undefined,
            "trades": Value::Undefined
        }))).unwrap()), market.clone());
    }

    /// Returns an [order structure](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Create a trade order
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to create an order in
    /// * `type` {string} - 'market' or 'limit'
    /// * `side` {string} - 'buy' or 'sell'
    /// * `amount` {float} - how much of currency you want to trade in units of base currency
    /// * `price` {float|undefined} - the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn create_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Ftx::market(self, symbol.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "market": market.get(Value::from("id")),
            "side": side,
            "size": parse_float(Ftx::amount_to_precision(self, symbol.clone(), amount.clone()))
        }))).unwrap());
        // 'buy' or 'sell'
        // 'price': 0.306525, // send null for market orders
        // 'reduceOnly': false, // optional, default is false
        // 'ioc': false, // optional, default is false, limit or market orders only
        // 'postOnly': false, // optional, default is false, limit or market orders only
        // 'clientId': 'abcdef0123456789', // string, optional, client order id, limit or market orders only
        // 'triggerPrice': 0.306525, // required for stop and takeProfit orders
        // 'trailValue': -0.306525, // required for trailingStop orders, negative for "sell"; positive for "buy"
        // 'orderPrice': 0.306525, // optional, for stop and takeProfit orders only (market by default). If not specified, a market order will be submitted
        let mut reduce_only: Value = self.safe_value(params.clone(), Value::from("reduceOnly"), Value::Undefined);
        if reduce_only.clone() == true.into() {
            request.set("reduceOnly".into(), reduce_only.clone());
        };
        let mut client_order_id: Value = self.safe_string_2(params.clone(), Value::from("clientId"), Value::from("clientOrderId"), Value::Undefined);
        if client_order_id.clone().is_nonnullish() {
            request.set("clientId".into(), client_order_id.clone());
            params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("clientId").into(), Value::from("clientOrderId").into()])));
        };
        let mut method: Value = Value::Undefined;
        let mut trigger_price: Value = self.safe_value_2(params.clone(), Value::from("triggerPrice"), Value::from("stopPrice"), Value::Undefined);
        let mut stop_loss_price: Value = self.safe_value(params.clone(), Value::from("stopLossPrice"), Value::Undefined);
        let mut take_profit_price: Value = self.safe_value(params.clone(), Value::from("takeProfitPrice"), Value::Undefined);
        let mut is_take_profit: Value = (r#type.clone() == Value::from("takeProfit")).into();
        let mut is_stop_loss: Value = (r#type.clone() == Value::from("stop")).into();
        let mut is_trigger_price: Value = false.into();
        if trigger_price.clone().is_nonnullish() {
            is_trigger_price = (!is_take_profit.is_truthy() && !is_stop_loss.is_truthy()).into();
        } else if take_profit_price.clone().is_nonnullish() {
            is_take_profit = true.into();
            trigger_price = take_profit_price.clone();
        } else if stop_loss_price.clone().is_nonnullish() {
            is_stop_loss = true.into();
            trigger_price = stop_loss_price.clone();
        };
        if !is_trigger_price.is_truthy() {
            request.set("type".into(), r#type.clone());
        };
        let mut is_stop_order: Value = (is_take_profit.is_truthy() || is_stop_loss.is_truthy() || is_trigger_price.is_truthy()).into();
        params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("stopPrice").into(), Value::from("triggerPrice").into(), Value::from("stopLossPrice").into(), Value::from("takeProfitPrice").into()])));
        if is_stop_order.is_truthy() {
            if trigger_price.clone().is_nullish() {
                if is_take_profit.is_truthy() {
                    panic!(r###"ArgumentsRequired::new(self.get("id".into()) + Value::from(" createOrder() requires a triggerPrice param, a stopPrice or a takeProfitPrice param for a takeProfit order"))"###);
                } else if is_stop_loss.is_truthy() {
                    panic!(r###"ArgumentsRequired::new(self.get("id".into()) + Value::from(" createOrder() requires a triggerPrice param, a stopPrice or a stopLossPrice param for a stop order"))"###);
                };
            };
            method = Value::from("privatePostConditionalOrders");
            request.set("triggerPrice".into(), parse_float(Ftx::price_to_precision(self, symbol.clone(), trigger_price.clone())));
            if r#type.clone() == Value::from("limit") && price.clone().is_nullish() {
                panic!(r###"ArgumentsRequired::new(self.get("id".into()) + Value::from(" createOrder () requires a price argument for stop limit orders"))"###);
            };
            if price.clone().is_nonnullish() {
                request.set("orderPrice".into(), parse_float(Ftx::price_to_precision(self, symbol.clone(), price.clone())));
            };
            // optional, order type is limit if this is specified, otherwise market
            if is_stop_loss.is_truthy() || is_take_profit.is_truthy() {
                request.set("type".into(), if is_stop_loss.is_truthy() { Value::from("stop") } else { Value::from("takeProfit") });
            };
        } else if r#type.clone() == Value::from("limit") || r#type.clone() == Value::from("market") {
            method = Value::from("privatePostOrders");
            let mut is_market_order: Value = false.into();
            if r#type.clone() == Value::from("limit") {
                request.set("price".into(), parse_float(Ftx::price_to_precision(self, symbol.clone(), price.clone())));
            } else if r#type.clone() == Value::from("market") {
                request.set("price".into(), Value::null());
                is_market_order = true.into();
            };
            let mut time_in_force: Value = self.safe_string(params.clone(), Value::from("timeInForce"), Value::Undefined);
            let mut post_only: Value = Ftx::is_post_only(self, is_market_order.clone(), Value::Undefined, params.clone());
            params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("timeInForce").into(), Value::from("postOnly").into()])));
            if time_in_force.clone().is_nonnullish() {
                if !time_in_force.clone() == Value::from("IOC") || time_in_force.clone() == Value::from("PO") {
                    panic!(r###"InvalidOrder::new(self.get("id".into()) + Value::from(" createOrder () does not accept timeInForce: ") + time_in_force.clone() + Value::from(" orders, only IOC and PO orders are allowed"))"###);
                };
            };
            let mut ioc: Value = (time_in_force.clone() == Value::from("IOC")).into();
            if post_only.is_truthy() {
                request.set("postOnly".into(), true.into());
            };
            if ioc.is_truthy() {
                request.set("ioc".into(), true.into());
            };
        } else if r#type.clone() == Value::from("trailingStop") {
            let mut trail_value: Value = Ftx::safe_number(self, params.clone(), Value::from("trailValue"), price.clone());
            if trail_value.clone().is_nullish() {
                panic!(r###"ArgumentsRequired::new(self.get("id".into()) + Value::from(" createOrder () requires a trailValue parameter or a price argument (negative or positive) for a ") + r#type.clone() + Value::from(" order"))"###);
            };
            method = Value::from("privatePostConditionalOrders");
            request.set("trailValue".into(), parse_float(Ftx::price_to_precision(self, symbol.clone(), trail_value.clone())));
        } else {
            // negative for "sell", positive for "buy"
            panic!(r###"InvalidOrder::new(self.get("id".into()) + Value::from(" createOrder () does not support order type ") + r#type.clone() + Value::from(", only limit, market, stop, trailingStop, or takeProfit orders are supported"))"###);
        };
        let mut response: Value = Ftx::dispatch(self, method, extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        // regular orders
        //
        //     {
        //         "success": true,
        //         "result": [
        //             {
        //                 "createdAt": "2019-03-05T09:56:55.728933+00:00",
        //                 "filledSize": 0,
        //                 "future": "XRP-PERP",
        //                 "id": 9596912,
        //                 "market": "XRP-PERP",
        //                 "price": 0.306525,
        //                 "remainingSize": 31431,
        //                 "side": "sell",
        //                 "size": 31431,
        //                 "status": "open",
        //                 "type": "limit",
        //                 "reduceOnly": false,
        //                 "ioc": false,
        //                 "postOnly": false,
        //                 "clientId": null,
        //             }
        //         ]
        //     }
        //
        // conditional orders
        //
        //     {
        //         "success":true,
        //         "result":{
        //             "id":215826320,
        //             "market":"BTC/USD",
        //             "future":null,
        //             "side":"sell",
        //             "type":"take_profit", // the API accepts the "takeProfit" string in camelCase notation but returns the "take_profit" type with underscore
        //             "orderPrice":40000.0,
        //             "triggerPrice":39000.0,
        //             "size":0.001,
        //             "status":"open",
        //             "createdAt":"2022-06-12T15:41:41.836788+00:00",
        //             "triggeredAt":null,
        //             "orderId":null,
        //             "error":null,
        //             "reduceOnly":false,
        //             "trailValue":null,
        //             "trailStart":null,
        //             "cancelledAt":null,
        //             "cancelReason":null,
        //             "retryUntilFilled":false,
        //             "orderType":"limit"
        //         }
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_array());
        return Ftx::parse_order(self, result.clone(), market.clone());
    }

    async fn edit_order(&mut self, mut id: Value, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Ftx::market(self, symbol.clone());
        let mut request: Value = Value::new_object();
        let mut method: Value = Value::Undefined;
        let mut client_order_id: Value = self.safe_string_2(params.clone(), Value::from("client_order_id"), Value::from("clientOrderId"), Value::Undefined);
        let mut trigger_price: Value = Ftx::safe_number(self, params.clone(), Value::from("triggerPrice"), Value::Undefined);
        let mut order_price: Value = Ftx::safe_number(self, params.clone(), Value::from("orderPrice"), Value::Undefined);
        let mut trail_value: Value = Ftx::safe_number(self, params.clone(), Value::from("trailValue"), Value::Undefined);
        params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("client_order_id").into(), Value::from("clientOrderId").into(), Value::from("triggerPrice").into(), Value::from("orderPrice").into(), Value::from("trailValue").into()])));
        let mut trigger_price_is_defined: Value = (trigger_price.clone().is_nonnullish()).into();
        let mut order_price_is_defined: Value = (order_price.clone().is_nonnullish()).into();
        let mut trail_value_is_defined: Value = (trail_value.clone().is_nonnullish()).into();
        if trigger_price_is_defined.is_truthy() || order_price_is_defined.is_truthy() || trail_value_is_defined.is_truthy() {
            method = Value::from("privatePostConditionalOrdersOrderIdModify");
            request.set("order_id".into(), id.clone());
            if trigger_price_is_defined.is_truthy() {
                request.set("triggerPrice".into(), parse_float(Ftx::price_to_precision(self, symbol.clone(), trigger_price.clone())));
            };
            if order_price_is_defined.is_truthy() {
                // only for stop limit or take profit limit orders
                request.set("orderPrice".into(), parse_float(Ftx::price_to_precision(self, symbol.clone(), order_price.clone())));
            };
            if trail_value_is_defined.is_truthy() {
                // negative for sell orders, positive for buy orders
                request.set("trailValue".into(), parse_float(Ftx::price_to_precision(self, symbol.clone(), trail_value.clone())));
            };
        } else {
            if client_order_id.clone().is_nullish() {
                method = Value::from("privatePostOrdersOrderIdModify");
                request.set("order_id".into(), id.clone());
            } else {
                method = Value::from("privatePostOrdersByClientIdClientOrderIdModify");
                request.set("client_order_id".into(), client_order_id.clone());
            };
            // request['clientId'] = clientOrderId;
            if price.clone().is_nonnullish() {
                request.set("price".into(), parse_float(Ftx::price_to_precision(self, symbol.clone(), price.clone())));
            };
        };
        if amount.clone().is_nonnullish() {
            request.set("size".into(), parse_float(Ftx::amount_to_precision(self, symbol.clone(), amount.clone())));
        };
        let mut response: Value = Ftx::dispatch(self, method, extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        // regular order
        //
        //     {
        //         "success": true,
        //         "result": {
        //             "createdAt": "2019-03-05T11:56:55.728933+00:00",
        //             "filledSize": 0,
        //             "future": "XRP-PERP",
        //             "id": 9596932,
        //             "market": "XRP-PERP",
        //             "price": 0.326525,
        //             "remainingSize": 31431,
        //             "side": "sell",
        //             "size": 31431,
        //             "status": "open",
        //             "type": "limit",
        //             "reduceOnly": false,
        //             "ioc": false,
        //             "postOnly": false,
        //             "clientId": null,
        //         }
        //     }
        //
        // conditional trigger order
        //
        //     {
        //         "success": true,
        //         "result": {
        //             "createdAt": "2019-03-05T09:56:55.728933+00:00",
        //             "future": "XRP-PERP",
        //             "id": 9596912,
        //             "market": "XRP-PERP",
        //             "triggerPrice": 0.306225,
        //             "orderId": null,
        //             "side": "sell",
        //             "size": 31431,
        //             "status": "open",
        //             "type": "stop",
        //             "orderPrice": null,
        //             "error": null,
        //             "triggeredAt": null,
        //             "reduceOnly": false,
        //             "orderType": "market",
        //             "filledSize": 0,
        //             "avgFillPrice": null,
        //             "retryUntilFilled": false
        //         }
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        return Ftx::parse_order(self, result.clone(), market.clone());
    }

    /// Returns an [order structure](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Cancels an open order
    ///
    /// # Arguments
    ///
    /// * `id` {string} - order id
    /// * `symbol` {string|undefined} - not used by ftx cancelOrder ()
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    /// * `params.stop` {bool} - true if cancelling a stop/trigger order
    async fn cancel_order(&mut self, mut id: Value, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::new_object();
        // support for canceling conditional orders
        // https://github.com/ccxt/ccxt/issues/6669
        let mut options: Value = self.safe_value(self.get("options".into()), Value::from("cancelOrder"), Value::new_object());
        let mut default_method: Value = self.safe_string(options.clone(), Value::from("method"), Value::from("privateDeleteOrdersOrderId"));
        let mut method: Value = self.safe_string(params.clone(), Value::from("method"), default_method.clone());
        let mut r#type: Value = self.safe_value(params.clone(), Value::from("type"), Value::Undefined);
        // Deprecated: use params.stop instead
        let mut stop: Value = self.safe_value(params.clone(), Value::from("stop"), Value::Undefined);
        let mut client_order_id: Value = self.safe_value_2(params.clone(), Value::from("client_order_id"), Value::from("clientOrderId"), Value::Undefined);
        if client_order_id.clone().is_nullish() {
            request.set("order_id".into(), parse_int(id.clone()));
            if stop.is_truthy() || r#type.clone() == Value::from("stop") || r#type.clone() == Value::from("trailingStop") || r#type.clone() == Value::from("takeProfit") {
                method = Value::from("privateDeleteConditionalOrdersOrderId");
            };
        } else {
            request.set("client_order_id".into(), client_order_id.clone());
            method = Value::from("privateDeleteOrdersByClientIdClientOrderId");
        };
        let mut query: Value = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("method").into(), Value::from("type").into(), Value::from("client_order_id").into(), Value::from("clientOrderId").into(), Value::from("stop").into()])));
        let mut response: Value = Ftx::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        //
        //     {
        //         "success": true,
        //         "result": "Order queued for cancelation"
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        return result.clone();
    }

    /// Returns a list of [order structures](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Cancel all open orders
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - unified market symbol, only orders in the market of this symbol are cancelled when symbol is not undefined
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn cancel_all_orders(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::new_object();
        // 'market': market['id'], // optional
        // 'conditionalOrdersOnly': false, // cancel conditional orders only
        // 'limitOrdersOnly': false, // cancel existing limit orders (non-conditional orders) only
        let mut market_id: Value = Ftx::get_market_id(self, symbol.clone(), Value::from("market"), params.clone());
        if market_id.clone().is_nonnullish() {
            request.set("market".into(), market_id.clone());
        };
        let mut response: Value = Ftx::dispatch(self, "privateDeleteOrders".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        //
        //     {
        //         "success": true,
        //         "result": "Orders queued for cancelation"
        //     }
        //
        return result.clone();
    }

    /// Returns an [order structure](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Fetches information on an order made by the user
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - not used by ftx fetchOrder
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_order(&mut self, mut id: Value, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::new_object();
        let mut client_order_id: Value = self.safe_value_2(params.clone(), Value::from("client_order_id"), Value::from("clientOrderId"), Value::Undefined);
        let mut method: Value = Value::from("privateGetOrdersOrderId");
        if client_order_id.clone().is_nullish() {
            request.set("order_id".into(), id.clone());
        } else {
            request.set("client_order_id".into(), client_order_id.clone());
            params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("client_order_id").into(), Value::from("clientOrderId").into()])));
            method = Value::from("privateGetOrdersByClientIdClientOrderId");
        };
        let mut response: Value = Ftx::dispatch(self, method, extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "success": true,
        //         "result": {
        //             "createdAt": "2019-03-05T09:56:55.728933+00:00",
        //             "filledSize": 10,
        //             "future": "XRP-PERP",
        //             "id": 9596912,
        //             "market": "XRP-PERP",
        //             "price": 0.306525,
        //             "avgFillPrice": 0.306526,
        //             "remainingSize": 31421,
        //             "side": "sell",
        //             "size": 31431,
        //             "status": "open",
        //             "type": "limit",
        //             "reduceOnly": false,
        //             "ioc": false,
        //             "postOnly": false,
        //             "clientId": null
        //         }
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        return Ftx::parse_order(self, result.clone(), Value::Undefined);
    }

    /// Returns a list of [order structures](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Fetch all unfilled currently open orders
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - unified market symbol
    /// * `since` {int|undefined} - the earliest time in ms to fetch open orders for
    /// * `limit` {int|undefined} - the maximum number of  open orders structures to retrieve
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_open_orders(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::new_object();
        let (mut market, mut market_id) = shift_2(Ftx::get_market_params(self, symbol.clone(), Value::from("market"), params.clone()));
        if market_id.clone().is_nonnullish() {
            request.set("market".into(), market_id.clone());
        };
        // support for canceling conditional orders
        // https://github.com/ccxt/ccxt/issues/6669
        let mut options: Value = self.safe_value(self.get("options".into()), Value::from("fetchOpenOrders"), Value::new_object());
        let mut default_method: Value = self.safe_string(options.clone(), Value::from("method"), Value::from("privateGetOrders"));
        let mut method: Value = self.safe_string(params.clone(), Value::from("method"), default_method.clone());
        let mut r#type: Value = self.safe_value(params.clone(), Value::from("type"), Value::Undefined);
        let mut stop: Value = self.safe_value(params.clone(), Value::from("stop"), Value::Undefined);
        if stop.is_truthy() || r#type.clone() == Value::from("stop") || r#type.clone() == Value::from("trailingStop") || r#type.clone() == Value::from("takeProfit") {
            method = Value::from("privateGetConditionalOrders");
        };
        let mut query: Value = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("method").into(), Value::from("type").into(), Value::from("stop").into()])));
        let mut response: Value = Ftx::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        //
        //     {
        //         "success": true,
        //         "result": [
        //             {
        //                 "createdAt": "2019-03-05T09:56:55.728933+00:00",
        //                 "filledSize": 10,
        //                 "future": "XRP-PERP",
        //                 "id": 9596912,
        //                 "market": "XRP-PERP",
        //                 "price": 0.306525,
        //                 "avgFillPrice": 0.306526,
        //                 "remainingSize": 31421,
        //                 "side": "sell",
        //                 "size": 31431,
        //                 "status": "open",
        //                 "type": "limit",
        //                 "reduceOnly": false,
        //                 "ioc": false,
        //                 "postOnly": false,
        //                 "clientId": null
        //             }
        //         ]
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_array());
        return Ftx::parse_orders(self, result.clone(), market.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    /// Returns a list of [order structures](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Fetches information on multiple orders made by the user
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - unified market symbol of the market orders were made in
    /// * `since` {int|undefined} - the earliest time in ms to fetch orders for
    /// * `limit` {int|undefined} - the maximum number of  orde structures to retrieve
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_orders(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::new_object();
        let (mut market, mut market_id) = shift_2(Ftx::get_market_params(self, symbol.clone(), Value::from("market"), params.clone()));
        if market_id.clone().is_nonnullish() {
            request.set("market".into(), market_id.clone());
        };
        if limit.clone().is_nonnullish() {
            request.set("limit".into(), limit.clone());
        };
        // default 100, max 100
        if since.clone().is_nonnullish() {
            request.set("start_time".into(), parse_int(since.clone() / Value::from(1000)));
        };
        // support for canceling conditional orders
        // https://github.com/ccxt/ccxt/issues/6669
        let mut options: Value = self.safe_value(self.get("options".into()), Value::from("fetchOrders"), Value::new_object());
        let mut default_method: Value = self.safe_string(options.clone(), Value::from("method"), Value::from("privateGetOrdersHistory"));
        let mut method: Value = self.safe_string(params.clone(), Value::from("method"), default_method.clone());
        let mut r#type: Value = self.safe_value(params.clone(), Value::from("type"), Value::Undefined);
        if r#type.clone() == Value::from("stop") || r#type.clone() == Value::from("trailingStop") || r#type.clone() == Value::from("takeProfit") {
            method = Value::from("privateGetConditionalOrdersHistory");
        };
        let mut query: Value = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("method").into(), Value::from("type").into()])));
        let mut response: Value = Ftx::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        //
        //     {
        //         "success": true,
        //         "result": [
        //             {
        //                 "createdAt": "2019-03-05T09:56:55.728933+00:00",
        //                 "filledSize": 10,
        //                 "future": "XRP-PERP",
        //                 "id": 9596912,
        //                 "market": "XRP-PERP",
        //                 "price": 0.306525,
        //                 "avgFillPrice": 0.306526,
        //                 "remainingSize": 31421,
        //                 "side": "sell",
        //                 "size": 31431,
        //                 "status": "open",
        //                 "type": "limit",
        //                 "reduceOnly": false,
        //                 "ioc": false,
        //                 "postOnly": false,
        //                 "clientId": null
        //             }
        //         ]
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_array());
        return Ftx::parse_orders(self, result.clone(), market.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    /// Returns a list of [trade structures](https://docs.ccxt.com/en/latest/manual.html#trade-structure)
    ///
    /// Fetch all the trades made from a single order
    ///
    /// # Arguments
    ///
    /// * `id` {string} - order id
    /// * `symbol` {string|undefined} - unified market symbol
    /// * `since` {int|undefined} - the earliest time in ms to fetch trades for
    /// * `limit` {int|undefined} - the maximum number of trades to retrieve
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_order_trades(&mut self, mut id: Value, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "orderId": id
        }))).unwrap());
        return Ftx::fetch_my_trades(self, symbol.clone(), since.clone(), limit.clone(), extend_2(request.clone(), params.clone())).await;
    }

    /// Returns a list of [trade structures](https://docs.ccxt.com/en/latest/manual.html#trade-structure)
    ///
    /// Fetch trades specific to you account
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - unified market symbol
    /// * `since` {int|undefined} - the earliest time in ms to fetch trades for
    /// * `limit` {int|undefined} - the maximum number of trades structures to retrieve
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    /// * `params.until` {int|undefined} - timestamp in ms of the latest trade
    async fn fetch_my_trades(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let (mut market, mut market_id) = shift_2(Ftx::get_market_params(self, symbol.clone(), Value::from("market"), params.clone()));
        let mut request: Value = Value::new_object();
        if market_id.clone().is_nonnullish() {
            request.set("market".into(), market_id.clone());
        };
        if market.clone().is_nonnullish() {
            symbol = market.get(Value::from("symbol"));
        };
        let mut until: Value = self.safe_integer_2(params.clone(), Value::from("until"), Value::from("till"), Value::Undefined);
        if since.clone().is_nonnullish() {
            request.set("start_time".into(), parse_int(since.clone() / Value::from(1000)));
            request.set("end_time".into(), self.seconds());
        };
        if until.clone().is_nonnullish() {
            request.set("end_time".into(), parse_int(until.clone() / Value::from(1000)));
            params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("until").into(), Value::from("till").into()])));
        };
        if limit.clone().is_nonnullish() {
            request.set("limit".into(), limit.clone());
        };
        let mut response: Value = Ftx::dispatch(self, "privateGetFills".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "success": true,
        //         "result": [
        //             {
        //                 "fee": 20.1374935,
        //                 "feeRate": 0.0005,
        //                 "future": "EOS-0329",
        //                 "id": 11215,
        //                 "liquidity": "taker",
        //                 "market": "EOS-0329",
        //                 "baseCurrency": null,
        //                 "quoteCurrency": null,
        //                 "orderId": 8436981,
        //                 "price": 4.201,
        //                 "side": "buy",
        //                 "size": 9587,
        //                 "time": "2019-03-27T19:15:10.204619+00:00",
        //                 "type": "order"
        //             }
        //         ]
        //     }
        //
        let mut trades: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_array());
        return Ftx::parse_trades(self, trades.clone(), market.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    /// Returns a [transfer structure](https://docs.ccxt.com/en/latest/manual.html#transfer-structure)
    ///
    /// Transfer currency internally between wallets on the same account
    ///
    /// # Arguments
    ///
    /// * `code` {string} - unified currency code
    /// * `amount` {float} - amount to transfer
    /// * `fromAccount` {string} - account to transfer from
    /// * `toAccount` {string} - account to transfer to
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn transfer(&mut self, mut code: Value, mut amount: Value, mut from_account: Value, mut to_account: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut currency: Value = Ftx::currency(self, code.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "coin": currency.get(Value::from("id")),
            "source": from_account,
            "destination": to_account,
            "size": amount
        }))).unwrap());
        let mut response: Value = Ftx::dispatch(self, "privatePostSubaccountsTransfer".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         success: true,
        //         result: {
        //             id: '31222278',
        //             coin: 'USDT',
        //             size: '1.0',
        //             time: '2022-04-01T11:18:27.194188+00:00',
        //             notes: 'Transfer from main account to testSubaccount',
        //             status: 'complete'
        //         }
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        return Ftx::parse_transfer(self, result.clone(), currency.clone());
    }

    fn parse_transfer(&self, mut transfer: Value, mut currency: Value) -> Value {
        //
        //     {
        //         id: '31222278',
        //         coin: 'USDT',
        //         size: '1.0',
        //         time: '2022-04-01T11:18:27.194188+00:00',
        //         notes: 'Transfer from main account to testSubaccount',
        //         status: 'complete'
        //     }
        //
        let mut currency_id: Value = self.safe_string(transfer.clone(), Value::from("coin"), Value::Undefined);
        let mut notes: Value = self.safe_string(transfer.clone(), Value::from("notes"), Value::from(""));
        let mut status: Value = self.safe_string(transfer.clone(), Value::from("status"), Value::Undefined);
        let mut from_to: Value = notes.replace(Value::from("Transfer from "), Value::from(""));
        let mut parts: Value = from_to.split(Value::from(" to "));
        let mut from_account: Value = self.safe_string(parts.clone(), Value::from(0), Value::Undefined);
        from_account = from_account.replace(Value::from(" account"), Value::from(""));
        let mut to_account: Value = self.safe_string(parts.clone(), Value::from(1), Value::Undefined);
        to_account = to_account.replace(Value::from(" account"), Value::from(""));
        return Value::Json(normalize(&Value::Json(json!({
            "info": transfer,
            "id": self.safe_string(transfer.clone(), Value::from("id"), Value::Undefined),
            "timestamp": Value::Undefined,
            "datetime": self.safe_string(transfer.clone(), Value::from("time"), Value::Undefined),
            "currency": Ftx::safe_currency_code(self, currency_id.clone(), currency.clone()),
            "amount": Ftx::safe_number(self, transfer.clone(), Value::from("size"), Value::Undefined),
            "fromAccount": from_account,
            "toAccount": to_account,
            "status": Ftx::parse_transfer_status(self, status.clone())
        }))).unwrap());
    }

    fn parse_transfer_status(&self, mut status: Value) -> Value {
        let mut statuses: Value = Value::Json(normalize(&Value::Json(json!({
            "complete": "ok"
        }))).unwrap());
        return self.safe_string(statuses.clone(), status.clone(), status.clone());
    }

    /// Returns a [transaction structure](https://docs.ccxt.com/en/latest/manual.html#transaction-structure)
    ///
    /// Make a withdrawal
    ///
    /// # Arguments
    ///
    /// * `code` {string} - unified currency code
    /// * `amount` {float} - the amount to withdraw
    /// * `address` {string} - the address to withdraw to
    /// * `tag` {string|undefined} - 
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn withdraw(&mut self, mut code: Value, mut amount: Value, mut address: Value, mut tag: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        (tag, params) = shift_2(Ftx::handle_withdraw_tag_and_params(self, tag.clone(), params.clone()));
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        self.check_address(address.clone());
        let mut currency: Value = Ftx::currency(self, code.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "coin": currency.get(Value::from("id")),
            "size": amount,
            "address": address
        }))).unwrap());
        // 'password': 'string', // optional withdrawal password if it is required for your account
        // 'code': '192837', // optional 2fa code if it is required for your account
        if self.get("password".into()).is_nonnullish() {
            request.set("password".into(), self.get("password".into()));
        };
        if tag.clone().is_nonnullish() {
            request.set("tag".into(), tag.clone());
        };
        let mut networks: Value = self.safe_value(self.get("options".into()), Value::from("networks"), Value::new_object());
        let mut network: Value = self.safe_string_upper(params.clone(), Value::from("network"), Value::Undefined);
        // this line allows the user to specify either ERC20 or ETH
        network = self.safe_string_lower(networks.clone(), network.clone(), network.clone());
        // handle ERC20>ETH alias
        if network.clone().is_nonnullish() {
            request.set("method".into(), network.clone());
            params = self.omit(params.clone(), Value::from("network"));
        };
        let mut response: Value = Ftx::dispatch(self, "privatePostWalletWithdrawals".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "success": true,
        //         "result": {
        //             "coin": "USDTBEAR",
        //             "address": "0x83a127952d266A6eA306c40Ac62A4a70668FE3BE",
        //             "tag": "null",
        //             "fee": 0,
        //             "id": 1,
        //             "size": "20.2",
        //             "status": "requested",
        //             "time": "2019-03-05T09:56:55.728933+00:00",
        //             "txid": "null"
        //         }
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        return Ftx::parse_transaction(self, result.clone(), currency.clone());
    }

    /// Returns a list of [position structure](https://docs.ccxt.com/en/latest/manual.html#position-structure)
    ///
    /// Fetch all open positions
    ///
    /// # Arguments
    ///
    /// * `symbols` {[string]|undefined} - list of unified market symbols
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_positions(&mut self, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "showAvgPrice": true
        }))).unwrap());
        let mut response: Value = Ftx::dispatch(self, "privateGetPositions".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "success": true,
        //         "result": [
        //             {
        //                 "cost": -31.7906,
        //                 "entryPrice": 138.22,
        //                 "estimatedLiquidationPrice": 152.1,
        //                 "future": "ETH-PERP",
        //                 "initialMarginRequirement": 0.1,
        //                 "longOrderSize": 1744.55,
        //                 "maintenanceMarginRequirement": 0.04,
        //                 "netSize": -0.23,
        //                 "openSize": 1744.32,
        //                 "realizedPnl": 3.39441714,
        //                 "shortOrderSize": 1732.09,
        //                 "recentAverageOpenPrice": 278.98,
        //                 "recentPnl": 2.44,
        //                 "recentBreakEvenPrice": 278.98,
        //                 "side": "sell",
        //                 "size": 0.23,
        //                 "unrealizedPnl": 0,
        //                 "collateralUsed": 3.17906
        //             }
        //         ]
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_array());
        return Ftx::parse_positions(self, result.clone(), symbols.clone(), Value::Undefined);
    }

    fn parse_position(&self, mut position: Value, mut market: Value) -> Value {
        //
        //   {
        //     "future": "XMR-PERP",
        //     "size": "0.0",
        //     "side": "buy",
        //     "netSize": "0.0",
        //     "longOrderSize": "0.0",
        //     "shortOrderSize": "0.0",
        //     "cost": "0.0",
        //     "entryPrice": null,
        //     "unrealizedPnl": "0.0",
        //     "realizedPnl": "0.0",
        //     "initialMarginRequirement": "0.02",
        //     "maintenanceMarginRequirement": "0.006",
        //     "openSize": "0.0",
        //     "collateralUsed": "0.0",
        //     "estimatedLiquidationPrice": null
        //   }
        //
        let mut contracts_string: Value = self.safe_string(position.clone(), Value::from("size"), Value::Undefined);
        let mut raw_side: Value = self.safe_string(position.clone(), Value::from("side"), Value::Undefined);
        let mut side: Value = if raw_side.clone() == Value::from("buy") { Value::from("long") } else { Value::from("short") };
        let mut market_id: Value = self.safe_string(position.clone(), Value::from("future"), Value::Undefined);
        let mut symbol: Value = Ftx::safe_symbol(self, market_id.clone(), market.clone(), Value::Undefined);
        let mut liquidation_price_string: Value = self.safe_string(position.clone(), Value::from("estimatedLiquidationPrice"), Value::Undefined);
        let mut initial_margin_percentage: Value = self.safe_string(position.clone(), Value::from("initialMarginRequirement"), Value::Undefined);
        let mut leverage: Value = parse_int(Precise::string_div(Value::from("1"), initial_margin_percentage.clone(), Value::from(0)));
        // on ftx the entryPrice is actually the mark price
        let mut mark_price_string: Value = self.safe_string(position.clone(), Value::from("entryPrice"), Value::Undefined);
        let mut notional_string: Value = Precise::string_mul(contracts_string.clone(), mark_price_string.clone());
        let mut initial_margin: Value = Precise::string_mul(notional_string.clone(), initial_margin_percentage.clone());
        let mut maintenance_margin_percentage_string: Value = self.safe_string(position.clone(), Value::from("maintenanceMarginRequirement"), Value::Undefined);
        let mut maintenance_margin_string: Value = Precise::string_mul(notional_string.clone(), maintenance_margin_percentage_string.clone());
        let mut unrealized_pnl_string: Value = self.safe_string(position.clone(), Value::from("unrealizedPnl"), Value::Undefined);
        let mut percentage: Value = self.parse_number(Precise::string_mul(Precise::string_div(unrealized_pnl_string.clone(), initial_margin.clone(), Value::from(4)), Value::from("100")), Value::Undefined);
        let mut entry_price_string: Value = self.safe_string(position.clone(), Value::from("recentAverageOpenPrice"), Value::Undefined);
        let mut difference: Value = Value::Undefined;
        let mut collateral: Value = Value::Undefined;
        let mut margin_ratio: Value = Value::Undefined;
        if entry_price_string.clone().is_nonnullish() && Precise::string_gt(liquidation_price_string.clone(), Value::from("0")) {
            // collateral = maintenanceMargin ± ((markPrice - liquidationPrice) * size)
            if side.clone() == Value::from("long") {
                difference = Precise::string_sub(mark_price_string.clone(), liquidation_price_string.clone());
            } else {
                difference = Precise::string_sub(liquidation_price_string.clone(), mark_price_string.clone());
            };
            let mut loss: Value = Precise::string_mul(difference.clone(), contracts_string.clone());
            collateral = Precise::string_add(loss.clone(), maintenance_margin_string.clone());
            margin_ratio = self.parse_number(Precise::string_div(maintenance_margin_string.clone(), collateral.clone(), Value::from(4)), Value::Undefined);
        };
        // ftx has a weird definition of realizedPnl
        // it keeps the historical record of the realizedPnl per contract forever
        // so we cannot use this data
        return Value::Json(normalize(&Value::Json(json!({
            "info": position,
            "symbol": symbol,
            "timestamp": Value::Undefined,
            "datetime": Value::Undefined,
            "initialMargin": self.parse_number(initial_margin.clone(), Value::Undefined),
            "initialMarginPercentage": self.parse_number(initial_margin_percentage.clone(), Value::Undefined),
            "maintenanceMargin": self.parse_number(maintenance_margin_string.clone(), Value::Undefined),
            "maintenanceMarginPercentage": self.parse_number(maintenance_margin_percentage_string.clone(), Value::Undefined),
            "entryPrice": self.parse_number(entry_price_string.clone(), Value::Undefined),
            "notional": self.parse_number(notional_string.clone(), Value::Undefined),
            "leverage": leverage,
            "unrealizedPnl": self.parse_number(unrealized_pnl_string.clone(), Value::Undefined),
            "contracts": self.parse_number(contracts_string.clone(), Value::Undefined),
            "contractSize": self.safe_value(market.clone(), Value::from("contractSize"), Value::Undefined),
            "marginRatio": margin_ratio,
            "liquidationPrice": self.parse_number(liquidation_price_string.clone(), Value::Undefined),
            "markPrice": self.parse_number(mark_price_string.clone(), Value::Undefined),
            "collateral": self.parse_number(collateral.clone(), Value::Undefined),
            "marginMode": "cross",
            "side": side,
            "percentage": percentage
        }))).unwrap());
    }

    /// Returns an [address structure](https://docs.ccxt.com/en/latest/manual.html#address-structure)
    ///
    /// Fetch the deposit address for a currency associated with this account
    ///
    /// # Arguments
    ///
    /// * `code` {string} - unified currency code
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_deposit_address(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut currency: Value = Ftx::currency(self, code.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "coin": currency.get(Value::from("id"))
        }))).unwrap());
        let mut networks: Value = self.safe_value(self.get("options".into()), Value::from("networks"), Value::new_object());
        let mut network: Value = self.safe_string_upper(params.clone(), Value::from("network"), Value::Undefined);
        // this line allows the user to specify either ERC20 or ETH
        network = self.safe_string_lower(networks.clone(), network.clone(), network.clone());
        // handle ERC20>ETH alias
        if network.clone().is_nonnullish() {
            request.set("method".into(), network.clone());
            params = self.omit(params.clone(), Value::from("network"));
        };
        let mut response: Value = Ftx::dispatch(self, "privateGetWalletDepositAddressCoin".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "success": true,
        //         "result": {
        //             "address": "0x83a127952d266A6eA306c40Ac62A4a70668FE3BE",
        //             "tag": null,
        //             "method": "erc20",
        //             "coin": null
        //         }
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut network_id: Value = self.safe_string(result.clone(), Value::from("method"), Value::Undefined);
        let mut address: Value = self.safe_string(result.clone(), Value::from("address"), Value::Undefined);
        self.check_address(address.clone());
        return Value::Json(normalize(&Value::Json(json!({
            "currency": code,
            "address": address,
            "tag": self.safe_string(result.clone(), Value::from("tag"), Value::Undefined),
            "network": Ftx::safe_network(self, network_id.clone()),
            "info": response
        }))).unwrap());
    }

    fn safe_network(&self, mut network_id: Value) -> Value {
        let mut networks_by_id: Value = Value::Json(normalize(&Value::Json(json!({
            "trx": "TRC20",
            "erc20": "ERC20",
            "sol": "SOL",
            "bsc": "BEP20",
            "bep2": "BEP2"
        }))).unwrap());
        return self.safe_string(networks_by_id.clone(), network_id.clone(), network_id.clone());
    }

    fn parse_transaction_status(&self, mut status: Value) -> Value {
        let mut statuses: Value = Value::Json(normalize(&Value::Json(json!({
            "confirmed": "ok",
            "complete": "ok",
            "cancelled": "canceled"
        }))).unwrap());
        // what are other statuses here?
        // deposits
        // withdrawals
        // deposits
        return self.safe_string(statuses.clone(), status.clone(), status.clone());
    }

    fn parse_transaction(&self, mut transaction: Value, mut currency: Value) -> Value {
        //
        // fetchDeposits
        //
        //     airdrop
        //
        //     {
        //         "id": 9147072,
        //         "coin": "SRM_LOCKED",
        //         "size": 3.12,
        //         "time": "2021-04-27T23:59:03.565983+00:00",
        //         "notes": "SRM Airdrop for FTT holdings",
        //         "status": "complete"
        //     }
        //
        //     regular deposits
        //
        //     {
        //         "coin": "TUSD",
        //         "confirmations": 64,
        //         "confirmedTime": "2019-03-05T09:56:55.728933+00:00",
        //         "fee": 0,
        //         "id": 1,
        //         "sentTime": "2019-03-05T09:56:55.735929+00:00",
        //         "size": "99.0",
        //         "status": "confirmed",
        //         "time": "2019-03-05T09:56:55.728933+00:00",
        //         "txid": "0x8078356ae4b06a036d64747546c274af19581f1c78c510b60505798a7ffcaf1"
        //     }
        //
        // fetchWithdrawals
        //
        //     {
        //         "coin": "TUSD",
        //         "address": "0x83a127952d266A6eA306c40Ac62A4a70668FE3BE",
        //         "tag": "null",
        //         "fee": 0,
        //         "id": 1,
        //         "size": "99.0",
        //         "status": "complete",
        //         "time": "2019-03-05T09:56:55.728933+00:00",
        //         "txid": "0x8078356ae4b06a036d64747546c274af19581f1c78c510b60505798a7ffcaf1"
        //     }
        //
        //     {
        //         "coin": 'BTC',
        //         "id": 1969806,
        //         "notes": 'Transfer to Dd6gi7m2Eg4zzBbPAxuwfEaHs6tYvyUX5hbPpsTcNPXo',
        //         "size": 0.003,
        //         "status": 'complete',
        //         "time": '2021-02-03T20:28:54.918146+00:00'
        //     }
        //
        let mut code: Value = Ftx::safe_currency_code(self, self.safe_string(transaction.clone(), Value::from("coin"), Value::Undefined), Value::Undefined);
        let mut id: Value = self.safe_string(transaction.clone(), Value::from("id"), Value::Undefined);
        let mut amount: Value = Ftx::safe_number(self, transaction.clone(), Value::from("size"), Value::Undefined);
        let mut status: Value = Ftx::parse_transaction_status(self, self.safe_string(transaction.clone(), Value::from("status"), Value::Undefined));
        let mut timestamp: Value = self.parse8601(self.safe_string(transaction.clone(), Value::from("time"), Value::Undefined));
        let mut txid: Value = self.safe_string(transaction.clone(), Value::from("txid"), Value::Undefined);
        let mut tag: Value = Value::Undefined;
        let mut address: Value = self.safe_value(transaction.clone(), Value::from("address"), Value::Undefined);
        if address.typeof_() != Value::from("string") {
            tag = self.safe_string(address.clone(), Value::from("tag"), Value::Undefined);
            address = self.safe_string(address.clone(), Value::from("address"), Value::Undefined);
        } else {
            tag = self.safe_string(transaction.clone(), Value::from("tag"), Value::Undefined);
        };
        if address.clone().is_nullish() {
            // parse address from internal transfer
            let mut notes: Value = self.safe_string(transaction.clone(), Value::from("notes"), Value::Undefined);
            if notes.clone().is_nonnullish() && notes.index_of(Value::from("Transfer to")) >= Value::from(0) {
                address = notes.slice(Value::from(12));
            };
        };
        let mut fee: Value = Ftx::safe_number(self, transaction.clone(), Value::from("fee"), Value::Undefined);
        return Value::Json(normalize(&Value::Json(json!({
            "info": transaction,
            "id": id,
            "txid": txid,
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "network": Value::Undefined,
            "addressFrom": Value::Undefined,
            "address": address,
            "addressTo": address,
            "tagFrom": Value::Undefined,
            "tag": tag,
            "tagTo": tag,
            "type": Value::Undefined,
            "amount": amount,
            "currency": code,
            "status": status,
            "updated": Value::Undefined,
            "fee": Value::Json(normalize(&Value::Json(json!({
                "currency": code,
                "cost": fee,
                "rate": Value::Undefined
            }))).unwrap())
        }))).unwrap());
    }

    /// Returns a list of [transaction structures](https://docs.ccxt.com/en/latest/manual.html#transaction-structure)
    ///
    /// Fetch all deposits made to an account
    ///
    /// # Arguments
    ///
    /// * `code` {string|undefined} - unified currency code
    /// * `since` {int|undefined} - the earliest time in ms to fetch deposits for
    /// * `limit` {int|undefined} - the maximum number of deposits structures to retrieve
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_deposits(&mut self, mut code: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut response: Value = Ftx::dispatch(self, "privateGetWalletDeposits".into(), params.clone(), Value::Undefined).await;
        //
        //     {
        //         "success": true,
        //         "result": {
        //             "coin": "TUSD",
        //             "confirmations": 64,
        //             "confirmedTime": "2019-03-05T09:56:55.728933+00:00",
        //             "fee": 0,
        //             "id": 1,
        //             "sentTime": "2019-03-05T09:56:55.735929+00:00",
        //             "size": "99.0",
        //             "status": "confirmed",
        //             "time": "2019-03-05T09:56:55.728933+00:00",
        //             "txid": "0x8078356ae4b06a036d64747546c274af19581f1c78c510b60505798a7ffcaf1"
        //         }
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_array());
        let mut currency: Value = Value::Undefined;
        if code.clone().is_nonnullish() {
            currency = Ftx::currency(self, code.clone());
        };
        return Ftx::parse_transactions(self, result.clone(), currency.clone(), since.clone(), limit.clone(), Value::Json(normalize(&Value::Json(json!({
            "type": "deposit"
        }))).unwrap()));
    }

    /// Returns a list of [transaction structures](https://docs.ccxt.com/en/latest/manual.html#transaction-structure)
    ///
    /// Fetch all withdrawals made from an account
    ///
    /// # Arguments
    ///
    /// * `code` {string|undefined} - unified currency code
    /// * `since` {int|undefined} - the earliest time in ms to fetch withdrawals for
    /// * `limit` {int|undefined} - the maximum number of withdrawals structures to retrieve
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_withdrawals(&mut self, mut code: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut response: Value = Ftx::dispatch(self, "privateGetWalletWithdrawals".into(), params.clone(), Value::Undefined).await;
        //
        //     {
        //         "success": true,
        //         "result": {
        //             "coin": "TUSD",
        //             "address": "0x83a127952d266A6eA306c40Ac62A4a70668FE3BE",
        //             "tag": "null",
        //             "fee": 0,
        //             "id": 1,
        //             "size": "99.0",
        //             "status": "complete",
        //             "time": "2019-03-05T09:56:55.728933+00:00",
        //             "txid": "0x8078356ae4b06a036d64747546c274af19581f1c78c510b60505798a7ffcaf1"
        //         }
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_array());
        let mut currency: Value = Value::Undefined;
        if code.clone().is_nonnullish() {
            currency = Ftx::currency(self, code.clone());
        };
        return Ftx::parse_transactions(self, result.clone(), currency.clone(), since.clone(), limit.clone(), Value::Json(normalize(&Value::Json(json!({
            "type": "withdrawal"
        }))).unwrap()));
    }

    fn sign(&mut self, mut path: Value, mut api: Value, mut method: Value, mut params: Value, mut headers: Value, mut body: Value) -> Value {
        api = api.or_default(Value::from("public"));
        method = method.or_default(Value::from("GET"));
        params = params.or_default(Value::new_object());
        let mut request: Value = Value::from("/api/") + self.implode_params(path.clone(), params.clone());
        let mut sign_options: Value = self.safe_value(self.get("options".into()), Value::from("sign"), Value::new_object());
        let mut header_prefix: Value = self.safe_string(sign_options.clone(), self.get("hostname".into()), Value::from("FTX"));
        let mut subaccount_field: Value = header_prefix.clone() + Value::from("-SUBACCOUNT");
        let mut chosen_subaccount: Value = self.safe_string_2(params.clone(), subaccount_field.clone(), Value::from("subaccount"), Value::Undefined);
        if chosen_subaccount.clone().is_nonnullish() {
            params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![subaccount_field.clone().into(), Value::from("subaccount").into()])));
        };
        let mut query: Value = self.omit(params.clone(), self.extract_params(path.clone()));
        let mut base_url: Value = Ftx::implode_hostname(self, self.get("urls".into()).get(Value::from("api")).get(api.clone()));
        let mut url: Value = base_url.clone() + request.clone();
        if method.clone() != Value::from("POST") {
            if Object::keys(query.clone()).len() > 0 {
                let mut suffix: Value = Value::from("?") + self.urlencode(query.clone());
                url = url +  suffix.clone();
                request = request +  suffix.clone();
            };
        };
        if api.clone() == Value::from("private") {
            Ftx::check_required_credentials(self, Value::Undefined);
            let mut timestamp: Value = self.milliseconds().to_string();
            let mut auth: Value = timestamp.clone() + method.clone() + request.clone();
            headers = Value::new_object();
            if method.clone() == Value::from("POST") || method.clone() == Value::from("DELETE") {
                body = self.json(query.clone(), Value::Undefined);
                auth = auth +  body.clone();
                headers.set("Content-Type".into(), Value::from("application/json"));
            };
            let mut signature: Value = self.hmac(self.encode(auth.clone()), self.encode(self.get("secret".into())), Value::from("sha256"), Value::Undefined);
            headers.set(header_prefix.clone() + Value::from("-KEY"), self.get("apiKey".into()));
            headers.set(header_prefix.clone() + Value::from("-TS"), timestamp.clone());
            headers.set(header_prefix.clone() + Value::from("-SIGN"), signature.clone());
            if chosen_subaccount.clone().is_nonnullish() {
                headers.set(subaccount_field.clone(), chosen_subaccount.clone());
            };
        };
        return Value::Json(normalize(&Value::Json(json!({
            "url": url,
            "method": method,
            "body": body,
            "headers": headers
        }))).unwrap());
    }

    fn handle_errors(&mut self, mut code: Value, mut reason: Value, mut url: Value, mut method: Value, mut headers: Value, mut body: Value, mut response: Value, mut request_headers: Value, mut request_body: Value) -> Value {
        if response.clone().is_nullish() {
            return Value::Undefined;
        };
        // fallback to the default error handler
        //
        //     {"error":"Invalid parameter start_time","success":false}
        //     {"error":"Not enough balances","success":false}
        //
        let mut success: Value = self.safe_value(response.clone(), Value::from("success"), Value::Undefined);
        if !success.is_truthy() {
            let mut feedback: Value = self.get("id".into()) + Value::from(" ") + body.clone();
            let mut error: Value = self.safe_string(response.clone(), Value::from("error"), Value::Undefined);
            Ftx::throw_exactly_matched_exception(self, self.get("exceptions".into()).get(Value::from("exact")), error.clone(), feedback.clone());
            Ftx::throw_broadly_matched_exception(self, self.get("exceptions".into()).get(Value::from("broad")), error.clone(), feedback.clone());
            panic!(r###"ExchangeError::new(feedback)"###);
        };
        Value::Undefined
    }

    /// Returns response from the exchange
    ///
    /// Set the level of leverage for a market
    ///
    /// # Arguments
    ///
    /// * `leverage` {float} - the rate of leverage
    /// * `symbol` {string|undefined} - not used by ftx setLeverage ()
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn set_leverage(&mut self, mut leverage: Value, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS
        // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS
        if leverage.clone() < Value::from(1) || leverage.clone() > Value::from(20) {
            panic!(r###"BadRequest::new(self.get("id".into()) + Value::from(" setLeverage () leverage should be between 1 and 20"))"###);
        };
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "leverage": leverage
        }))).unwrap());
        return Ftx::dispatch(self, "privatePostAccountLeverage".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
    }

    fn parse_income(&self, mut income: Value, mut market: Value) -> Value {
        //
        //   {
        //       "future": "ETH-PERP",
        //        "id": 33830,
        //        "payment": 0.0441342,
        //        "time": "2019-05-15T18:00:00+00:00",
        //        "rate": 0.0001
        //   }
        //
        let mut market_id: Value = self.safe_string(income.clone(), Value::from("future"), Value::Undefined);
        let mut symbol: Value = Ftx::safe_symbol(self, market_id.clone(), market.clone(), Value::Undefined);
        let mut amount: Value = Ftx::safe_number(self, income.clone(), Value::from("payment"), Value::Undefined);
        let mut code: Value = Ftx::safe_currency_code(self, Value::from("USD"), Value::Undefined);
        let mut id: Value = self.safe_string(income.clone(), Value::from("id"), Value::Undefined);
        let mut time: Value = self.safe_string(income.clone(), Value::from("time"), Value::Undefined);
        let mut timestamp: Value = self.parse8601(time.clone());
        let mut rate: Value = self.safe_number(income.clone(), Value::from("rate"), Value::Undefined);
        return Value::Json(normalize(&Value::Json(json!({
            "info": income,
            "symbol": symbol,
            "code": code,
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "id": id,
            "amount": amount,
            "rate": rate
        }))).unwrap());
    }

    fn parse_incomes(&self, mut incomes: Value, mut market: Value, mut since: Value, mut limit: Value) -> Value {
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < incomes.len() {
            let mut entry: Value = incomes.get(i.into());
            let mut parsed: Value = Ftx::parse_income(self, entry.clone(), market.clone());
            result.push(parsed.clone());
            i += 1;
        };
        let mut sorted: Value = self.sort_by(result.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        return self.filter_by_since_limit(sorted.clone(), since.clone(), limit.clone(), Value::from("timestamp"), Value::Undefined);
    }

    /// Returns a [funding history structure](https://docs.ccxt.com/en/latest/manual.html#funding-history-structure)
    ///
    /// Fetch the history of funding payments paid and received on this account
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - unified market symbol
    /// * `since` {int|undefined} - the earliest time in ms to fetch funding history for
    /// * `limit` {int|undefined} - the maximum number of funding history structures to retrieve
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_funding_history(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::new_object();
        let mut market: Value = Value::Undefined;
        if symbol.clone().is_nonnullish() {
            market = Ftx::market(self, symbol.clone());
            request.set("future".into(), market.get(Value::from("id")));
        };
        if since.clone().is_nonnullish() {
            request.set("start_time".into(), parse_int(since.clone() / Value::from(1000)));
            request.set("end_time".into(), self.seconds());
        };
        let mut till: Value = self.safe_integer(params.clone(), Value::from("till"), Value::Undefined);
        if till.clone().is_nonnullish() {
            request.set("end_time".into(), parse_int(till.clone() / Value::from(1000)));
            params = self.omit(params.clone(), Value::from("till"));
        };
        let mut response: Value = Ftx::dispatch(self, "privateGetFundingPayments".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_array());
        return Ftx::parse_incomes(self, result.clone(), market.clone(), since.clone(), limit.clone());
    }

    fn parse_funding_rate(&self, mut contract: Value, mut market: Value) -> Value {
        //
        // perp
        //     {
        //       "volume": "71294.7636",
        //       "nextFundingRate": "0.000033",
        //       "nextFundingTime": "2021-10-14T20:00:00+00:00",
        //       "openInterest": "47142.994"
        //     }
        //
        // delivery
        //     {
        //       "volume": "4998.727",
        //       "predictedExpirationPrice": "3798.820141757",
        //       "openInterest": "48307.96"
        //     }
        //
        let mut funding_rate_datetime_raw: Value = self.safe_string(contract.clone(), Value::from("nextFundingTime"), Value::Undefined);
        let mut funding_rate_timestamp: Value = self.parse8601(funding_rate_datetime_raw.clone());
        let mut estimated_settle_price: Value = Ftx::safe_number(self, contract.clone(), Value::from("predictedExpirationPrice"), Value::Undefined);
        return Value::Json(normalize(&Value::Json(json!({
            "info": contract,
            "symbol": market.get(Value::from("symbol")),
            "markPrice": Value::Undefined,
            "indexPrice": Value::Undefined,
            "interestRate": self.parse_number(Value::from("0"), Value::Undefined),
            "estimatedSettlePrice": estimated_settle_price,
            "timestamp": Value::Undefined,
            "datetime": Value::Undefined,
            "fundingRate": Ftx::safe_number(self, contract.clone(), Value::from("nextFundingRate"), Value::Undefined),
            "fundingTimestamp": funding_rate_timestamp,
            "fundingDatetime": self.iso8601(funding_rate_timestamp.clone()),
            "nextFundingRate": Value::Undefined,
            "nextFundingTimestamp": Value::Undefined,
            "nextFundingDatetime": Value::Undefined,
            "previousFundingRate": Value::Undefined,
            "previousFundingTimestamp": Value::Undefined,
            "previousFundingDatetime": Value::Undefined
        }))).unwrap());
    }

    /// Returns a [funding rate structure](https://docs.ccxt.com/en/latest/manual.html#funding-rate-structure)
    ///
    /// Fetch the current funding rate
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified market symbol
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_funding_rate(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Ftx::market(self, symbol.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "future_name": market.get(Value::from("id"))
        }))).unwrap());
        let mut response: Value = Ftx::dispatch(self, "publicGetFuturesFutureNameStats".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //       "success": true,
        //       "result": {
        //         "volume": "71294.7636",
        //         "nextFundingRate": "0.000033",
        //         "nextFundingTime": "2021-10-14T20:00:00+00:00",
        //         "openInterest": "47142.994"
        //       }
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        return Ftx::parse_funding_rate(self, result.clone(), market.clone());
    }

    /// Returns a list of [borrow rate structures](https://docs.ccxt.com/en/latest/manual.html#borrow-rate-structure)
    ///
    /// Fetch the borrow interest rates of all currencies
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_borrow_rates(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut response: Value = Ftx::dispatch(self, "privateGetSpotMarginBorrowRates".into(), params.clone(), Value::Undefined).await;
        //
        //     {
        //         "success":true,
        //         "result":[
        //             {"coin":"1INCH","previous":4.8763e-6,"estimate":4.8048e-6},
        //             {"coin":"AAPL","previous":0.0000326469,"estimate":0.0000326469},
        //             {"coin":"AAVE","previous":1.43e-6,"estimate":1.43e-6},
        //         ]
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::Undefined);
        return Ftx::parse_borrow_rates(self, result.clone(), Value::from("coin"));
    }

    /// Returns a dictionary of [borrow rate structures](https://docs.ccxt.com/en/latest/manual.html#borrow-rate-structure) indexed by the market symbol
    ///
    /// Retrieves a history of a multiple currencies borrow interest rate at specific time slots, returns all currencies if no symbols passed, default is undefined
    ///
    /// # Arguments
    ///
    /// * `codes` {[string]|undefined} - list of unified currency codes, default is undefined
    /// * `since` {int|undefined} - timestamp in ms of the earliest borrowRate, default is undefined
    /// * `limit` {int|undefined} - max number of borrow rate prices to return, default is undefined
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    /// * `params.till` {object} - timestamp in ms of the latest time to fetch the borrow rate
    async fn fetch_borrow_rate_histories(&mut self, mut codes: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::new_object();
        let mut num_codes: Value = Value::from(0);
        let mut end_time: Value = Ftx::safe_number_2(self, params.clone(), Value::from("till"), Value::from("end_time"), Value::Undefined);
        if codes.clone().is_nonnullish() {
            num_codes = codes.len().into();
        };
        if num_codes.clone() == Value::from(1) {
            let mut milliseconds_per5000_hours: Value = Value::from(18000000000i64);
            if limit.clone().is_nonnullish() && limit.clone() > Value::from(5000) {
                panic!(r###"BadRequest::new(self.get("id".into()) + Value::from(" fetchBorrowRateHistories () limit cannot exceed 5000 for a single currency"))"###);
            };
            if end_time.clone().is_nonnullish() && since.clone().is_nonnullish() && end_time.clone() - since.clone() > milliseconds_per5000_hours.clone() {
                panic!(r###"BadRequest::new(self.get("id".into()) + Value::from(" fetchBorrowRateHistories () requires the time range between the since time and the end time to be less than 5000 hours for a single currency"))"###);
            };
            let mut currency: Value = Ftx::currency(self, codes.get(Value::from(0)));
            request.set("coin".into(), currency.get(Value::from("id")));
        } else {
            let mut milliseconds_per2_days: Value = Value::from(172800000);
            if limit.clone().is_nonnullish() && limit.clone() > Value::from(48) {
                panic!(r###"BadRequest::new(self.get("id".into()) + Value::from(" fetchBorrowRateHistories () limit cannot exceed 48 for multiple currencies"))"###);
            };
            if end_time.clone().is_nonnullish() && since.clone().is_nonnullish() && end_time.clone() - since.clone() > milliseconds_per2_days.clone() {
                panic!(r###"BadRequest::new(self.get("id".into()) + Value::from(" fetchBorrowRateHistories () requires the time range between the since time and the end time to be less than 48 hours for multiple currencies"))"###);
            };
        };
        let mut milliseconds_per_hour: Value = Value::from(3600000);
        if since.clone().is_nonnullish() {
            request.set("start_time".into(), parse_int(since.clone() / Value::from(1000)));
            if end_time.clone().is_nullish() {
                let mut now: Value = self.milliseconds();
                let mut since_limit: Value = if limit.clone().is_nullish() { Value::from(2) } else { limit.clone() };
                end_time = self.sum(since.clone(), milliseconds_per_hour.clone() * since_limit.clone() - Value::from(1));
                end_time = Math::min(end_time.clone(), now.clone());
            };
        } else {
            if limit.clone().is_nonnullish() {
                if end_time.clone().is_nullish() {
                    end_time = self.milliseconds();
                };
                let mut start_time: Value = self.sum(end_time.clone() - milliseconds_per_hour.clone() * limit.clone(), Value::from(1000));
                request.set("start_time".into(), parse_int(start_time.clone() / Value::from(1000)));
            };
        };
        if end_time.clone().is_nonnullish() {
            request.set("end_time".into(), parse_int(end_time.clone() / Value::from(1000)));
        };
        let mut response: Value = Ftx::dispatch(self, "publicGetSpotMarginHistory".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //    {
        //        "success": true,
        //        "result": [
        //            {
        //                "coin": "PYPL",
        //                "time": "2022-01-24T13:00:00+00:00",
        //                "size": 0.00500172,
        //                "rate": 1e-6
        //            },
        //            ...
        //        ]
        //    }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::Undefined);
        return Ftx::parse_borrow_rate_histories(self, result.clone(), codes.clone(), since.clone(), limit.clone());
    }

    /// Returns an array of [borrow rate structures](https://docs.ccxt.com/en/latest/manual.html#borrow-rate-structure)
    ///
    /// Retrieves a history of a currencies borrow interest rate at specific time slots
    ///
    /// # Arguments
    ///
    /// * `code` {string} - unified currency code
    /// * `since` {int|undefined} - timestamp for the earliest borrow rate
    /// * `limit` {int|undefined} - the maximum number of [borrow rate structures](https://docs.ccxt.com/en/latest/manual.html#borrow-rate-structure) to retrieve
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    /// * `params.till` {int|undefined} - Timestamp in ms of the latest time to fetch the borrow rate
    async fn fetch_borrow_rate_history(&mut self, mut code: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut histories: Value = Ftx::fetch_borrow_rate_histories(self, Value::Json(serde_json::Value::Array(vec![code.clone().into()])), since.clone(), limit.clone(), params.clone()).await;
        let mut borrow_rate_history: Value = self.safe_value(histories.clone(), code.clone(), Value::Undefined);
        if borrow_rate_history.clone().is_nullish() {
            panic!(r###"BadRequest::new(self.get("id".into()) + Value::from(" fetchBorrowRateHistory () returned no data for ") + code.clone())"###);
        };
        return borrow_rate_history.clone();
    }

    fn parse_borrow_rate_histories(&self, mut response: Value, mut codes: Value, mut since: Value, mut limit: Value) -> Value {
        // How to calculate borrow rate
        // https://help.ftx.com/hc/en-us/articles/360053007671-Spot-Margin-Trading-Explainer
        let mut taker_fee: Value = self.get("fees".into()).get(Value::from("trading")).get(Value::from("taker")).to_string();
        let mut spot_margin_borrow_rate: Value = Precise::string_mul(Value::from("500"), taker_fee.clone());
        let mut borrow_rate_histories: Value = Value::new_object();
        let mut i: usize = 0;
        while i < response.len() {
            let mut item: Value = response.get(i.into());
            let mut code: Value = Ftx::safe_currency_code(self, self.safe_string(item.clone(), Value::from("coin"), Value::Undefined), Value::Undefined);
            if codes.clone().is_nullish() || self.in_array(code.clone(), codes.clone()).is_truthy() {
                if !borrow_rate_histories.contains_key(code.clone()) {
                    borrow_rate_histories.set(code.clone(), Value::new_array());
                };
                let mut lending_rate: Value = self.safe_string(item.clone(), Value::from("rate"), Value::Undefined);
                let mut borrow_rate: Value = Precise::string_mul(lending_rate.clone(), Precise::string_add(Value::from("1"), spot_margin_borrow_rate.clone()));
                let mut borrow_rate_structure: Value = extend_2(Ftx::parse_borrow_rate(self, item.clone(), Value::Undefined), Value::Json(normalize(&Value::Json(json!({
                    "rate": borrow_rate
                }))).unwrap()));
                borrow_rate_histories.get(code.clone()).push(borrow_rate_structure.clone());
            };
            i += 1;
        };
        let mut keys: Value = Object::keys(borrow_rate_histories.clone());
        let mut i: usize = 0;
        while i < keys.len() {
            let mut code: Value = keys.get(i.into());
            borrow_rate_histories.set(code.clone(), Ftx::filter_by_currency_since_limit(self, borrow_rate_histories.get(code.clone()), code.clone(), since.clone(), limit.clone(), Value::Undefined));
            i += 1;
        };
        return borrow_rate_histories.clone();
    }

    fn parse_borrow_rates(&self, mut response: Value, mut code_key: Value) -> Value {
        let mut result: Value = Value::new_object();
        let mut i: usize = 0;
        while i < response.len() {
            let mut item: Value = response.get(i.into());
            let mut currency: Value = self.safe_string(item.clone(), code_key.clone(), Value::Undefined);
            let mut code: Value = Ftx::safe_currency_code(self, currency.clone(), Value::Undefined);
            let mut borrow_rate: Value = Ftx::parse_borrow_rate(self, item.clone(), Value::Undefined);
            result.set(code.clone(), borrow_rate.clone());
            i += 1;
        };
        return result.clone();
    }

    fn parse_borrow_rate(&self, mut info: Value, mut currency: Value) -> Value {
        //
        //    {
        //        "coin": "1INCH",
        //        "previous": 0.0000462375,
        //        "estimate": 0.0000462375
        //    }
        //
        let mut coin: Value = self.safe_string(info.clone(), Value::from("coin"), Value::Undefined);
        let mut datetime: Value = self.safe_string(info.clone(), Value::from("time"), Value::Undefined);
        let mut timestamp: Value = self.parse8601(datetime.clone());
        return Value::Json(normalize(&Value::Json(json!({
            "currency": Ftx::safe_currency_code(self, coin.clone(), Value::Undefined),
            "rate": Ftx::safe_number(self, info.clone(), Value::from("previous"), Value::Undefined),
            "period": 3600000,
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "info": info
        }))).unwrap());
    }

    /// Returns a list of [borrow interest structures](https://docs.ccxt.com/en/latest/manual.html#borrow-interest-structure)
    ///
    /// Fetch the interest owed by the user for borrowing currency for margin trading
    ///
    /// # Arguments
    ///
    /// * `code` {string|undefined} - unified currency code
    /// * `symbol` {string|undefined} - unified market symbol when fetch interest in isolated markets
    /// * `since` {int|undefined} - the earliest time in ms to fetch borrrow interest for
    /// * `limit` {int|undefined} - the maximum number of structures to retrieve
    /// * `params` {object} - extra parameters specific to the ftx api endpoint
    async fn fetch_borrow_interest(&mut self, mut code: Value, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::new_object();
        if since.clone().is_nonnullish() {
            request.set("start_time".into(), parse_int(since.clone() / Value::from(1000)));
        };
        let mut response: Value = Ftx::dispatch(self, "privateGetSpotMarginBorrowHistory".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "success":true,
        //         "result":[
        //             {"coin":"USDT","time":"2021-12-26T01:00:00+00:00","size":4593.74214725,"rate":3.3003e-6,"cost":0.0151607272085692,"feeUsd":0.0151683341034461},
        //             {"coin":"USDT","time":"2021-12-26T00:00:00+00:00","size":4593.97110361,"rate":3.3003e-6,"cost":0.0151614828332441,"feeUsd":0.015169697173028324},
        //             {"coin":"USDT","time":"2021-12-25T23:00:00+00:00","size":4594.20005922,"rate":3.3003e-6,"cost":0.0151622384554438,"feeUsd":0.015170200298479137},
        //         ]
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::Undefined);
        let mut interest: Value = Ftx::parse_borrow_interests(self, result.clone(), Value::Undefined);
        return Ftx::filter_by_currency_since_limit(self, interest.clone(), code.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    fn parse_borrow_interest(&self, mut info: Value, mut market: Value) -> Value {
        let mut coin: Value = self.safe_string(info.clone(), Value::from("coin"), Value::Undefined);
        let mut datetime: Value = self.safe_string(info.clone(), Value::from("time"), Value::Undefined);
        return Value::Json(normalize(&Value::Json(json!({
            "account": "cross",
            "symbol": Value::Undefined,
            "marginMode": "cross",
            "currency": Ftx::safe_currency_code(self, coin.clone(), Value::Undefined),
            "interest": Ftx::safe_number(self, info.clone(), Value::from("cost"), Value::Undefined),
            "interestRate": Ftx::safe_number(self, info.clone(), Value::from("rate"), Value::Undefined),
            "amountBorrowed": Ftx::safe_number(self, info.clone(), Value::from("size"), Value::Undefined),
            "timestamp": self.parse8601(datetime.clone()),
            "datetime": datetime,
            "info": info
        }))).unwrap());
    }

    fn safe_ledger_entry(&self, mut entry: Value, mut currency: Value) -> Value {
        currency = Ftx::safe_currency(self, Value::Undefined, currency.clone());
        let mut direction: Value = self.safe_string(entry.clone(), Value::from("direction"), Value::Undefined);
        let mut before: Value = self.safe_string(entry.clone(), Value::from("before"), Value::Undefined);
        let mut after: Value = self.safe_string(entry.clone(), Value::from("after"), Value::Undefined);
        let mut amount: Value = self.safe_string(entry.clone(), Value::from("amount"), Value::Undefined);
        if amount.clone().is_nonnullish() {
            if before.clone().is_nullish() && after.clone().is_nonnullish() {
                before = Precise::string_sub(after.clone(), amount.clone());
            } else if before.clone().is_nonnullish() && after.clone().is_nullish() {
                after = Precise::string_add(before.clone(), amount.clone());
            };
        };
        if before.clone().is_nonnullish() && after.clone().is_nonnullish() {
            if direction.clone().is_nullish() {
                if Precise::string_gt(before.clone(), after.clone()) {
                    direction = Value::from("out");
                };
                if Precise::string_gt(after.clone(), before.clone()) {
                    direction = Value::from("in");
                };
            };
        };
        let mut fee: Value = self.safe_value(entry.clone(), Value::from("fee"), Value::Undefined);
        if fee.clone().is_nonnullish() {
            fee.set("cost".into(), Ftx::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
        };
        let mut timestamp: Value = self.safe_integer(entry.clone(), Value::from("timestamp"), Value::Undefined);
        return Value::Json(normalize(&Value::Json(json!({
            "id": self.safe_string(entry.clone(), Value::from("id"), Value::Undefined),
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "direction": direction,
            "account": self.safe_string(entry.clone(), Value::from("account"), Value::Undefined),
            "referenceId": self.safe_string(entry.clone(), Value::from("referenceId"), Value::Undefined),
            "referenceAccount": self.safe_string(entry.clone(), Value::from("referenceAccount"), Value::Undefined),
            "type": self.safe_string(entry.clone(), Value::from("type"), Value::Undefined),
            "currency": currency.get(Value::from("code")),
            "amount": self.parse_number(amount.clone(), Value::Undefined),
            "before": self.parse_number(before.clone(), Value::Undefined),
            "after": self.parse_number(after.clone(), Value::Undefined),
            "status": self.safe_string(entry.clone(), Value::from("status"), Value::Undefined),
            "fee": fee,
            "info": entry
        }))).unwrap());
    }

    fn set_markets(&mut self, mut markets: Value, mut currencies: Value) -> Value {
        let mut values: Value = Value::new_array();
        let mut market_values: Value = self.to_array(markets.clone());
        let mut i: usize = 0;
        while i < market_values.len() {
            let mut market: Value = self.deep_extend_4(Ftx::safe_market(self, Value::Undefined, Value::Undefined, Value::Undefined), Value::Json(normalize(&Value::Json(json!({
                "precision": self.get("precision".into()),
                "limits": self.get("limits".into())
            }))).unwrap()), self.get("fees".into()).get(Value::from("trading")), market_values.get(i.into()));
            values.push(market.clone());
            i += 1;
        };
        self.set("markets".into(), self.index_by(values.clone(), Value::from("symbol"), Value::Undefined));
        self.set("markets_by_id".into(), self.index_by(markets.clone(), Value::from("id"), Value::Undefined));
        let mut markets_sorted_by_symbol: Value = self.keysort(self.get("markets".into()), Value::Undefined);
        let mut markets_sorted_by_id: Value = self.keysort(self.get("markets_by_id".into()), Value::Undefined);
        self.set("symbols".into(), Object::keys(markets_sorted_by_symbol.clone()));
        self.set("ids".into(), Object::keys(markets_sorted_by_id.clone()));
        if currencies.clone().is_nonnullish() {
            self.set("currencies".into(), self.deep_extend_2(self.get("currencies".into()), currencies.clone()));
        } else {
            let mut base_currencies: Value = Value::new_array();
            let mut quote_currencies: Value = Value::new_array();
            let mut i: usize = 0;
            while i < values.len() {
                let mut market: Value = values.get(i.into());
                let mut default_currency_precision: Value = if self.get("precision_mode".into()) == DECIMAL_PLACES.into() { Value::from(8) } else { self.parse_number(Value::from("0.00000001"), Value::Undefined) };
                let mut market_precision: Value = self.safe_value(market.clone(), Value::from("precision"), Value::new_object());
                if market.contains_key(Value::from("base")) {
                    let mut currency_precision: Value = self.safe_value_2(market_precision.clone(), Value::from("base"), Value::from("amount"), default_currency_precision.clone());
                    let mut currency: Value = Value::Json(normalize(&Value::Json(json!({
                        "id": self.safe_string_2(market.clone(), Value::from("baseId"), Value::from("base"), Value::Undefined),
                        "numericId": self.safe_string(market.clone(), Value::from("baseNumericId"), Value::Undefined),
                        "code": self.safe_string(market.clone(), Value::from("base"), Value::Undefined),
                        "precision": currency_precision
                    }))).unwrap());
                    base_currencies.push(currency.clone());
                };
                if market.contains_key(Value::from("quote")) {
                    let mut currency_precision: Value = self.safe_value_2(market_precision.clone(), Value::from("quote"), Value::from("amount"), default_currency_precision.clone());
                    let mut currency: Value = Value::Json(normalize(&Value::Json(json!({
                        "id": self.safe_string_2(market.clone(), Value::from("quoteId"), Value::from("quote"), Value::Undefined),
                        "numericId": self.safe_string(market.clone(), Value::from("quoteNumericId"), Value::Undefined),
                        "code": self.safe_string(market.clone(), Value::from("quote"), Value::Undefined),
                        "precision": currency_precision
                    }))).unwrap());
                    quote_currencies.push(currency.clone());
                };
                i += 1;
            };
            base_currencies = self.sort_by(base_currencies.clone(), Value::from("code"), Value::Undefined, Value::Undefined);
            quote_currencies = self.sort_by(quote_currencies.clone(), Value::from("code"), Value::Undefined, Value::Undefined);
            self.set("base_currencies".into(), self.index_by(base_currencies.clone(), Value::from("code"), Value::Undefined));
            self.set("quote_currencies".into(), self.index_by(quote_currencies.clone(), Value::from("code"), Value::Undefined));
            let mut all_currencies: Value = self.array_concat(base_currencies.clone(), quote_currencies.clone());
            let mut grouped_currencies: Value = self.group_by(all_currencies.clone(), Value::from("code"), Value::Undefined);
            let mut codes: Value = Object::keys(grouped_currencies.clone());
            let mut resulting_currencies: Value = Value::new_array();
            let mut i: usize = 0;
            while i < codes.len() {
                let mut code: Value = codes.get(i.into());
                let mut grouped_currencies_code: Value = self.safe_value(grouped_currencies.clone(), code.clone(), Value::new_array());
                let mut highest_precision_currency: Value = self.safe_value(grouped_currencies_code.clone(), Value::from(0), Value::Undefined);
                let mut j: usize = 1;
                while j < grouped_currencies_code.len() {
                    let mut current_currency: Value = grouped_currencies_code.get(j.into());
                    if self.get("precision_mode".into()) == TICK_SIZE.into() {
                        highest_precision_currency = if current_currency.get(Value::from("precision")) < highest_precision_currency.get(Value::from("precision")) { current_currency.clone() } else { highest_precision_currency.clone() };
                    } else {
                        highest_precision_currency = if current_currency.get(Value::from("precision")) > highest_precision_currency.get(Value::from("precision")) { current_currency.clone() } else { highest_precision_currency.clone() };
                    };
                    j += 1;
                };
                resulting_currencies.push(highest_precision_currency.clone());
                i += 1;
            };
            let mut sorted_currencies: Value = self.sort_by(resulting_currencies.clone(), Value::from("code"), Value::Undefined, Value::Undefined);
            self.set("currencies".into(), self.deep_extend_2(self.get("currencies".into()), self.index_by(sorted_currencies.clone(), Value::from("code"), Value::Undefined)));
        };
        self.set("currencies_by_id".into(), self.index_by(self.get("currencies".into()), Value::from("id"), Value::Undefined));
        let mut currencies_sorted_by_code: Value = self.keysort(self.get("currencies".into()), Value::Undefined);
        self.set("codes".into(), Object::keys(currencies_sorted_by_code.clone()));
        return self.get("markets".into());
    }

    fn safe_balance(&self, mut balance: Value) -> Value {
        let mut balances: Value = self.omit(balance.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("info").into(), Value::from("timestamp").into(), Value::from("datetime").into(), Value::from("free").into(), Value::from("used").into(), Value::from("total").into()])));
        let mut codes: Value = Object::keys(balances.clone());
        balance.set("free".into(), Value::new_object());
        balance.set("used".into(), Value::new_object());
        balance.set("total".into(), Value::new_object());
        let mut i: usize = 0;
        while i < codes.len() {
            let mut code: Value = codes.get(i.into());
            let mut total: Value = self.safe_string(balance.get(code.clone()), Value::from("total"), Value::Undefined);
            let mut free: Value = self.safe_string(balance.get(code.clone()), Value::from("free"), Value::Undefined);
            let mut used: Value = self.safe_string(balance.get(code.clone()), Value::from("used"), Value::Undefined);
            if total.clone().is_nullish() && free.clone().is_nonnullish() && used.clone().is_nonnullish() {
                total = Precise::string_add(free.clone(), used.clone());
            };
            if free.clone().is_nullish() && total.clone().is_nonnullish() && used.clone().is_nonnullish() {
                free = Precise::string_sub(total.clone(), used.clone());
            };
            if used.clone().is_nullish() && total.clone().is_nonnullish() && free.clone().is_nonnullish() {
                used = Precise::string_sub(total.clone(), free.clone());
            };
            balance.get(code.clone()).set("free".into(), self.parse_number(free.clone(), Value::Undefined));
            balance.get(code.clone()).set("used".into(), self.parse_number(used.clone(), Value::Undefined));
            balance.get(code.clone()).set("total".into(), self.parse_number(total.clone(), Value::Undefined));
            balance.get(Value::from("free")).set(code.clone(), balance.get(code.clone()).get(Value::from("free")));
            balance.get(Value::from("used")).set(code.clone(), balance.get(code.clone()).get(Value::from("used")));
            balance.get(Value::from("total")).set(code.clone(), balance.get(code.clone()).get(Value::from("total")));
            i += 1;
        };
        return balance.clone();
    }

    fn safe_order(&mut self, mut order: Value, mut market: Value) -> Value {
        // parses numbers as strings
        // it is important pass the trades as unparsed rawTrades
        let mut amount: Value = self.omit_zero(self.safe_string(order.clone(), Value::from("amount"), Value::Undefined));
        let mut remaining: Value = self.safe_string(order.clone(), Value::from("remaining"), Value::Undefined);
        let mut filled: Value = self.safe_string(order.clone(), Value::from("filled"), Value::Undefined);
        let mut cost: Value = self.safe_string(order.clone(), Value::from("cost"), Value::Undefined);
        let mut average: Value = self.omit_zero(self.safe_string(order.clone(), Value::from("average"), Value::Undefined));
        let mut price: Value = self.omit_zero(self.safe_string(order.clone(), Value::from("price"), Value::Undefined));
        let mut last_trade_time_timestamp: Value = self.safe_integer(order.clone(), Value::from("lastTradeTimestamp"), Value::Undefined);
        let mut parse_filled: Value = (filled.clone().is_nullish()).into();
        let mut parse_cost: Value = (cost.clone().is_nullish()).into();
        let mut parse_last_trade_time_timestamp: Value = (last_trade_time_timestamp.clone().is_nullish()).into();
        let mut fee: Value = self.safe_value(order.clone(), Value::from("fee"), Value::Undefined);
        let mut parse_fee: Value = (fee.clone().is_nullish()).into();
        let mut parse_fees: Value = (self.safe_value(order.clone(), Value::from("fees"), Value::Undefined).is_nullish()).into();
        let mut should_parse_fees: Value = (parse_fee.is_truthy() || parse_fees.is_truthy()).into();
        let mut fees: Value = self.safe_value(order.clone(), Value::from("fees"), Value::new_array());
        let mut trades: Value = Value::new_array();
        if parse_filled.is_truthy() || parse_cost.is_truthy() || should_parse_fees.is_truthy() {
            let mut raw_trades: Value = self.safe_value(order.clone(), Value::from("trades"), trades.clone());
            let mut old_number: Value = self.get("number".into());
            // we parse trades as strings here!
            self.set_number_mode("String".into());
            trades = Ftx::parse_trades(self, raw_trades.clone(), market.clone(), Value::Undefined, Value::Undefined, Value::Json(normalize(&Value::Json(json!({
                "symbol": order.get(Value::from("symbol")),
                "side": order.get(Value::from("side")),
                "type": order.get(Value::from("type")),
                "order": order.get(Value::from("id"))
            }))).unwrap()));
            self.set("number".into(), old_number.clone());
            let mut trades_length: Value = Value::from(0);
            let mut is_array: Value = Array::is_array(trades.clone());
            if is_array.is_truthy() {
                trades_length = trades.len().into();
            };
            if is_array.is_truthy() && trades_length.clone() > Value::from(0) {
                // move properties that are defined in trades up into the order
                if order.get(Value::from("symbol")).is_nullish() {
                    order.set("symbol".into(), trades.get(Value::from(0)).get(Value::from("symbol")));
                };
                if order.get(Value::from("side")).is_nullish() {
                    order.set("side".into(), trades.get(Value::from(0)).get(Value::from("side")));
                };
                if order.get(Value::from("type")).is_nullish() {
                    order.set("type".into(), trades.get(Value::from(0)).get(Value::from("type")));
                };
                if order.get(Value::from("id")).is_nullish() {
                    order.set("id".into(), trades.get(Value::from(0)).get(Value::from("order")));
                };
                if parse_filled.is_truthy() {
                    filled = Value::from("0");
                };
                if parse_cost.is_truthy() {
                    cost = Value::from("0");
                };
                let mut i: usize = 0;
                while i < trades.len() {
                    let mut trade: Value = trades.get(i.into());
                    let mut trade_amount: Value = self.safe_string(trade.clone(), Value::from("amount"), Value::Undefined);
                    if parse_filled.is_truthy() && trade_amount.clone().is_nonnullish() {
                        filled = Precise::string_add(filled.clone(), trade_amount.clone());
                    };
                    let mut trade_cost: Value = self.safe_string(trade.clone(), Value::from("cost"), Value::Undefined);
                    if parse_cost.is_truthy() && trade_cost.clone().is_nonnullish() {
                        cost = Precise::string_add(cost.clone(), trade_cost.clone());
                    };
                    let mut trade_timestamp: Value = self.safe_value(trade.clone(), Value::from("timestamp"), Value::Undefined);
                    if parse_last_trade_time_timestamp.is_truthy() && trade_timestamp.clone().is_nonnullish() {
                        if last_trade_time_timestamp.clone().is_nullish() {
                            last_trade_time_timestamp = trade_timestamp.clone();
                        } else {
                            last_trade_time_timestamp = Math::max(last_trade_time_timestamp.clone(), trade_timestamp.clone());
                        };
                    };
                    if should_parse_fees.is_truthy() {
                        let mut trade_fees: Value = self.safe_value(trade.clone(), Value::from("fees"), Value::Undefined);
                        if trade_fees.clone().is_nonnullish() {
                            let mut j: usize = 0;
                            while j < trade_fees.len() {
                                let mut trade_fee: Value = trade_fees.get(j.into());
                                fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                                j += 1;
                            };
                        } else {
                            let mut trade_fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
                            if trade_fee.clone().is_nonnullish() {
                                fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                            };
                        };
                    };
                    i += 1;
                };
            };
        };
        if should_parse_fees.is_truthy() {
            let mut reduced_fees: Value = if self.get("reduce_fees".into()).is_truthy() { Ftx::reduce_fees_by_currency(self, fees.clone()) } else { fees.clone() };
            let mut reduced_length: Value = reduced_fees.len().into();
            let mut i: usize = 0;
            while i < reduced_length.clone().into() {
                reduced_fees.get(i.into()).set("cost".into(), Ftx::safe_number(self, reduced_fees.get(i.into()), Value::from("cost"), Value::Undefined));
                if reduced_fees.get(i.into()).contains_key(Value::from("rate")) {
                    reduced_fees.get(i.into()).set("rate".into(), Ftx::safe_number(self, reduced_fees.get(i.into()), Value::from("rate"), Value::Undefined));
                };
                i += 1;
            };
            if !parse_fee.is_truthy() && reduced_length.clone() == Value::from(0) {
                fee.set("cost".into(), Ftx::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
                if fee.contains_key(Value::from("rate")) {
                    fee.set("rate".into(), Ftx::safe_number(self, fee.clone(), Value::from("rate"), Value::Undefined));
                };
                reduced_fees.push(fee.clone());
            };
            order.set("fees".into(), reduced_fees.clone());
            if parse_fee.is_truthy() && reduced_length.clone() == Value::from(1) {
                order.set("fee".into(), reduced_fees.get(Value::from(0)));
            };
        };
        if amount.clone().is_nullish() {
            // ensure amount = filled + remaining
            if filled.clone().is_nonnullish() && remaining.clone().is_nonnullish() {
                amount = Precise::string_add(filled.clone(), remaining.clone());
            } else if self.safe_string(order.clone(), Value::from("status"), Value::Undefined) == Value::from("closed") {
                amount = filled.clone();
            };
        };
        if filled.clone().is_nullish() {
            if amount.clone().is_nonnullish() && remaining.clone().is_nonnullish() {
                filled = Precise::string_sub(amount.clone(), remaining.clone());
            };
        };
        if remaining.clone().is_nullish() {
            if amount.clone().is_nonnullish() && filled.clone().is_nonnullish() {
                remaining = Precise::string_sub(amount.clone(), filled.clone());
            };
        };
        // ensure that the average field is calculated correctly
        if average.clone().is_nullish() {
            if filled.clone().is_nonnullish() && cost.clone().is_nonnullish() && Precise::string_gt(filled.clone(), Value::from("0")) {
                average = Precise::string_div(cost.clone(), filled.clone(), Value::Undefined);
            };
        };
        // also ensure the cost field is calculated correctly
        let mut cost_price_exists: Value = (average.clone().is_nonnullish() || price.clone().is_nonnullish()).into();
        if parse_cost.is_truthy() && filled.clone().is_nonnullish() && cost_price_exists.is_truthy() {
            let mut multiply_price: Value = Value::Undefined;
            if average.clone().is_nullish() {
                multiply_price = price.clone();
            } else {
                multiply_price = average.clone();
            };
            // contract trading
            let mut contract_size: Value = self.safe_string(market.clone(), Value::from("contractSize"), Value::Undefined);
            if contract_size.clone().is_nonnullish() {
                let mut inverse: Value = self.safe_value(market.clone(), Value::from("inverse"), false.into());
                if inverse.is_truthy() {
                    multiply_price = Precise::string_div(Value::from("1"), multiply_price.clone(), Value::Undefined);
                };
                multiply_price = Precise::string_mul(multiply_price.clone(), contract_size.clone());
            };
            cost = Precise::string_mul(multiply_price.clone(), filled.clone());
        };
        // support for market orders
        let mut order_type: Value = self.safe_value(order.clone(), Value::from("type"), Value::Undefined);
        let mut empty_price: Value = (price.clone().is_nullish() || Precise::string_equals(price.clone(), Value::from("0"))).into();
        if empty_price.is_truthy() && order_type.clone() == Value::from("market") {
            price = average.clone();
        };
        // we have trades with string values at this point so we will mutate them
        let mut i: usize = 0;
        while i < trades.len() {
            let mut entry: Value = trades.get(i.into());
            entry.set("amount".into(), Ftx::safe_number(self, entry.clone(), Value::from("amount"), Value::Undefined));
            entry.set("price".into(), Ftx::safe_number(self, entry.clone(), Value::from("price"), Value::Undefined));
            entry.set("cost".into(), Ftx::safe_number(self, entry.clone(), Value::from("cost"), Value::Undefined));
            let mut fee: Value = self.safe_value(entry.clone(), Value::from("fee"), Value::new_object());
            fee.set("cost".into(), Ftx::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
            if fee.contains_key(Value::from("rate")) {
                fee.set("rate".into(), Ftx::safe_number(self, fee.clone(), Value::from("rate"), Value::Undefined));
            };
            entry.set("fee".into(), fee.clone());
            i += 1;
        };
        // timeInForceHandling
        let mut time_in_force: Value = self.safe_string(order.clone(), Value::from("timeInForce"), Value::Undefined);
        if time_in_force.clone().is_nullish() {
            if self.safe_string(order.clone(), Value::from("type"), Value::Undefined) == Value::from("market") {
                time_in_force = Value::from("IOC");
            };
            // allow postOnly override
            if self.safe_value(order.clone(), Value::from("postOnly"), false.into()).is_truthy() {
                time_in_force = Value::from("PO");
            };
        };
        return extend_2(order.clone(), Value::Json(normalize(&Value::Json(json!({
            "lastTradeTimestamp": last_trade_time_timestamp,
            "price": self.parse_number(price.clone(), Value::Undefined),
            "amount": self.parse_number(amount.clone(), Value::Undefined),
            "cost": self.parse_number(cost.clone(), Value::Undefined),
            "average": self.parse_number(average.clone(), Value::Undefined),
            "filled": self.parse_number(filled.clone(), Value::Undefined),
            "remaining": self.parse_number(remaining.clone(), Value::Undefined),
            "timeInForce": time_in_force,
            "trades": trades
        }))).unwrap()));
    }

    fn parse_orders(&mut self, mut orders: Value, mut market: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        //
        // the value of orders is either a dict or a list
        //
        // dict
        //
        //     {
        //         'id1': { ... },
        //         'id2': { ... },
        //         'id3': { ... },
        //         ...
        //     }
        //
        // list
        //
        //     [
        //         { 'id': 'id1', ... },
        //         { 'id': 'id2', ... },
        //         { 'id': 'id3', ... },
        //         ...
        //     ]
        //
        let mut results: Value = Value::new_array();
        if Array::is_array(orders.clone()).is_truthy() {
            let mut i: usize = 0;
            while i < orders.len() {
                let mut order: Value = extend_2(Ftx::parse_order(self, orders.get(i.into()), market.clone()), params.clone());
                results.push(order.clone());
                i += 1;
            };
        } else {
            let mut ids: Value = Object::keys(orders.clone());
            let mut i: usize = 0;
            while i < ids.len() {
                let mut id: Value = ids.get(i.into());
                let mut order: Value = extend_2(Ftx::parse_order(self, extend_2(Value::Json(normalize(&Value::Json(json!({
                    "id": id
                }))).unwrap()), orders.get(id.clone())), market.clone()), params.clone());
                results.push(order.clone());
                i += 1;
            };
        };
        results = self.sort_by(results.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut symbol: Value = if market.clone().is_nonnullish() { market.get(Value::from("symbol")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Ftx::filter_by_symbol_since_limit(self, results.clone(), symbol.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn calculate_fee(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut taker_or_maker: Value, mut params: Value) -> Value {
        taker_or_maker = taker_or_maker.or_default(Value::from("taker"));
        params = params.or_default(Value::new_object());
        let mut market: Value = self.get("markets".into()).get(symbol.clone());
        let mut fee_side: Value = self.safe_string(market.clone(), Value::from("feeSide"), Value::from("quote"));
        let mut key: Value = Value::from("quote");
        let mut cost: Value = Value::Undefined;
        if fee_side.clone() == Value::from("quote") {
            // the fee is always in quote currency
            cost = amount.clone() * price.clone();
        } else if fee_side.clone() == Value::from("base") {
            // the fee is always in base currency
            cost = amount.clone();
        } else if fee_side.clone() == Value::from("get") {
            // the fee is always in the currency you get
            cost = amount.clone();
            if side.clone() == Value::from("sell") {
                cost = cost *  price.clone();
            } else {
                key = Value::from("base");
            };
        } else if fee_side.clone() == Value::from("give") {
            // the fee is always in the currency you give
            cost = amount.clone();
            if side.clone() == Value::from("buy") {
                cost = cost *  price.clone();
            } else {
                key = Value::from("base");
            };
        };
        let mut rate: Value = market.get(taker_or_maker.clone());
        if cost.clone().is_nonnullish() {
            cost = cost *  rate.clone();
        };
        return Value::Json(normalize(&Value::Json(json!({
            "type": taker_or_maker,
            "currency": market.get(key.clone()),
            "rate": rate,
            "cost": cost
        }))).unwrap());
    }

    fn safe_trade(&mut self, mut trade: Value, mut market: Value) -> Value {
        let mut amount: Value = self.safe_string(trade.clone(), Value::from("amount"), Value::Undefined);
        let mut price: Value = self.safe_string(trade.clone(), Value::from("price"), Value::Undefined);
        let mut cost: Value = self.safe_string(trade.clone(), Value::from("cost"), Value::Undefined);
        if cost.clone().is_nullish() {
            // contract trading
            let mut contract_size: Value = self.safe_string(market.clone(), Value::from("contractSize"), Value::Undefined);
            let mut multiply_price: Value = price.clone();
            if contract_size.clone().is_nonnullish() {
                let mut inverse: Value = self.safe_value(market.clone(), Value::from("inverse"), false.into());
                if inverse.is_truthy() {
                    multiply_price = Precise::string_div(Value::from("1"), price.clone(), Value::Undefined);
                };
                multiply_price = Precise::string_mul(multiply_price.clone(), contract_size.clone());
            };
            cost = Precise::string_mul(multiply_price.clone(), amount.clone());
        };
        let mut parse_fee: Value = (self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined).is_nullish()).into();
        let mut parse_fees: Value = (self.safe_value(trade.clone(), Value::from("fees"), Value::Undefined).is_nullish()).into();
        let mut should_parse_fees: Value = (parse_fee.is_truthy() || parse_fees.is_truthy()).into();
        let mut fees: Value = Value::new_array();
        if should_parse_fees.is_truthy() {
            let mut trade_fees: Value = self.safe_value(trade.clone(), Value::from("fees"), Value::Undefined);
            if trade_fees.clone().is_nonnullish() {
                let mut j: usize = 0;
                while j < trade_fees.len() {
                    let mut trade_fee: Value = trade_fees.get(j.into());
                    fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                    j += 1;
                };
            } else {
                let mut trade_fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
                if trade_fee.clone().is_nonnullish() {
                    fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                };
            };
        };
        let mut fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
        if should_parse_fees.is_truthy() {
            let mut reduced_fees: Value = if self.get("reduce_fees".into()).is_truthy() { Ftx::reduce_fees_by_currency(self, fees.clone()) } else { fees.clone() };
            let mut reduced_length: Value = reduced_fees.len().into();
            let mut i: usize = 0;
            while i < reduced_length.clone().into() {
                reduced_fees.get(i.into()).set("cost".into(), Ftx::safe_number(self, reduced_fees.get(i.into()), Value::from("cost"), Value::Undefined));
                if reduced_fees.get(i.into()).contains_key(Value::from("rate")) {
                    reduced_fees.get(i.into()).set("rate".into(), Ftx::safe_number(self, reduced_fees.get(i.into()), Value::from("rate"), Value::Undefined));
                };
                i += 1;
            };
            if !parse_fee.is_truthy() && reduced_length.clone() == Value::from(0) {
                fee.set("cost".into(), Ftx::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
                if fee.contains_key(Value::from("rate")) {
                    fee.set("rate".into(), Ftx::safe_number(self, fee.clone(), Value::from("rate"), Value::Undefined));
                };
                reduced_fees.push(fee.clone());
            };
            if parse_fees.is_truthy() {
                trade.set("fees".into(), reduced_fees.clone());
            };
            if parse_fee.is_truthy() && reduced_length.clone() == Value::from(1) {
                trade.set("fee".into(), reduced_fees.get(Value::from(0)));
            };
            let mut trade_fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
            if trade_fee.clone().is_nonnullish() {
                trade_fee.set("cost".into(), Ftx::safe_number(self, trade_fee.clone(), Value::from("cost"), Value::Undefined));
                if trade_fee.contains_key(Value::from("rate")) {
                    trade_fee.set("rate".into(), Ftx::safe_number(self, trade_fee.clone(), Value::from("rate"), Value::Undefined));
                };
                trade.set("fee".into(), trade_fee.clone());
            };
        };
        trade.set("amount".into(), self.parse_number(amount.clone(), Value::Undefined));
        trade.set("price".into(), self.parse_number(price.clone(), Value::Undefined));
        trade.set("cost".into(), self.parse_number(cost.clone(), Value::Undefined));
        return trade.clone();
    }

    fn reduce_fees_by_currency(&mut self, mut fees: Value) -> Value {
        //
        // this function takes a list of fee structures having the following format
        //
        //     string = true
        //
        //     [
        //         { 'currency': 'BTC', 'cost': '0.1' },
        //         { 'currency': 'BTC', 'cost': '0.2'  },
        //         { 'currency': 'BTC', 'cost': '0.2', 'rate': '0.00123' },
        //         { 'currency': 'BTC', 'cost': '0.4', 'rate': '0.00123' },
        //         { 'currency': 'BTC', 'cost': '0.5', 'rate': '0.00456' },
        //         { 'currency': 'USDT', 'cost': '12.3456' },
        //     ]
        //
        //     string = false
        //
        //     [
        //         { 'currency': 'BTC', 'cost': 0.1 },
        //         { 'currency': 'BTC', 'cost': 0.2 },
        //         { 'currency': 'BTC', 'cost': 0.2, 'rate': 0.00123 },
        //         { 'currency': 'BTC', 'cost': 0.4, 'rate': 0.00123 },
        //         { 'currency': 'BTC', 'cost': 0.5, 'rate': 0.00456 },
        //         { 'currency': 'USDT', 'cost': 12.3456 },
        //     ]
        //
        // and returns a reduced fee list, where fees are summed per currency and rate (if any)
        //
        //     string = true
        //
        //     [
        //         { 'currency': 'BTC', 'cost': '0.3'  },
        //         { 'currency': 'BTC', 'cost': '0.6', 'rate': '0.00123' },
        //         { 'currency': 'BTC', 'cost': '0.5', 'rate': '0.00456' },
        //         { 'currency': 'USDT', 'cost': '12.3456' },
        //     ]
        //
        //     string  = false
        //
        //     [
        //         { 'currency': 'BTC', 'cost': 0.3  },
        //         { 'currency': 'BTC', 'cost': 0.6, 'rate': 0.00123 },
        //         { 'currency': 'BTC', 'cost': 0.5, 'rate': 0.00456 },
        //         { 'currency': 'USDT', 'cost': 12.3456 },
        //     ]
        //
        let mut reduced: Value = Value::new_object();
        let mut i: usize = 0;
        while i < fees.len() {
            let mut fee: Value = fees.get(i.into());
            let mut fee_currency_code: Value = self.safe_string(fee.clone(), Value::from("currency"), Value::Undefined);
            if fee_currency_code.clone().is_nonnullish() {
                let mut rate: Value = self.safe_string(fee.clone(), Value::from("rate"), Value::Undefined);
                let mut cost: Value = self.safe_value(fee.clone(), Value::from("cost"), Value::Undefined);
                if Precise::string_eq(cost.clone(), Value::from("0")) {
                    // omit zero cost fees
                    continue;
                };
                if !reduced.contains_key(fee_currency_code.clone()) {
                    reduced.set(fee_currency_code.clone(), Value::new_object());
                };
                let mut rate_key: Value = if rate.clone().is_nullish() { Value::from("") } else { rate.clone() };
                if reduced.get(fee_currency_code.clone()).contains_key(rate_key.clone()) {
                    reduced.get(fee_currency_code.clone()).get(rate_key.clone()).set("cost".into(), Precise::string_add(reduced.get(fee_currency_code.clone()).get(rate_key.clone()).get(Value::from("cost")), cost.clone()));
                } else {
                    reduced.get(fee_currency_code.clone()).set(rate_key.clone(), Value::Json(normalize(&Value::Json(json!({
                        "currency": fee_currency_code,
                        "cost": cost
                    }))).unwrap()));
                    if rate.clone().is_nonnullish() {
                        reduced.get(fee_currency_code.clone()).get(rate_key.clone()).set("rate".into(), rate.clone());
                    };
                };
            };
            i += 1;
        };
        let mut result: Value = Value::new_array();
        let mut fee_values: Value = Object::values(reduced.clone());
        let mut i: usize = 0;
        while i < fee_values.len() {
            let mut reduced_fee_values: Value = Object::values(fee_values.get(i.into()));
            result = self.array_concat(result.clone(), reduced_fee_values.clone());
            i += 1;
        };
        return result.clone();
    }

    fn safe_ticker(&self, mut ticker: Value, mut market: Value) -> Value {
        let mut open: Value = self.safe_value(ticker.clone(), Value::from("open"), Value::Undefined);
        let mut close: Value = self.safe_value(ticker.clone(), Value::from("close"), Value::Undefined);
        let mut last: Value = self.safe_value(ticker.clone(), Value::from("last"), Value::Undefined);
        let mut change: Value = self.safe_value(ticker.clone(), Value::from("change"), Value::Undefined);
        let mut percentage: Value = self.safe_value(ticker.clone(), Value::from("percentage"), Value::Undefined);
        let mut average: Value = self.safe_value(ticker.clone(), Value::from("average"), Value::Undefined);
        let mut vwap: Value = self.safe_value(ticker.clone(), Value::from("vwap"), Value::Undefined);
        let mut base_volume: Value = self.safe_value(ticker.clone(), Value::from("baseVolume"), Value::Undefined);
        let mut quote_volume: Value = self.safe_value(ticker.clone(), Value::from("quoteVolume"), Value::Undefined);
        if vwap.clone().is_nullish() {
            vwap = Precise::string_div(quote_volume.clone(), base_volume.clone(), Value::Undefined);
        };
        if last.clone().is_nonnullish() && close.clone().is_nullish() {
            close = last.clone();
        } else if last.clone().is_nullish() && close.clone().is_nonnullish() {
            last = close.clone();
        };
        if last.clone().is_nonnullish() && open.clone().is_nonnullish() {
            if change.clone().is_nullish() {
                change = Precise::string_sub(last.clone(), open.clone());
            };
            if average.clone().is_nullish() {
                average = Precise::string_div(Precise::string_add(last.clone(), open.clone()), Value::from("2"), Value::Undefined);
            };
        };
        if percentage.clone().is_nullish() && change.clone().is_nonnullish() && open.clone().is_nonnullish() && Precise::string_gt(open.clone(), Value::from("0")) {
            percentage = Precise::string_mul(Precise::string_div(change.clone(), open.clone(), Value::Undefined), Value::from("100"));
        };
        if change.clone().is_nullish() && percentage.clone().is_nonnullish() && open.clone().is_nonnullish() {
            change = Precise::string_div(Precise::string_mul(percentage.clone(), open.clone()), Value::from("100"), Value::Undefined);
        };
        if open.clone().is_nullish() && last.clone().is_nonnullish() && change.clone().is_nonnullish() {
            open = Precise::string_sub(last.clone(), change.clone());
        };
        // timestamp and symbol operations don't belong in safeTicker
        // they should be done in the derived classes
        return extend_2(ticker.clone(), Value::Json(normalize(&Value::Json(json!({
            "bid": Ftx::safe_number(self, ticker.clone(), Value::from("bid"), Value::Undefined),
            "bidVolume": Ftx::safe_number(self, ticker.clone(), Value::from("bidVolume"), Value::Undefined),
            "ask": Ftx::safe_number(self, ticker.clone(), Value::from("ask"), Value::Undefined),
            "askVolume": Ftx::safe_number(self, ticker.clone(), Value::from("askVolume"), Value::Undefined),
            "high": Ftx::safe_number(self, ticker.clone(), Value::from("high"), Value::Undefined),
            "low": Ftx::safe_number(self, ticker.clone(), Value::from("low"), Value::Undefined),
            "open": self.parse_number(open.clone(), Value::Undefined),
            "close": self.parse_number(close.clone(), Value::Undefined),
            "last": self.parse_number(last.clone(), Value::Undefined),
            "change": self.parse_number(change.clone(), Value::Undefined),
            "percentage": self.parse_number(percentage.clone(), Value::Undefined),
            "average": self.parse_number(average.clone(), Value::Undefined),
            "vwap": self.parse_number(vwap.clone(), Value::Undefined),
            "baseVolume": self.parse_number(base_volume.clone(), Value::Undefined),
            "quoteVolume": self.parse_number(quote_volume.clone(), Value::Undefined),
            "previousClose": Ftx::safe_number(self, ticker.clone(), Value::from("previousClose"), Value::Undefined)
        }))).unwrap()));
    }

    fn convert_trading_view_to_ohlcv(&self, mut ohlcvs: Value, mut timestamp: Value, mut open: Value, mut high: Value, mut low: Value, mut close: Value, mut volume: Value, mut ms: Value) -> Value {
        timestamp = timestamp.or_default(Value::from("t"));
        open = open.or_default(Value::from("o"));
        high = high.or_default(Value::from("h"));
        low = low.or_default(Value::from("l"));
        close = close.or_default(Value::from("c"));
        volume = volume.or_default(Value::from("v"));
        ms = ms.or_default(false.into());
        let mut result: Value = Value::new_array();
        let mut timestamps: Value = self.safe_value(ohlcvs.clone(), timestamp.clone(), Value::new_array());
        let mut opens: Value = self.safe_value(ohlcvs.clone(), open.clone(), Value::new_array());
        let mut highs: Value = self.safe_value(ohlcvs.clone(), high.clone(), Value::new_array());
        let mut lows: Value = self.safe_value(ohlcvs.clone(), low.clone(), Value::new_array());
        let mut closes: Value = self.safe_value(ohlcvs.clone(), close.clone(), Value::new_array());
        let mut volumes: Value = self.safe_value(ohlcvs.clone(), volume.clone(), Value::new_array());
        let mut i: usize = 0;
        while i < timestamps.len() {
            result.push(Value::Json(serde_json::Value::Array(vec![if ms.is_truthy() { self.safe_integer(timestamps.clone(), Value::from(i), Value::Undefined) } else { self.safe_timestamp(timestamps.clone(), Value::from(i), Value::Undefined) }.into(), self.safe_value(opens.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(highs.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(lows.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(closes.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(volumes.clone(), Value::from(i), Value::Undefined).into()])));
            i += 1;
        };
        return result.clone();
    }

    fn convert_ohlcv_to_trading_view(&self, mut ohlcvs: Value, mut timestamp: Value, mut open: Value, mut high: Value, mut low: Value, mut close: Value, mut volume: Value, mut ms: Value) -> Value {
        timestamp = timestamp.or_default(Value::from("t"));
        open = open.or_default(Value::from("o"));
        high = high.or_default(Value::from("h"));
        low = low.or_default(Value::from("l"));
        close = close.or_default(Value::from("c"));
        volume = volume.or_default(Value::from("v"));
        ms = ms.or_default(false.into());
        let mut result: Value = Value::new_object();
        result.set(timestamp.clone(), Value::new_array());
        result.set(open.clone(), Value::new_array());
        result.set(high.clone(), Value::new_array());
        result.set(low.clone(), Value::new_array());
        result.set(close.clone(), Value::new_array());
        result.set(volume.clone(), Value::new_array());
        let mut i: usize = 0;
        while i < ohlcvs.len() {
            let mut ts: Value = if ms.is_truthy() { ohlcvs.get(i.into()).get(Value::from(0)) } else { parse_int(ohlcvs.get(i.into()).get(Value::from(0)) / Value::from(1000)) };
            result.get(timestamp.clone()).push(ts.clone());
            result.get(open.clone()).push(ohlcvs.get(i.into()).get(Value::from(1)));
            result.get(high.clone()).push(ohlcvs.get(i.into()).get(Value::from(2)));
            result.get(low.clone()).push(ohlcvs.get(i.into()).get(Value::from(3)));
            result.get(close.clone()).push(ohlcvs.get(i.into()).get(Value::from(4)));
            result.get(volume.clone()).push(ohlcvs.get(i.into()).get(Value::from(5)));
            i += 1;
        };
        return result.clone();
    }

    fn market_ids(&mut self, mut symbols: Value) -> Value {
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < symbols.len() {
            result.push(Ftx::market_id(self, symbols.get(i.into())));
            i += 1;
        };
        return result.clone();
    }

    fn market_symbols(&self, mut symbols: Value) -> Value {
        if symbols.clone().is_nullish() {
            return symbols.clone();
        };
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < symbols.len() {
            result.push(Ftx::symbol(self, symbols.get(i.into())));
            i += 1;
        };
        return result.clone();
    }

    fn parse_bids_asks(&self, mut bidasks: Value, mut price_key: Value, mut amount_key: Value) -> Value {
        price_key = price_key.or_default(Value::from(0));
        amount_key = amount_key.or_default(Value::from(1));
        bidasks = self.to_array(bidasks.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < bidasks.len() {
            result.push(Ftx::parse_bid_ask(self, bidasks.get(i.into()), price_key.clone(), amount_key.clone()));
            i += 1;
        };
        return result.clone();
    }

    async fn fetch_l2_order_book(&mut self, mut symbol: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut orderbook: Value = Ftx::fetch_order_book(self, symbol.clone(), limit.clone(), params.clone()).await;
        return extend_2(orderbook.clone(), Value::Json(normalize(&Value::Json(json!({
            "asks": self.sort_by(self.aggregate(orderbook.get(Value::from("asks"))), Value::from(0), Value::Undefined, Value::Undefined),
            "bids": self.sort_by(self.aggregate(orderbook.get(Value::from("bids"))), Value::from(0), true.into(), Value::Undefined)
        }))).unwrap()));
    }

    fn filter_by_symbol(&self, mut objects: Value, mut symbol: Value) -> Value {
        if symbol.clone().is_nullish() {
            return objects.clone();
        };
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < objects.len() {
            let mut object_symbol: Value = self.safe_string(objects.get(i.into()), Value::from("symbol"), Value::Undefined);
            if object_symbol.clone() == symbol.clone() {
                result.push(objects.get(i.into()));
            };
            i += 1;
        };
        return result.clone();
    }

    fn get_network(&mut self, mut network: Value, mut code: Value) -> Value {
        network = network.to_upper_case();
        let mut aliases: Value = Value::Json(normalize(&Value::Json(json!({
            "ETHEREUM": "ETH",
            "ETHER": "ETH",
            "ERC20": "ETH",
            "ETH": "ETH",
            "TRC20": "TRX",
            "TRON": "TRX",
            "TRX": "TRX",
            "BEP20": "BSC",
            "BSC": "BSC",
            "HRC20": "HT",
            "HECO": "HT",
            "SPL": "SOL",
            "SOL": "SOL",
            "TERRA": "LUNA",
            "LUNA": "LUNA",
            "POLYGON": "MATIC",
            "MATIC": "MATIC",
            "EOS": "EOS",
            "WAVES": "WAVES",
            "AVALANCHE": "AVAX",
            "AVAX": "AVAX",
            "QTUM": "QTUM",
            "CHZ": "CHZ",
            "NEO": "NEO",
            "ONT": "ONT",
            "RON": "RON"
        }))).unwrap());
        if network.clone() == code.clone() {
            return network.clone();
        } else if aliases.contains_key(network.clone()) {
            return aliases.get(network.clone());
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" network ") + network.clone() + Value::from(" is not yet supported"))"###);
        };
        Value::Undefined
    }

    fn safe_number_2(&self, mut dictionary: Value, mut key1: Value, mut key2: Value, mut d: Value) -> Value {
        let mut value: Value = self.safe_string_2(dictionary.clone(), key1.clone(), key2.clone(), Value::Undefined);
        return self.parse_number(value.clone(), d.clone());
    }

    fn parse_order_book(&self, mut orderbook: Value, mut symbol: Value, mut timestamp: Value, mut bids_key: Value, mut asks_key: Value, mut price_key: Value, mut amount_key: Value) -> Value {
        bids_key = bids_key.or_default(Value::from("bids"));
        asks_key = asks_key.or_default(Value::from("asks"));
        price_key = price_key.or_default(Value::from(0));
        amount_key = amount_key.or_default(Value::from(1));
        let mut bids: Value = Ftx::parse_bids_asks(self, self.safe_value(orderbook.clone(), bids_key.clone(), Value::new_array()), price_key.clone(), amount_key.clone());
        let mut asks: Value = Ftx::parse_bids_asks(self, self.safe_value(orderbook.clone(), asks_key.clone(), Value::new_array()), price_key.clone(), amount_key.clone());
        return Value::Json(normalize(&Value::Json(json!({
            "symbol": symbol,
            "bids": self.sort_by(bids.clone(), Value::from(0), true.into(), Value::Undefined),
            "asks": self.sort_by(asks.clone(), Value::from(0), Value::Undefined, Value::Undefined),
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "nonce": Value::Undefined
        }))).unwrap());
    }

    fn parse_ohlcvs(&self, mut ohlcvs: Value, mut market: Value, mut timeframe: Value, mut since: Value, mut limit: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        let mut results: Value = Value::new_array();
        let mut i: usize = 0;
        while i < ohlcvs.len() {
            results.push(Ftx::parse_ohlcv(self, ohlcvs.get(i.into()), market.clone()));
            i += 1;
        };
        let mut sorted: Value = self.sort_by(results.clone(), Value::from(0), Value::Undefined, Value::Undefined);
        let mut tail: Value = (since.clone().is_nullish()).into();
        return self.filter_by_since_limit(sorted.clone(), since.clone(), limit.clone(), Value::from(0), tail.clone());
    }

    fn parse_leverage_tiers(&self, mut response: Value, mut symbols: Value, mut market_id_key: Value) -> Value {
        // marketIdKey should only be undefined when response is a dictionary
        symbols = Ftx::market_symbols(self, symbols.clone());
        let mut tiers: Value = Value::new_object();
        let mut i: usize = 0;
        while i < response.len() {
            let mut item: Value = response.get(i.into());
            let mut id: Value = self.safe_string(item.clone(), market_id_key.clone(), Value::Undefined);
            let mut market: Value = Ftx::safe_market(self, id.clone(), Value::Undefined, Value::Undefined);
            let mut symbol: Value = market.get(Value::from("symbol"));
            let mut contract: Value = self.safe_value(market.clone(), Value::from("contract"), false.into());
            if contract.is_truthy() && symbols.clone().is_nullish() || self.in_array(symbol.clone(), symbols.clone()).is_truthy() {
                tiers.set(symbol.clone(), self.parse_market_leverage_tiers(item.clone(), market.clone()));
            };
            i += 1;
        };
        return tiers.clone();
    }

    async fn load_trading_limits(&mut self, mut symbols: Value, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchTradingLimits")).is_truthy() {
            if reload.is_truthy() || !self.get("options".into()).contains_key(Value::from("limitsLoaded")) {
                let mut response: Value = self.fetch_trading_limits(symbols.clone(), Value::Undefined).await;
                let mut i: usize = 0;
                while i < symbols.len() {
                    let mut symbol: Value = symbols.get(i.into());
                    self.get("markets".into()).set(symbol.clone(), self.deep_extend_2(self.get("markets".into()).get(symbol.clone()), response.get(symbol.clone())));
                    i += 1;
                };
                self.get("options".into()).set("limitsLoaded".into(), self.milliseconds());
            };
        };
        return self.get("markets".into());
    }

    fn parse_positions(&self, mut positions: Value, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        symbols = Ftx::market_symbols(self, symbols.clone());
        positions = self.to_array(positions.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < positions.len() {
            let mut position: Value = extend_2(Ftx::parse_position(self, positions.get(i.into()), Value::Undefined), params.clone());
            result.push(position.clone());
            i += 1;
        };
        return Ftx::filter_by_array(self, result.clone(), Value::from("symbol"), symbols.clone(), false.into());
    }

    fn parse_accounts(&self, mut accounts: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        accounts = self.to_array(accounts.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < accounts.len() {
            let mut account: Value = extend_2(Ftx::parse_account(self, accounts.get(i.into())), params.clone());
            result.push(account.clone());
            i += 1;
        };
        return result.clone();
    }

    fn parse_trades(&mut self, mut trades: Value, mut market: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        trades = self.to_array(trades.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < trades.len() {
            let mut trade: Value = extend_2(Ftx::parse_trade(self, trades.get(i.into()), market.clone()), params.clone());
            result.push(trade.clone());
            i += 1;
        };
        result = self.sort_by_2(result.clone(), Value::from("timestamp"), Value::from("id"), Value::Undefined, Value::Undefined);
        let mut symbol: Value = if market.clone().is_nonnullish() { market.get(Value::from("symbol")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Ftx::filter_by_symbol_since_limit(self, result.clone(), symbol.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn parse_transactions(&self, mut transactions: Value, mut currency: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        transactions = self.to_array(transactions.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < transactions.len() {
            let mut transaction: Value = extend_2(Ftx::parse_transaction(self, transactions.get(i.into()), currency.clone()), params.clone());
            result.push(transaction.clone());
            i += 1;
        };
        result = self.sort_by(result.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut code: Value = if currency.clone().is_nonnullish() { currency.get(Value::from("code")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Ftx::filter_by_currency_since_limit(self, result.clone(), code.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn parse_transfers(&self, mut transfers: Value, mut currency: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        transfers = self.to_array(transfers.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < transfers.len() {
            let mut transfer: Value = extend_2(Ftx::parse_transfer(self, transfers.get(i.into()), currency.clone()), params.clone());
            result.push(transfer.clone());
            i += 1;
        };
        result = self.sort_by(result.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut code: Value = if currency.clone().is_nonnullish() { currency.get(Value::from("code")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Ftx::filter_by_currency_since_limit(self, result.clone(), code.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn parse_ledger(&self, mut data: Value, mut currency: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut result: Value = Value::new_array();
        let mut array_data: Value = self.to_array(data.clone());
        let mut i: usize = 0;
        while i < array_data.len() {
            let mut item_or_items: Value = self.parse_ledger_entry(array_data.get(i.into()), currency.clone());
            if Array::is_array(item_or_items.clone()).is_truthy() {
                let mut j: usize = 0;
                while j < item_or_items.len() {
                    result.push(extend_2(item_or_items.get(j.into()), params.clone()));
                    j += 1;
                };
            } else {
                result.push(extend_2(item_or_items.clone(), params.clone()));
            };
            i += 1;
        };
        result = self.sort_by(result.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut code: Value = if currency.clone().is_nonnullish() { currency.get(Value::from("code")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Ftx::filter_by_currency_since_limit(self, result.clone(), code.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn nonce(&self) -> Value {
        return self.seconds();
    }

    fn set_headers(&mut self, mut headers: Value) -> Value {
        return headers.clone();
    }

    fn market_id(&mut self, mut symbol: Value) -> Value {
        let mut market: Value = Ftx::market(self, symbol.clone());
        if market.clone().is_nonnullish() {
            return market.get(Value::from("id"));
        };
        return symbol.clone();
    }

    fn symbol(&self, mut symbol: Value) -> Value {
        let mut market: Value = Ftx::market(self, symbol.clone());
        return self.safe_string(market.clone(), Value::from("symbol"), symbol.clone());
    }

    fn resolve_path(&mut self, mut path: Value, mut params: Value) -> Value {
        return Value::Json(serde_json::Value::Array(vec![self.implode_params(path.clone(), params.clone()).into(), self.omit(params.clone(), self.extract_params(path.clone())).into()]));
    }

    fn filter_by_array(&self, mut objects: Value, mut key: Value, mut values: Value, mut indexed: Value) -> Value {
        indexed = indexed.or_default(true.into());
        objects = self.to_array(objects.clone());
        // return all of them if no values were passed
        if values.clone().is_nullish() || !values.is_truthy() {
            return if indexed.is_truthy() { self.index_by(objects.clone(), key.clone(), Value::Undefined) } else { objects.clone() };
        };
        let mut results: Value = Value::new_array();
        let mut i: usize = 0;
        while i < objects.len() {
            if self.in_array(objects.get(i.into()).get(key.clone()), values.clone()).is_truthy() {
                results.push(objects.get(i.into()));
            };
            i += 1;
        };
        return if indexed.is_truthy() { self.index_by(results.clone(), key.clone(), Value::Undefined) } else { results.clone() };
    }

    async fn fetch2(&mut self, mut path: Value, mut api: Value, mut method: Value, mut params: Value, mut headers: Value, mut body: Value, mut config: Value, mut context: Value) -> Value {
        api = api.or_default(Value::from("public"));
        method = method.or_default(Value::from("GET"));
        params = params.or_default(Value::new_object());
        config = config.or_default(Value::new_object());
        context = context.or_default(Value::new_object());
        if self.get("enable_rate_limit".into()).is_truthy() {
            let mut cost: Value = Ftx::calculate_rate_limiter_cost(self, api.clone(), method.clone(), path.clone(), params.clone(), config.clone(), context.clone());
            self.throttle(cost.clone()).await;
        };
        self.set("last_rest_request_timestamp".into(), self.milliseconds());
        let mut request: Value = Ftx::sign(self, path.clone(), api.clone(), method.clone(), params.clone(), headers.clone(), body.clone());
        return self.fetch(request.get(Value::from("url")), request.get(Value::from("method")), request.get(Value::from("headers")), request.get(Value::from("body"))).await;
    }

    async fn request(&mut self, mut path: Value, mut api: Value, mut method: Value, mut params: Value, mut headers: Value, mut body: Value, mut config: Value, mut context: Value) -> Value {
        api = api.or_default(Value::from("public"));
        method = method.or_default(Value::from("GET"));
        params = params.or_default(Value::new_object());
        config = config.or_default(Value::new_object());
        context = context.or_default(Value::new_object());
        return Ftx::fetch2(self, path.clone(), api.clone(), method.clone(), params.clone(), headers.clone(), body.clone(), config.clone(), context.clone()).await;
    }

    async fn load_accounts(&mut self, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        if reload.is_truthy() {
            self.set("accounts".into(), self.fetch_accounts(params.clone()).await);
        } else {
            if self.get("accounts".into()).is_truthy() {
                return self.get("accounts".into());
            } else {
                self.set("accounts".into(), self.fetch_accounts(params.clone()).await);
            };
        };
        self.set("accounts_by_id".into(), self.index_by(self.get("accounts".into()), Value::from("id"), Value::Undefined));
        return self.get("accounts".into());
    }

    async fn fetch_ohlcvc(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("fetchTrades")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchOHLCV() is not supported yet"))"###);
        };
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut trades: Value = Ftx::fetch_trades(self, symbol.clone(), since.clone(), limit.clone(), params.clone()).await;
        return self.build_ohlcvc(trades.clone(), timeframe.clone(), since.clone(), limit.clone());
    }

    fn parse_trading_view_ohlcv(&self, mut ohlcvs: Value, mut market: Value, mut timeframe: Value, mut since: Value, mut limit: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        let mut result: Value = Ftx::convert_trading_view_to_ohlcv(self, ohlcvs.clone(), Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined);
        return Ftx::parse_ohlcvs(self, result.clone(), market.clone(), timeframe.clone(), since.clone(), limit.clone());
    }

    async fn edit_limit_buy_order(&mut self, mut id: Value, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Ftx::edit_limit_order(self, id.clone(), symbol.clone(), Value::from("buy"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn edit_limit_sell_order(&mut self, mut id: Value, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Ftx::edit_limit_order(self, id.clone(), symbol.clone(), Value::from("sell"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn edit_limit_order(&mut self, mut id: Value, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Ftx::edit_order(self, id.clone(), symbol.clone(), Value::from("limit"), side.clone(), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn fetch_permissions(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchPermissions() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_bids_asks(&mut self, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchBidsAsks() is not supported yet"))"###);
        Value::Undefined
    }

    fn parse_bid_ask(&self, mut bidask: Value, mut price_key: Value, mut amount_key: Value) -> Value {
        price_key = price_key.or_default(Value::from(0));
        amount_key = amount_key.or_default(Value::from(1));
        let mut price: Value = Ftx::safe_number(self, bidask.clone(), price_key.clone(), Value::Undefined);
        let mut amount: Value = Ftx::safe_number(self, bidask.clone(), amount_key.clone(), Value::Undefined);
        return Value::Json(serde_json::Value::Array(vec![price.clone().into(), amount.clone().into()]));
    }

    fn safe_currency(&self, mut currency_id: Value, mut currency: Value) -> Value {
        if currency_id.clone().is_nullish() && currency.clone().is_nonnullish() {
            return currency.clone();
        };
        if self.get("currencies_by_id".into()).is_nonnullish() && self.get("currencies_by_id".into()).contains_key(currency_id.clone()) {
            return self.get("currencies_by_id".into()).get(currency_id.clone());
        };
        let mut code: Value = currency_id.clone();
        if currency_id.clone().is_nonnullish() {
            code = Ftx::common_currency_code(self, currency_id.to_upper_case());
        };
        return Value::Json(normalize(&Value::Json(json!({
            "id": currency_id,
            "code": code
        }))).unwrap());
    }

    fn safe_market(&self, mut market_id: Value, mut market: Value, mut delimiter: Value) -> Value {
        let mut result: Value = Value::Json(normalize(&Value::Json(json!({
            "id": market_id,
            "symbol": market_id,
            "base": Value::Undefined,
            "quote": Value::Undefined,
            "baseId": Value::Undefined,
            "quoteId": Value::Undefined,
            "active": Value::Undefined,
            "type": Value::Undefined,
            "linear": Value::Undefined,
            "inverse": Value::Undefined,
            "spot": false,
            "swap": false,
            "future": false,
            "option": false,
            "margin": false,
            "contract": false,
            "contractSize": Value::Undefined,
            "expiry": Value::Undefined,
            "expiryDatetime": Value::Undefined,
            "optionType": Value::Undefined,
            "strike": Value::Undefined,
            "settle": Value::Undefined,
            "settleId": Value::Undefined,
            "precision": Value::Json(normalize(&Value::Json(json!({
                "amount": Value::Undefined,
                "price": Value::Undefined
            }))).unwrap()),
            "limits": Value::Json(normalize(&Value::Json(json!({
                "amount": Value::Json(normalize(&Value::Json(json!({
                    "min": Value::Undefined,
                    "max": Value::Undefined
                }))).unwrap()),
                "price": Value::Json(normalize(&Value::Json(json!({
                    "min": Value::Undefined,
                    "max": Value::Undefined
                }))).unwrap()),
                "cost": Value::Json(normalize(&Value::Json(json!({
                    "min": Value::Undefined,
                    "max": Value::Undefined
                }))).unwrap())
            }))).unwrap()),
            "info": Value::Undefined
        }))).unwrap());
        if market_id.clone().is_nonnullish() {
            if self.get("markets_by_id".into()).is_nonnullish() && self.get("markets_by_id".into()).contains_key(market_id.clone()) {
                market = self.get("markets_by_id".into()).get(market_id.clone());
            } else if delimiter.clone().is_nonnullish() {
                let mut parts: Value = market_id.split(delimiter.clone());
                let mut parts_length: Value = parts.len().into();
                if parts_length.clone() == Value::from(2) {
                    result.set("baseId".into(), self.safe_string(parts.clone(), Value::from(0), Value::Undefined));
                    result.set("quoteId".into(), self.safe_string(parts.clone(), Value::from(1), Value::Undefined));
                    result.set("base".into(), Ftx::safe_currency_code(self, result.get(Value::from("baseId")), Value::Undefined));
                    result.set("quote".into(), Ftx::safe_currency_code(self, result.get(Value::from("quoteId")), Value::Undefined));
                    result.set("symbol".into(), result.get(Value::from("base")) + Value::from("/") + result.get(Value::from("quote")));
                    return result.clone();
                } else {
                    return result.clone();
                };
            };
        };
        if market.clone().is_nonnullish() {
            return market.clone();
        };
        return result.clone();
    }

    fn check_required_credentials(&mut self, mut error: Value) -> Value {
        error = error.or_default(true.into());
        let mut keys: Value = Object::keys(self.get("required_credentials".into()));
        let mut i: usize = 0;
        while i < keys.len() {
            let mut key: Value = keys.get(i.into());
            if self.get("required_credentials".into()).get(key.clone()).is_truthy() && !self.get(key.clone()).is_truthy() {
                if error.is_truthy() {
                    panic!(r###"AuthenticationError::new(self.get("id".into()) + Value::from(r#" requires ""#) + key.clone() + Value::from(r#"" credential"#))"###);
                } else {
                    return error.clone();
                };
            };
            i += 1;
        };
        return true.into();
    }

    fn oath(&mut self) -> Value {
        if self.get("twofa".into()).is_nonnullish() {
            return self.totp(self.get("twofa".into()));
        } else {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" exchange.twofa has not been set for 2FA Two-Factor Authentication"))"###);
        };
        Value::Undefined
    }

    async fn fetch_partial_balance(&mut self, mut part: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut balance: Value = Ftx::fetch_balance(self, params.clone()).await;
        return balance.get(part.clone());
    }

    async fn fetch_free_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Ftx::fetch_partial_balance(self, Value::from("free"), params.clone()).await;
    }

    async fn fetch_used_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Ftx::fetch_partial_balance(self, Value::from("used"), params.clone()).await;
    }

    async fn fetch_total_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Ftx::fetch_partial_balance(self, Value::from("total"), params.clone()).await;
    }

    async fn fetch_status(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchTime")).is_truthy() {
            let mut time: Value = self.fetch_time(params.clone()).await;
            self.set("status".into(), extend_2(self.get("status".into()), Value::Json(normalize(&Value::Json(json!({
                "updated": time
            }))).unwrap())));
        };
        return self.get("status".into());
    }

    async fn fetch_funding_fee(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut warn_on_fetch_funding_fee: Value = self.safe_value(self.get("options".into()), Value::from("warnOnFetchFundingFee"), true.into());
        if warn_on_fetch_funding_fee.is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(r#" fetchFundingFee() method is deprecated, it will be removed in July 2022, please, use fetchTransactionFee() or set exchange.options["warnOnFetchFundingFee"] = false to suppress this warning"#))"###);
        };
        return Ftx::fetch_transaction_fee(self, code.clone(), params.clone()).await;
    }

    async fn fetch_funding_fees(&mut self, mut codes: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut warn_on_fetch_funding_fees: Value = self.safe_value(self.get("options".into()), Value::from("warnOnFetchFundingFees"), true.into());
        if warn_on_fetch_funding_fees.is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(r#" fetchFundingFees() method is deprecated, it will be removed in July 2022. Please, use fetchTransactionFees() or set exchange.options["warnOnFetchFundingFees"] = false to suppress this warning"#))"###);
        };
        return Ftx::fetch_transaction_fees(self, codes.clone(), params.clone()).await;
    }

    async fn fetch_transaction_fee(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("fetchTransactionFees")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTransactionFee() is not supported yet"))"###);
        };
        return Ftx::fetch_transaction_fees(self, Value::Json(serde_json::Value::Array(vec![code.clone().into()])), params.clone()).await;
    }

    async fn fetch_transaction_fees(&mut self, mut codes: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTransactionFees() is not supported yet"))"###);
        Value::Undefined
    }

    fn get_supported_mapping(&self, mut key: Value, mut mapping: Value) -> Value {
        mapping = mapping.or_default(Value::new_object());
        if mapping.contains_key(key.clone()) {
            return mapping.get(key.clone());
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" ") + key.clone() + Value::from(" does not have a value in mapping"))"###);
        };
        Value::Undefined
    }

    async fn fetch_borrow_rate(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Ftx::load_markets(self, Value::Undefined, Value::Undefined).await;
        if !self.get("has".into()).get(Value::from("fetchBorrowRates")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchBorrowRate() is not supported yet"))"###);
        };
        let mut borrow_rates: Value = Ftx::fetch_borrow_rates(self, params.clone()).await;
        let mut rate: Value = self.safe_value(borrow_rates.clone(), code.clone(), Value::Undefined);
        if rate.clone().is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" fetchBorrowRate() could not find the borrow rate for currency code ") + code.clone())"###);
        };
        return rate.clone();
    }

    fn handle_market_type_and_params(&mut self, mut method_name: Value, mut market: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut default_type: Value = self.safe_string_2(self.get("options".into()), Value::from("defaultType"), Value::from("type"), Value::from("spot"));
        let mut method_options: Value = self.safe_value(self.get("options".into()), method_name.clone(), Value::Undefined);
        let mut method_type: Value = default_type.clone();
        if method_options.clone().is_nonnullish() {
            if method_options.typeof_() == Value::from("string") {
                method_type = method_options.clone();
            } else {
                method_type = self.safe_string_2(method_options.clone(), Value::from("defaultType"), Value::from("type"), method_type.clone());
            };
        };
        let mut market_type: Value = if market.clone().is_nullish() { method_type.clone() } else { market.get(Value::from("type")) };
        let mut r#type: Value = self.safe_string_2(params.clone(), Value::from("defaultType"), Value::from("type"), market_type.clone());
        params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("defaultType").into(), Value::from("type").into()])));
        return Value::Json(serde_json::Value::Array(vec![r#type.clone().into(), params.clone().into()]));
    }

    fn handle_sub_type_and_params(&mut self, mut method_name: Value, mut market: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut sub_type: Value = Value::Undefined;
        // if set in params, it takes precedence
        let mut sub_type_in_params: Value = self.safe_string_2(params.clone(), Value::from("subType"), Value::from("subType"), Value::Undefined);
        // avoid omitting if it's not present
        if sub_type_in_params.clone().is_nonnullish() {
            sub_type = sub_type_in_params.clone();
            params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("defaultSubType").into(), Value::from("subType").into()])));
        } else {
            // at first, check from market object
            if market.clone().is_nonnullish() {
                if market.get(Value::from("linear")).is_truthy() {
                    sub_type = Value::from("linear");
                } else if market.get(Value::from("inverse")).is_truthy() {
                    sub_type = Value::from("inverse");
                };
            };
            // if it was not defined in market object
            if sub_type.clone().is_nullish() {
                let mut exchange_wide_value: Value = self.safe_string_2(self.get("options".into()), Value::from("defaultSubType"), Value::from("subType"), Value::from("linear"));
                let mut method_options: Value = self.safe_value(self.get("options".into()), method_name.clone(), Value::new_object());
                sub_type = self.safe_string_2(method_options.clone(), Value::from("defaultSubType"), Value::from("subType"), exchange_wide_value.clone());
            };
        };
        return Value::Json(serde_json::Value::Array(vec![sub_type.clone().into(), params.clone().into()]));
    }

    fn throw_exactly_matched_exception(&mut self, mut exact: Value, mut string: Value, mut message: Value) -> () {
        if exact.contains_key(string.clone()) {
            panic!(r###"exact.get(string.clone())::new(message)"###);
        };
    }

    fn throw_broadly_matched_exception(&mut self, mut broad: Value, mut string: Value, mut message: Value) -> () {
        let mut broad_key: Value = Ftx::find_broadly_matched_key(self, broad.clone(), string.clone());
        if broad_key.clone().is_nonnullish() {
            panic!(r###"broad.get(broad_key.clone())::new(message)"###);
        };
    }

    fn find_broadly_matched_key(&mut self, mut broad: Value, mut string: Value) -> Value {
        // a helper for matching error strings exactly vs broadly
        let mut keys: Value = Object::keys(broad.clone());
        let mut i: usize = 0;
        while i < keys.len() {
            let mut key: Value = keys.get(i.into());
            if string.index_of(key.clone()) >= Value::from(0) {
                return key.clone();
            };
            i += 1;
        };
        return Value::Undefined;
    }

    fn calculate_rate_limiter_cost(&mut self, mut api: Value, mut method: Value, mut path: Value, mut params: Value, mut config: Value, mut context: Value) -> Value {
        config = config.or_default(Value::new_object());
        context = context.or_default(Value::new_object());
        return self.safe_value(config.clone(), Value::from("cost"), Value::from(1));
    }

    async fn fetch_order_status(&mut self, mut id: Value, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut order: Value = Ftx::fetch_order(self, id.clone(), symbol.clone(), params.clone()).await;
        return order.get(Value::from("status"));
    }

    async fn fetch_unified_order(&mut self, mut order: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Ftx::fetch_order(self, self.safe_value(order.clone(), Value::from("id"), Value::Undefined), self.safe_value(order.clone(), Value::from("symbol"), Value::Undefined), params.clone()).await;
    }

    async fn cancel_unified_order(&mut self, mut order: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Ftx::cancel_order(self, self.safe_value(order.clone(), Value::from("id"), Value::Undefined), self.safe_value(order.clone(), Value::from("symbol"), Value::Undefined), params.clone()).await;
    }

    async fn fetch_closed_orders(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchClosedOrders() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_transactions(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTransactions() is not supported yet"))"###);
        Value::Undefined
    }

    fn account(&self) -> Value {
        return Value::Json(normalize(&Value::Json(json!({
            "free": Value::Undefined,
            "used": Value::Undefined,
            "total": Value::Undefined
        }))).unwrap());
    }

    fn common_currency_code(&self, mut currency: Value) -> Value {
        if !self.get("substitute_common_currency_codes".into()).is_truthy() {
            return currency.clone();
        };
        return self.safe_string(self.get("common_currencies".into()), currency.clone(), currency.clone());
    }

    fn currency(&self, mut code: Value) -> Value {
        if self.get("currencies".into()).is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" currencies not loaded"))"###);
        };
        if code.typeof_() == Value::from("string") {
            if self.get("currencies".into()).contains_key(code.clone()) {
                return self.get("currencies".into()).get(code.clone());
            } else if self.get("currencies_by_id".into()).contains_key(code.clone()) {
                return self.get("currencies_by_id".into()).get(code.clone());
            };
        };
        panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" does not have currency code ") + code.clone())"###);
        Value::Undefined
    }

    fn market(&self, mut symbol: Value) -> Value {
        if self.get("markets".into()).is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" markets not loaded"))"###);
        };
        if self.get("markets_by_id".into()).is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" markets not loaded"))"###);
        };
        if symbol.typeof_() == Value::from("string") {
            if self.get("markets".into()).contains_key(symbol.clone()) {
                return self.get("markets".into()).get(symbol.clone());
            } else if self.get("markets_by_id".into()).contains_key(symbol.clone()) {
                return self.get("markets_by_id".into()).get(symbol.clone());
            };
        };
        panic!(r###"BadSymbol::new(self.get("id".into()) + Value::from(" does not have market symbol ") + symbol.clone())"###);
        Value::Undefined
    }

    fn handle_withdraw_tag_and_params(&mut self, mut tag: Value, mut params: Value) -> Value {
        if tag.typeof_() == Value::from("object") {
            params = extend_2(tag.clone(), params.clone());
            tag = Value::Undefined;
        };
        if tag.clone().is_nullish() {
            tag = self.safe_string(params.clone(), Value::from("tag"), Value::Undefined);
            if tag.clone().is_nonnullish() {
                params = self.omit(params.clone(), Value::from("tag"));
            };
        };
        return Value::Json(serde_json::Value::Array(vec![tag.clone().into(), params.clone().into()]));
    }

    async fn create_limit_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Ftx::create_order(self, symbol.clone(), Value::from("limit"), side.clone(), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_market_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Ftx::create_order(self, symbol.clone(), Value::from("market"), side.clone(), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_limit_buy_order(&mut self, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Ftx::create_order(self, symbol.clone(), Value::from("limit"), Value::from("buy"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_limit_sell_order(&mut self, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Ftx::create_order(self, symbol.clone(), Value::from("limit"), Value::from("sell"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_market_buy_order(&mut self, mut symbol: Value, mut amount: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Ftx::create_order(self, symbol.clone(), Value::from("market"), Value::from("buy"), amount.clone(), Value::Undefined, params.clone()).await;
    }

    async fn create_market_sell_order(&mut self, mut symbol: Value, mut amount: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Ftx::create_order(self, symbol.clone(), Value::from("market"), Value::from("sell"), amount.clone(), Value::Undefined, params.clone()).await;
    }

    fn cost_to_precision(&mut self, mut symbol: Value, mut cost: Value) -> Value {
        let mut market: Value = Ftx::market(self, symbol.clone());
        return self.decimal_to_precision(cost.clone(), TRUNCATE.into(), market.get(Value::from("precision")).get(Value::from("price")), self.get("precision_mode".into()), self.get("padding_mode".into()));
    }

    fn price_to_precision(&mut self, mut symbol: Value, mut price: Value) -> Value {
        let mut market: Value = Ftx::market(self, symbol.clone());
        return self.decimal_to_precision(price.clone(), ROUND.into(), market.get(Value::from("precision")).get(Value::from("price")), self.get("precision_mode".into()), self.get("padding_mode".into()));
    }

    fn amount_to_precision(&mut self, mut symbol: Value, mut amount: Value) -> Value {
        let mut market: Value = Ftx::market(self, symbol.clone());
        return self.decimal_to_precision(amount.clone(), TRUNCATE.into(), market.get(Value::from("precision")).get(Value::from("amount")), self.get("precision_mode".into()), self.get("padding_mode".into()));
    }

    fn fee_to_precision(&mut self, mut symbol: Value, mut fee: Value) -> Value {
        let mut market: Value = Ftx::market(self, symbol.clone());
        return self.decimal_to_precision(fee.clone(), ROUND.into(), market.get(Value::from("precision")).get(Value::from("price")), self.get("precision_mode".into()), self.get("padding_mode".into()));
    }

    fn currency_to_precision(&mut self, mut code: Value, mut fee: Value, mut network_code: Value) -> Value {
        let mut currency: Value = self.get("currencies".into()).get(code.clone());
        let mut precision: Value = self.safe_value(currency.clone(), Value::from("precision"), Value::Undefined);
        if network_code.clone().is_nonnullish() {
            let mut networks: Value = self.safe_value(currency.clone(), Value::from("networks"), Value::new_object());
            let mut network_item: Value = self.safe_value(networks.clone(), network_code.clone(), Value::new_object());
            precision = self.safe_value(network_item.clone(), Value::from("precision"), precision.clone());
        };
        if precision.clone().is_nullish() {
            return fee.clone();
        } else {
            return self.decimal_to_precision(fee.clone(), ROUND.into(), precision.clone(), self.get("precision_mode".into()), self.get("padding_mode".into()));
        };
        Value::Undefined
    }

    fn safe_number(&self, mut object: Value, mut key: Value, mut d: Value) -> Value {
        let mut value: Value = self.safe_string(object.clone(), key.clone(), Value::Undefined);
        return self.parse_number(value.clone(), d.clone());
    }

    fn safe_number_n(&self, mut object: Value, mut arr: Value, mut d: Value) -> Value {
        let mut value: Value = self.safe_string_n(object.clone(), arr.clone(), Value::Undefined);
        return self.parse_number(value.clone(), d.clone());
    }

    fn parse_precision(&self, mut precision: Value) -> Value {
        if precision.clone().is_nullish() {
            return Value::Undefined;
        };
        return Value::from("1e") + Precise::string_neg(precision.clone());
    }

    async fn load_time_difference(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut server_time: Value = self.fetch_time(params.clone()).await;
        let mut after: Value = self.milliseconds();
        self.get("options".into()).set("timeDifference".into(), after.clone() - server_time.clone());
        return self.get("options".into()).get(Value::from("timeDifference"));
    }

    fn implode_hostname(&mut self, mut url: Value) -> Value {
        return self.implode_params(url.clone(), Value::Json(normalize(&Value::Json(json!({
            "hostname": self.get("hostname".into())
        }))).unwrap()));
    }

    async fn fetch_market_leverage_tiers(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchLeverageTiers")).is_truthy() {
            let mut market: Value = Ftx::market(self, symbol.clone());
            if !market.get(Value::from("contract")).is_truthy() {
                panic!(r###"BadSymbol::new(self.get("id".into()) + Value::from(" fetchMarketLeverageTiers() supports contract markets only"))"###);
            };
            let mut tiers: Value = self.fetch_leverage_tiers(Value::Json(serde_json::Value::Array(vec![symbol.clone().into()])), Value::Undefined).await;
            return self.safe_value(tiers.clone(), symbol.clone(), Value::Undefined);
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchMarketLeverageTiers() is not supported yet"))"###);
        };
        Value::Undefined
    }

    async fn create_post_only_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createPostOnlyOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from("createPostOnlyOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "postOnly": true
        }))).unwrap()));
        return Ftx::create_order(self, symbol.clone(), r#type.clone(), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_reduce_only_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createReduceOnlyOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from("createReduceOnlyOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "reduceOnly": true
        }))).unwrap()));
        return Ftx::create_order(self, symbol.clone(), r#type.clone(), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_stop_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut stop_price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createStopOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" createStopOrder() is not supported yet"))"###);
        };
        if stop_price.clone().is_nullish() {
            panic!(r###"ArgumentsRequired::new(self.get("id".into()) + Value::from(" create_stop_order() requires a stopPrice argument"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "stopPrice": stop_price
        }))).unwrap()));
        return Ftx::create_order(self, symbol.clone(), r#type.clone(), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_stop_limit_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut stop_price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createStopLimitOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" createStopLimitOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "stopPrice": stop_price
        }))).unwrap()));
        return Ftx::create_order(self, symbol.clone(), Value::from("limit"), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_stop_market_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut stop_price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createStopMarketOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" createStopMarketOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "stopPrice": stop_price
        }))).unwrap()));
        return Ftx::create_order(self, symbol.clone(), Value::from("market"), side.clone(), amount.clone(), Value::Undefined, query.clone()).await;
    }

    fn safe_currency_code(&self, mut currency_id: Value, mut currency: Value) -> Value {
        currency = Ftx::safe_currency(self, currency_id.clone(), currency.clone());
        return currency.get(Value::from("code"));
    }

    fn filter_by_symbol_since_limit(&self, mut array: Value, mut symbol: Value, mut since: Value, mut limit: Value, mut tail: Value) -> Value {
        tail = tail.or_default(false.into());
        return self.filter_by_value_since_limit(array.clone(), Value::from("symbol"), symbol.clone(), since.clone(), limit.clone(), Value::from("timestamp"), tail.clone());
    }

    fn filter_by_currency_since_limit(&self, mut array: Value, mut code: Value, mut since: Value, mut limit: Value, mut tail: Value) -> Value {
        tail = tail.or_default(false.into());
        return self.filter_by_value_since_limit(array.clone(), Value::from("currency"), code.clone(), since.clone(), limit.clone(), Value::from("timestamp"), tail.clone());
    }

    fn parse_tickers(&self, mut tickers: Value, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        //
        // the value of tickers is either a dict or a list
        //
        // dict
        //
        //     {
        //         'marketId1': { ... },
        //         'marketId2': { ... },
        //         'marketId3': { ... },
        //         ...
        //     }
        //
        // list
        //
        //     [
        //         { 'market': 'marketId1', ... },
        //         { 'market': 'marketId2', ... },
        //         { 'market': 'marketId3', ... },
        //         ...
        //     ]
        //
        let mut results: Value = Value::new_array();
        if Array::is_array(tickers.clone()).is_truthy() {
            let mut i: usize = 0;
            while i < tickers.len() {
                let mut ticker: Value = extend_2(Ftx::parse_ticker(self, tickers.get(i.into()), Value::Undefined), params.clone());
                results.push(ticker.clone());
                i += 1;
            };
        } else {
            let mut market_ids: Value = Object::keys(tickers.clone());
            let mut i: usize = 0;
            while i < market_ids.len() {
                let mut market_id: Value = market_ids.get(i.into());
                let mut market: Value = Ftx::safe_market(self, market_id.clone(), Value::Undefined, Value::Undefined);
                let mut ticker: Value = extend_2(Ftx::parse_ticker(self, tickers.get(market_id.clone()), market.clone()), params.clone());
                results.push(ticker.clone());
                i += 1;
            };
        };
        symbols = Ftx::market_symbols(self, symbols.clone());
        return Ftx::filter_by_array(self, results.clone(), Value::from("symbol"), symbols.clone(), Value::Undefined);
    }

    fn parse_deposit_addresses(&self, mut addresses: Value, mut codes: Value, mut indexed: Value, mut params: Value) -> Value {
        indexed = indexed.or_default(true.into());
        params = params.or_default(Value::new_object());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < addresses.len() {
            let mut address: Value = extend_2(self.parse_deposit_address(addresses.get(i.into()), Value::Undefined), params.clone());
            result.push(address.clone());
            i += 1;
        };
        if codes.clone().is_nonnullish() {
            result = Ftx::filter_by_array(self, result.clone(), Value::from("currency"), codes.clone(), false.into());
        };
        result = if indexed.is_truthy() { self.index_by(result.clone(), Value::from("currency"), Value::Undefined) } else { result.clone() };
        return result.clone();
    }

    fn parse_borrow_interests(&self, mut response: Value, mut market: Value) -> Value {
        let mut interests: Value = Value::new_array();
        let mut i: usize = 0;
        while i < response.len() {
            let mut row: Value = response.get(i.into());
            interests.push(Ftx::parse_borrow_interest(self, row.clone(), market.clone()));
            i += 1;
        };
        return interests.clone();
    }

    fn parse_funding_rate_histories(&self, mut response: Value, mut market: Value, mut since: Value, mut limit: Value) -> Value {
        let mut rates: Value = Value::new_array();
        let mut i: usize = 0;
        while i < response.len() {
            let mut entry: Value = response.get(i.into());
            rates.push(self.parse_funding_rate_history(entry.clone(), market.clone()));
            i += 1;
        };
        let mut sorted: Value = self.sort_by(rates.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut symbol: Value = if market.clone().is_nullish() { Value::Undefined } else { market.get(Value::from("symbol")) };
        return Ftx::filter_by_symbol_since_limit(self, sorted.clone(), symbol.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    fn safe_symbol(&self, mut market_id: Value, mut market: Value, mut delimiter: Value) -> Value {
        market = Ftx::safe_market(self, market_id.clone(), market.clone(), delimiter.clone());
        return market.get(Value::from("symbol"));
    }

    fn parse_funding_rates(&self, mut response: Value, mut market: Value) -> Value {
        let mut result: Value = Value::new_object();
        let mut i: usize = 0;
        while i < response.len() {
            let mut parsed: Value = Ftx::parse_funding_rate(self, response.get(i.into()), market.clone());
            result.set(parsed.get(Value::from("symbol")), parsed.clone());
            i += 1;
        };
        return result.clone();
    }

    /// Returns true if a post only order, false otherwise
    ///
    /// @ignore
    ///
    /// # Arguments
    ///
    /// * `type` {string} - Order type
    /// * `exchangeSpecificParam` {boolean} - exchange specific postOnly
    /// * `params` {object} - exchange specific params
    fn is_post_only(&mut self, mut is_market_order: Value, mut exchange_specific_param: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut time_in_force: Value = self.safe_string_upper(params.clone(), Value::from("timeInForce"), Value::Undefined);
        let mut post_only: Value = self.safe_value_2(params.clone(), Value::from("postOnly"), Value::from("post_only"), false.into());
        // we assume timeInForce is uppercase from safeStringUpper (params, 'timeInForce')
        let mut ioc: Value = (time_in_force.clone() == Value::from("IOC")).into();
        let mut fok: Value = (time_in_force.clone() == Value::from("FOK")).into();
        let mut time_in_force_post_only: Value = (time_in_force.clone() == Value::from("PO")).into();
        post_only = (post_only.is_truthy() || time_in_force_post_only.is_truthy() || exchange_specific_param.is_truthy()).into();
        if post_only.is_truthy() {
            if ioc.is_truthy() || fok.is_truthy() {
                panic!(r###"InvalidOrder::new(self.get("id".into()) + Value::from(" postOnly orders cannot have timeInForce equal to ") + time_in_force.clone())"###);
            } else if is_market_order.is_truthy() {
                panic!(r###"InvalidOrder::new(self.get("id".into()) + Value::from(" market orders cannot be postOnly"))"###);
            } else {
                return true.into();
            };
        } else {
            return false.into();
        };
        Value::Undefined
    }

    fn parse_open_interest(&self, mut interest: Value, mut market: Value) -> Value {
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" parseOpenInterest () is not supported yet"))"###);
        Value::Undefined
    }

    fn parse_open_interests(&self, mut response: Value, mut market: Value, mut since: Value, mut limit: Value) -> Value {
        let mut interests: Value = Value::new_array();
        let mut i: usize = 0;
        while i < response.len() {
            let mut entry: Value = response.get(i.into());
            let mut interest: Value = Ftx::parse_open_interest(self, entry.clone(), market.clone());
            interests.push(interest.clone());
            i += 1;
        };
        let mut sorted: Value = self.sort_by(interests.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut symbol: Value = self.safe_string(market.clone(), Value::from("symbol"), Value::Undefined);
        return Ftx::filter_by_symbol_since_limit(self, sorted.clone(), symbol.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    /// Returns a list of candles ordered as timestamp, open, high, low, close, undefined
    ///
    /// Fetches historical mark price candlestick data containing the open, high, low, and close price of a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch OHLCV data for
    /// * `timeframe` {string} - the length of time each candle represents
    /// * `since` {int|undefined} - timestamp in ms of the earliest candle to fetch
    /// * `limit` {int|undefined} - the maximum amount of candles to fetch
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    async fn fetch_mark_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchMarkOHLCV")).is_truthy() {
            let mut request: Value = Value::Json(normalize(&Value::Json(json!({
                "price": "mark"
            }))).unwrap());
            return Ftx::fetch_ohlcv(self, symbol.clone(), timeframe.clone(), since.clone(), limit.clone(), extend_2(request.clone(), params.clone())).await;
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchMarkOHLCV () is not supported yet"))"###);
        };
        Value::Undefined
    }

    /// Returns a list of candles ordered as timestamp, open, high, low, close, undefined
    ///
    /// Fetches historical index price candlestick data containing the open, high, low, and close price of a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch OHLCV data for
    /// * `timeframe` {string} - the length of time each candle represents
    /// * `since` {int|undefined} - timestamp in ms of the earliest candle to fetch
    /// * `limit` {int|undefined} - the maximum amount of candles to fetch
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    async fn fetch_index_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchIndexOHLCV")).is_truthy() {
            let mut request: Value = Value::Json(normalize(&Value::Json(json!({
                "price": "index"
            }))).unwrap());
            return Ftx::fetch_ohlcv(self, symbol.clone(), timeframe.clone(), since.clone(), limit.clone(), extend_2(request.clone(), params.clone())).await;
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchIndexOHLCV () is not supported yet"))"###);
        };
        Value::Undefined
    }

    /// Returns a list of candles ordered as timestamp, open, high, low, close, undefined
    ///
    /// Fetches historical premium index price candlestick data containing the open, high, low, and close price of a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch OHLCV data for
    /// * `timeframe` {string} - the length of time each candle represents
    /// * `since` {int|undefined} - timestamp in ms of the earliest candle to fetch
    /// * `limit` {int|undefined} - the maximum amount of candles to fetch
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    async fn fetch_premium_index_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchPremiumIndexOHLCV")).is_truthy() {
            let mut request: Value = Value::Json(normalize(&Value::Json(json!({
                "price": "premiumIndex"
            }))).unwrap());
            return Ftx::fetch_ohlcv(self, symbol.clone(), timeframe.clone(), since.clone(), limit.clone(), extend_2(request.clone(), params.clone())).await;
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchPremiumIndexOHLCV () is not supported yet"))"###);
        };
        Value::Undefined
    }

    /// Returns returns the exchange specific value for timeInForce
    ///
    /// @ignore
    /// * Must add timeInForce to this.options to use this method
    fn handle_time_in_force(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut time_in_force: Value = self.safe_string_upper(params.clone(), Value::from("timeInForce"), Value::Undefined);
        // supported values GTC, IOC, PO
        if time_in_force.clone().is_nonnullish() {
            let mut exchange_value: Value = self.safe_string(self.get("options".into()).get(Value::from("timeInForce")), time_in_force.clone(), Value::Undefined);
            if exchange_value.clone().is_nullish() {
                panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(r#" does not support timeInForce ""#) + time_in_force.clone() + Value::from(r#"""#))"###);
            };
            return exchange_value.clone();
        };
        return Value::Undefined;
    }

    /// Returns the exchange specific account name or the isolated margin id for transfers
    ///
    /// @ignore
    /// * Must add accountsByType to this.options to use this method
    ///
    /// # Arguments
    ///
    /// * `account` {string} - key for account name in this.options['accountsByType']
    fn parse_account(&self, mut account: Value) -> Value {
        let mut accounts_by_type: Value = self.safe_value(self.get("options".into()), Value::from("accountsByType"), Value::new_object());
        let mut symbols: Value = self.get("symbols".into());
        if accounts_by_type.contains_key(account.clone()) {
            return accounts_by_type.get(account.clone());
        } else if self.in_array(account.clone(), symbols.clone()).is_truthy() {
            let mut market: Value = Ftx::market(self, account.clone());
            return market.get(Value::from("id"));
        } else {
            return account.clone();
        };
        Value::Undefined
    }

    /// Returns {[string|undefined, object]} the marginMode in lowercase as specified by params["marginMode"], params["defaultMarginMode"] this.options["marginMode"] or this.options["defaultMarginMode"]
    ///
    /// @ignore
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    fn handle_margin_mode_and_params(&mut self, mut method_name: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut default_margin_mode: Value = self.safe_string_2(self.get("options".into()), Value::from("marginMode"), Value::from("defaultMarginMode"), Value::Undefined);
        let mut method_options: Value = self.safe_value(self.get("options".into()), method_name.clone(), Value::new_object());
        let mut method_margin_mode: Value = self.safe_string_2(method_options.clone(), Value::from("marginMode"), Value::from("defaultMarginMode"), default_margin_mode.clone());
        let mut margin_mode: Value = self.safe_string_lower_2(params.clone(), Value::from("marginMode"), Value::from("defaultMarginMode"), method_margin_mode.clone());
        if margin_mode.clone().is_nonnullish() {
            params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("marginMode").into(), Value::from("defaultMarginMode").into()])));
        };
        return Value::Json(serde_json::Value::Array(vec![margin_mode.clone().into(), params.clone().into()]));
    }

    async fn load_markets_helper(&mut self, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        if !reload.is_truthy() && self.get("markets".into()).is_truthy() {
            if !self.get("markets_by_id".into()).is_truthy() {
                return Ftx::set_markets(self, self.get("markets".into()), Value::Undefined);
            };
            return self.get("markets".into());
        };
        let mut currencies: Value = Value::Undefined;
        // only call if exchange API provides endpoint (true), thus avoid emulated versions ('emulated')
        if self.get("has".into()).get(Value::from("fetchCurrencies")) == true.into() {
            currencies = Ftx::fetch_currencies(self, Value::Undefined).await;
        };
        let mut markets: Value = Ftx::fetch_markets(self, params.clone()).await;
        return Ftx::set_markets(self, markets.clone(), currencies.clone());
    }

    async fn load_markets(&mut self, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        // this method is async, it returns a promise
        if reload.is_truthy() && !self.get("reloading_markets".into()).is_truthy() || !self.get("markets_loading".into()).is_truthy() {
            self.set("reloading_markets".into(), true.into());
            // TODO This should use a finally block
            let mut markets_loading: Value = Ftx::load_markets_helper(self, reload.clone(), params.clone()).await;
            self.set("markets_loading".into(), markets_loading.clone());
            self.set("reloading_markets".into(), false.into());
            return self.get("markets_loading".into());
        };
        return self.get("markets_loading".into());
    }

    
    async fn dispatch(&mut self, method: Value, params: Value, context: Value) -> Value {
        match method {
            Value::Json(serde_json::Value::String(ref m)) => {
                match m.as_ref() {
                    "publicGetCoins" => Ftx::request(self, "coins".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarkets" => Ftx::request(self, "markets".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarketsMarketName" => Ftx::request(self, "markets/{market_name}".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarketsMarketNameOrderbook" => Ftx::request(self, "markets/{market_name}/orderbook".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarketsMarketNameTrades" => Ftx::request(self, "markets/{market_name}/trades".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarketsMarketNameCandles" => Ftx::request(self, "markets/{market_name}/candles".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetFutures" => Ftx::request(self, "futures".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetFuturesFutureName" => Ftx::request(self, "futures/{future_name}".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetFuturesFutureNameStats" => Ftx::request(self, "futures/{future_name}/stats".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetFundingRates" => Ftx::request(self, "funding_rates".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetIndexesIndexNameWeights" => Ftx::request(self, "indexes/{index_name}/weights".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetExpiredFutures" => Ftx::request(self, "expired_futures".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetIndexesMarketNameCandles" => Ftx::request(self, "indexes/{market_name}/candles".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetWalletCoins" => Ftx::request(self, "wallet/coins".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetLtTokens" => Ftx::request(self, "lt/tokens".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetLtTokenName" => Ftx::request(self, "lt/{token_name}".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetEtfsRebalanceInfo" => Ftx::request(self, "etfs/rebalance_info".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetOptionsRequests" => Ftx::request(self, "options/requests".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetOptionsTrades" => Ftx::request(self, "options/trades".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetOptionsHistoricalVolumesBtc" => Ftx::request(self, "options/historical_volumes/BTC".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetStats24hOptionsVolume" => Ftx::request(self, "stats/24h_options_volume".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetOptionsOpenInterestBtc" => Ftx::request(self, "options/open_interest/BTC".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetOptionsHistoricalOpenInterestBtc" => Ftx::request(self, "options/historical_open_interest/BTC".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetSpotMarginHistory" => Ftx::request(self, "spot_margin/history".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetSpotMarginBorrowSummary" => Ftx::request(self, "spot_margin/borrow_summary".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetNftNfts" => Ftx::request(self, "nft/nfts".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetNftNftId" => Ftx::request(self, "nft/{nft_id}".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetNftNftIdTrades" => Ftx::request(self, "nft/{nft_id}/trades".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetNftAllTrades" => Ftx::request(self, "nft/all_trades".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetNftNftIdAccountInfo" => Ftx::request(self, "nft/{nft_id}/account_info".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetNftCollections" => Ftx::request(self, "nft/collections".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetFtxpayAppsUserSpecificIdDetails" => Ftx::request(self, "ftxpay/apps/{user_specific_id}/details".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicPostFtxpayAppsUserSpecificIdOrders" => Ftx::request(self, "ftxpay/apps/{user_specific_id}/orders".into(), "public".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetSubaccounts" => Ftx::request(self, "subaccounts".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetSubaccountsNicknameBalances" => Ftx::request(self, "subaccounts/{nickname}/balances".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetAccount" => Ftx::request(self, "account".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetPositions" => Ftx::request(self, "positions".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetWalletBalances" => Ftx::request(self, "wallet/balances".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetWalletAllBalances" => Ftx::request(self, "wallet/all_balances".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetWalletDepositAddressCoin" => Ftx::request(self, "wallet/deposit_address/{coin}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetWalletDeposits" => Ftx::request(self, "wallet/deposits".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetWalletWithdrawals" => Ftx::request(self, "wallet/withdrawals".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetWalletAirdrops" => Ftx::request(self, "wallet/airdrops".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetWalletWithdrawalFee" => Ftx::request(self, "wallet/withdrawal_fee".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetWalletSavedAddresses" => Ftx::request(self, "wallet/saved_addresses".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOrders" => Ftx::request(self, "orders".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOrdersHistory" => Ftx::request(self, "orders/history".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOrdersOrderId" => Ftx::request(self, "orders/{order_id}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOrdersByClientIdClientOrderId" => Ftx::request(self, "orders/by_client_id/{client_order_id}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetConditionalOrders" => Ftx::request(self, "conditional_orders".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetConditionalOrdersConditionalOrderIdTriggers" => Ftx::request(self, "conditional_orders/{conditional_order_id}/triggers".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetConditionalOrdersHistory" => Ftx::request(self, "conditional_orders/history".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetFills" => Ftx::request(self, "fills".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetFundingPayments" => Ftx::request(self, "funding_payments".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetLtBalances" => Ftx::request(self, "lt/balances".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetLtCreations" => Ftx::request(self, "lt/creations".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetLtRedemptions" => Ftx::request(self, "lt/redemptions".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOptionsMyRequests" => Ftx::request(self, "options/my_requests".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOptionsRequestsRequestIdQuotes" => Ftx::request(self, "options/requests/{request_id}/quotes".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOptionsMyQuotes" => Ftx::request(self, "options/my_quotes".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOptionsAccountInfo" => Ftx::request(self, "options/account_info".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOptionsPositions" => Ftx::request(self, "options/positions".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOptionsFills" => Ftx::request(self, "options/fills".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetStakingStakes" => Ftx::request(self, "staking/stakes".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetStakingUnstakeRequests" => Ftx::request(self, "staking/unstake_requests".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetStakingBalances" => Ftx::request(self, "staking/balances".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetStakingStakingRewards" => Ftx::request(self, "staking/staking_rewards".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOtcQuotesQuoteId" => Ftx::request(self, "otc/quotes/{quoteId}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetSpotMarginBorrowRates" => Ftx::request(self, "spot_margin/borrow_rates".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetSpotMarginLendingRates" => Ftx::request(self, "spot_margin/lending_rates".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetSpotMarginMarketInfo" => Ftx::request(self, "spot_margin/market_info".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetSpotMarginBorrowHistory" => Ftx::request(self, "spot_margin/borrow_history".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetSpotMarginLendingHistory" => Ftx::request(self, "spot_margin/lending_history".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetSpotMarginOffers" => Ftx::request(self, "spot_margin/offers".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetSpotMarginLendingInfo" => Ftx::request(self, "spot_margin/lending_info".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetNftBalances" => Ftx::request(self, "nft/balances".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetNftBids" => Ftx::request(self, "nft/bids".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetNftDeposits" => Ftx::request(self, "nft/deposits".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetNftWithdrawals" => Ftx::request(self, "nft/withdrawals".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetNftFills" => Ftx::request(self, "nft/fills".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetNftGalleryGalleryId" => Ftx::request(self, "nft/gallery/{gallery_id}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetNftGallerySettings" => Ftx::request(self, "nft/gallery_settings".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetStatsLatencyStats" => Ftx::request(self, "stats/latency_stats".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetPnlHistoricalChanges" => Ftx::request(self, "pnl/historical_changes".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetSupportTickets" => Ftx::request(self, "support/tickets".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetSupportTicketsTicketIdMessages" => Ftx::request(self, "support/tickets/{ticketId}/messages".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetSupportTicketsCountUnread" => Ftx::request(self, "support/tickets/count_unread".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetTwapOrders" => Ftx::request(self, "twap_orders".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetTwapOrdersTwapOrderId" => Ftx::request(self, "twap_orders/{twap_order_id}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostSubaccounts" => Ftx::request(self, "subaccounts".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostSubaccountsUpdateName" => Ftx::request(self, "subaccounts/update_name".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostSubaccountsTransfer" => Ftx::request(self, "subaccounts/transfer".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostAccountLeverage" => Ftx::request(self, "account/leverage".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostWalletDepositAddressList" => Ftx::request(self, "wallet/deposit_address/list".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostWalletWithdrawals" => Ftx::request(self, "wallet/withdrawals".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostWalletSavedAddresses" => Ftx::request(self, "wallet/saved_addresses".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostOrders" => Ftx::request(self, "orders".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostConditionalOrders" => Ftx::request(self, "conditional_orders".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostOrdersOrderIdModify" => Ftx::request(self, "orders/{order_id}/modify".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostOrdersByClientIdClientOrderIdModify" => Ftx::request(self, "orders/by_client_id/{client_order_id}/modify".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostConditionalOrdersOrderIdModify" => Ftx::request(self, "conditional_orders/{order_id}/modify".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostLtTokenNameCreate" => Ftx::request(self, "lt/{token_name}/create".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostLtTokenNameRedeem" => Ftx::request(self, "lt/{token_name}/redeem".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostOptionsRequests" => Ftx::request(self, "options/requests".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostOptionsRequestsRequestIdQuotes" => Ftx::request(self, "options/requests/{request_id}/quotes".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostOptionsQuotesQuoteIdAccept" => Ftx::request(self, "options/quotes/{quote_id}/accept".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostStakingUnstakeRequests" => Ftx::request(self, "staking/unstake_requests".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostSrmStakesStakes" => Ftx::request(self, "srm_stakes/stakes".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostOtcQuotesQuoteIdAccept" => Ftx::request(self, "otc/quotes/{quote_id}/accept".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostOtcQuotes" => Ftx::request(self, "otc/quotes".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostSpotMarginOffers" => Ftx::request(self, "spot_margin/offers".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostNftOffer" => Ftx::request(self, "nft/offer".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostNftBuy" => Ftx::request(self, "nft/buy".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostNftAuction" => Ftx::request(self, "nft/auction".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostNftEditAuction" => Ftx::request(self, "nft/edit_auction".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostNftCancelAuction" => Ftx::request(self, "nft/cancel_auction".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostNftBids" => Ftx::request(self, "nft/bids".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostNftRedeem" => Ftx::request(self, "nft/redeem".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostNftGallerySettings" => Ftx::request(self, "nft/gallery_settings".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostFtxpayAppsUserSpecificIdOrders" => Ftx::request(self, "ftxpay/apps/{user_specific_id}/orders".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostSupportTickets" => Ftx::request(self, "support/tickets".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostSupportTicketsTicketIdMessages" => Ftx::request(self, "support/tickets/{ticketId}/messages".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostSupportTicketsTicketIdStatus" => Ftx::request(self, "support/tickets/{ticketId}/status".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostSupportTicketsTicketIdMarkAsRead" => Ftx::request(self, "support/tickets/{ticketId}/mark_as_read".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostTwapOrders" => Ftx::request(self, "twap_orders".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteSubaccounts" => Ftx::request(self, "subaccounts".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteWalletSavedAddressesSavedAddressId" => Ftx::request(self, "wallet/saved_addresses/{saved_address_id}".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteOrdersOrderId" => Ftx::request(self, "orders/{order_id}".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteOrdersByClientIdClientOrderId" => Ftx::request(self, "orders/by_client_id/{client_order_id}".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteOrders" => Ftx::request(self, "orders".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteConditionalOrdersOrderId" => Ftx::request(self, "conditional_orders/{order_id}".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteOptionsRequestsRequestId" => Ftx::request(self, "options/requests/{request_id}".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteOptionsQuotesQuoteId" => Ftx::request(self, "options/quotes/{quote_id}".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteStakingUnstakeRequestsRequestId" => Ftx::request(self, "staking/unstake_requests/{request_id}".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteTwapOrdersTwapOrderId" => Ftx::request(self, "twap_orders/{twap_order_id}".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    _ => unimplemented!(),
                }
            },
            _ => unimplemented!()
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub struct FtxImpl(Value);
impl Exchange for FtxImpl {}
impl Ftx for FtxImpl {}
impl ValueTrait for FtxImpl {
    fn is_undefined(&self) -> bool { self.0.is_undefined() }
    fn is_nullish(&self) -> bool { self.0.is_nullish() }
    fn is_nonnullish(&self) -> bool { self.0.is_nonnullish() }
    fn is_truthy(&self) -> bool { self.0.is_truthy() }
    fn or_default(&self, default: Value) -> Value { self.0.or_default(default) }
    fn is_number(&self) -> bool { self.0.is_number() }
    fn is_string(&self) -> bool { self.0.is_string() }
    fn is_object(&self) -> bool { self.0.is_object() }
    fn is_falsy(&self) -> bool { self.0.is_falsy() }
    fn to_upper_case(&self) -> Value { self.0.to_upper_case() }
    fn unwrap_str(&self) -> &str { self.0.unwrap_str() }
    fn unwrap_usize(&self) -> usize { self.0.unwrap_usize() }
    fn unwrap_bool(&self) -> bool { self.0.unwrap_bool() }
    fn unwrap_precise(&self) -> &Precise { self.0.unwrap_precise() }
    fn unwrap_json(&self) -> &serde_json::Value { self.0.unwrap_json() }
    fn unwrap_json_mut(&mut self) -> &mut serde_json::Value { self.0.unwrap_json_mut() }
    fn unwrap_precise_mut(&mut self) -> &mut Precise { self.0.unwrap_precise_mut() }
    fn len(&self) -> usize { self.0.len() }
    fn get(&self, key: Value) -> Value { self.0.get(key) }
    fn set(&mut self, key: Value, value: Value) { self.0.set(key, value) }
    fn push(&mut self, value: Value) { self.0.push(value) }
    fn split(&self, separator: Value) -> Value { self.0.split(separator) }
    fn contains_key(&self, key: Value) -> bool { self.0.contains_key(key) }
    fn keys(&self) -> Vec<Value> { self.0.keys() }
    fn values(&self) -> Vec<Value> { self.0.values() }
    fn to_array(&self, x: Value) -> Value { self.0.to_array(x) }
    fn index_of(&self, x: Value) -> Value { self.0.index_of(x) }
    fn join(&self, glue: Value) -> Value { self.0.join(glue) }
    fn to_string(&self) -> Value { self.0.to_string() }
    fn typeof_(&self) -> Value { self.0.typeof_() }
    fn slice(&self, start: Value) -> Value { self.0.slice(start) }
}

impl FtxImpl {
    pub fn new(params: Value) -> Self {
        let mut rv = FtxImpl(match params {
            Value::Json(_) => params,
            _ => Value::new_object()
        });
        ExchangeImpl::init(&mut rv.0);

        let config_entries = Ftx::describe(&rv);
        for k in config_entries.keys() {
            rv.set(k.clone(), config_entries.get(k).clone());
        }
        rv
    }
}

