#![allow(clippy::all)]
#![allow(dead_code)]
#![allow(unreachable_code)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(unused_comparisons)]
#![allow(unused_mut)]
#![allow(unused_variables)]

use async_trait::async_trait;
use std::str::FromStr;
use serde::{Deserialize, Serialize};
use serde_json::json;
use crate::exchange::{Exchange, ExchangeImpl, Precise, Value, ValueTrait, JSON, Array, Object, Math, parse_int, shift_2, extend_2, normalize};

use crate::exchange::{PRECISE_BASE, TRUNCATE, ROUND, ROUND_UP, ROUND_DOWN};
use crate::exchange::{DECIMAL_PLACES, SIGNIFICANT_DIGITS, TICK_SIZE, NO_PADDING, PAD_WITH_ZERO};

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

#[async_trait]
pub trait Bittrex : Exchange {
    fn describe(&self) -> Value {
        Value::Json(serde_json::Value::from_str(r###"{
            "id": "bittrex",
            "name": "Bittrex",
            "countries": [
                "US"
            ],
            "enableRateLimit": true,
            "rateLimit": 1500,
            "certified": false,
            "pro": true,
            "alias": false,
            "has": {
                "publicAPI": true,
                "privateAPI": true,
                "spot": true,
                "margin": false,
                "swap": false,
                "future": false,
                "option": false,
                "addMargin": false,
                "cancelAllOrders": true,
                "cancelOrder": true,
                "createDepositAddress": true,
                "createLimitOrder": true,
                "createMarketOrder": true,
                "createOrder": true,
                "createReduceOnlyOrder": false,
                "createStopOrder": true,
                "createStopLimitOrder": true,
                "createStopMarketOrder": true,
                "editOrder": "emulated",
                "fetchBalance": true,
                "fetchBidsAsks": true,
                "fetchBorrowRate": false,
                "fetchBorrowRateHistory": false,
                "fetchBorrowRatesPerSymbol": false,
                "fetchBorrowRates": false,
                "fetchClosedOrders": true,
                "fetchCurrencies": true,
                "fetchDeposit": true,
                "fetchDepositAddress": true,
                "fetchDeposits": true,
                "fetchFundingHistory": false,
                "fetchFundingRate": false,
                "fetchFundingRateHistory": false,
                "fetchFundingRates": false,
                "fetchIndexOHLCV": false,
                "fetchL2OrderBook": true,
                "fetchLeverageTiers": false,
                "fetchMarkets": true,
                "fetchMarkOHLCV": false,
                "fetchMyTrades": true,
                "fetchOHLCV": true,
                "fetchOpenOrders": true,
                "fetchOrder": true,
                "fetchOrderBook": true,
                "fetchOrderTrades": true,
                "fetchPosition": false,
                "fetchPositions": false,
                "fetchPositionsRisk": false,
                "fetchPremiumIndexOHLCV": false,
                "fetchStatus": "emulated",
                "fetchTicker": true,
                "fetchTickers": true,
                "fetchTime": true,
                "fetchTrades": true,
                "fetchTradingFee": true,
                "fetchTradingFees": true,
                "fetchWithdrawal": true,
                "fetchWithdrawals": true,
                "reduceMargin": false,
                "setLeverage": false,
                "setMarginMode": false,
                "setPositionMode": false,
                "withdraw": true,
                "fetchBorrowRateHistories": false,
                "fetchLeverage": false,
                "fetchMarginMode": false,
                "fetchOpenInterestHistory": false,
                "fetchPositionMode": false
            },
            "urls": {
                "logo": "https://user-images.githubusercontent.com/51840849/87153921-edf53180-c2c0-11ea-96b9-f2a9a95a455b.jpg",
                "api": {
                    "public": "https://api.bittrex.com",
                    "private": "https://api.bittrex.com"
                },
                "www": "https://bittrex.com",
                "doc": [
                    "https://bittrex.github.io/api/v3"
                ],
                "fees": [
                    "https://bittrex.zendesk.com/hc/en-us/articles/115003684371-BITTREX-SERVICE-FEES-AND-WITHDRAWAL-LIMITATIONS",
                    "https://bittrex.zendesk.com/hc/en-us/articles/115000199651-What-fees-does-Bittrex-charge-"
                ],
                "referral": "https://bittrex.com/Account/Register?referralCode=1ZE-G0G-M3B"
            },
            "api": {
                "public": {
                    "get": [
                        "ping",
                        "currencies",
                        "currencies/{symbol}",
                        "markets",
                        "markets/tickers",
                        "markets/summaries",
                        "markets/{marketSymbol}",
                        "markets/{marketSymbol}/summary",
                        "markets/{marketSymbol}/orderbook",
                        "markets/{marketSymbol}/trades",
                        "markets/{marketSymbol}/ticker",
                        "markets/{marketSymbol}/candles/{candleInterval}/recent",
                        "markets/{marketSymbol}/candles/{candleInterval}/historical/{year}/{month}/{day}",
                        "markets/{marketSymbol}/candles/{candleInterval}/historical/{year}/{month}",
                        "markets/{marketSymbol}/candles/{candleInterval}/historical/{year}"
                    ]
                },
                "private": {
                    "get": [
                        "account",
                        "account/fees/fiat",
                        "account/fees/fiat/{currencySymbol}",
                        "account/fees/trading",
                        "account/fees/trading/{marketSymbol}",
                        "account/volume",
                        "addresses",
                        "addresses/{currencySymbol}",
                        "balances",
                        "balances/{currencySymbol}",
                        "deposits/open",
                        "deposits/closed",
                        "deposits/ByTxId/{txId}",
                        "deposits/{depositId}",
                        "executions",
                        "orders/closed",
                        "orders/open",
                        "orders/{orderId}",
                        "orders/{orderId}/executions",
                        "ping",
                        "subaccounts/{subaccountId}",
                        "subaccounts",
                        "withdrawals/open",
                        "withdrawals/closed",
                        "withdrawals/ByTxId/{txId}",
                        "withdrawals/{withdrawalId}",
                        "withdrawals/whitelistAddresses",
                        "conditional-orders/{conditionalOrderId}",
                        "conditional-orders/closed",
                        "conditional-orders/open",
                        "transfers/sent",
                        "transfers/received",
                        "transfers/{transferId}"
                    ],
                    "post": [
                        "addresses",
                        "orders",
                        "subaccounts",
                        "withdrawals",
                        "conditional-orders",
                        "transfers"
                    ],
                    "delete": [
                        "orders/open",
                        "orders/{orderId}",
                        "withdrawals/{withdrawalId}",
                        "conditional-orders/{conditionalOrderId}"
                    ]
                }
            },
            "requiredCredentials": {
                "apiKey": true,
                "secret": true,
                "uid": false,
                "login": false,
                "password": false,
                "twofa": false,
                "privateKey": false,
                "walletAddress": false,
                "token": false
            },
            "currencies": {},
            "timeframes": {
                "1m": "MINUTE_1",
                "5m": "MINUTE_5",
                "1h": "HOUR_1",
                "1d": "DAY_1"
            },
            "fees": {
                "trading": {
                    "tierBased": true,
                    "percentage": true,
                    "taker": 0.0075,
                    "maker": 0.0075
                },
                "funding": {
                    "tierBased": false,
                    "percentage": false,
                    "withdraw": {},
                    "deposit": {}
                }
            },
            "status": {
                "status": "ok"
            },
            "exceptions": {
                "exact": {},
                "broad": {}
            },
            "httpExceptions": {},
            "commonCurrencies": {
                "XBT": "BTC",
                "BCC": "BCH",
                "BCHABC": "BCH",
                "BCHSV": "BSV",
                "BIFI": "Bifrost Finance",
                "BTR": "BTRIPS",
                "GMT": "GMT Token",
                "MEME": "Memetic",
                "MER": "Mercury",
                "PROS": "Pros.Finance",
                "REPV2": "REP",
                "TON": "Tokamak Network"
            },
            "precisionMode": 2,
            "paddingMode": 0,
            "limits": {
                "leverage": {},
                "amount": {},
                "price": {},
                "cost": {}
            },
            "version": "v3",
            "hostname": "bittrex.com",
            "options": {
                "fetchTicker": {
                    "method": "publicGetMarketsMarketSymbolTicker"
                },
                "fetchTickers": {
                    "method": "publicGetMarketsTickers"
                },
                "fetchDeposits": {
                    "status": "ok"
                },
                "fetchWithdrawals": {
                    "status": "ok"
                },
                "parseOrderStatus": false,
                "hasAlreadyAuthenticatedSuccessfully": false,
                "tag": {
                    "NXT": true,
                    "CRYPTO_NOTE_PAYMENTID": true,
                    "BITSHAREX": true,
                    "RIPPLE": true,
                    "NEM": true,
                    "STELLAR": true,
                    "STEEM": true
                },
                "fetchClosedOrdersFilterBySince": true
            }
        }"###).unwrap())
    }

    fn fee_to_precision(&mut self, mut symbol: Value, mut fee: Value) -> Value {
        return self.decimal_to_precision(fee.clone(), TRUNCATE.into(), self.get("markets".into()).get(symbol.clone()).get(Value::from("precision")).get(Value::from("price")), self.get("precision_mode".into()), Value::Undefined);
    }

    /// Returns an array of objects representing market data
    ///
    /// Retrieves data on all markets for bittrex
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    async fn fetch_markets(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut response: Value = Bittrex::dispatch(self, "publicGetMarkets".into(), params.clone(), Value::Undefined).await;
        //
        //     [
        //         {
        //             "symbol":"LTC-BTC",
        //             "baseCurrencySymbol":"LTC",
        //             "quoteCurrencySymbol":"BTC",
        //             "minTradeSize":"0.01686767",
        //             "precision":8,
        //             "status":"ONLINE", // "OFFLINE"
        //             "createdAt":"2014-02-13T00:00:00Z"
        //         },
        //         {
        //             "symbol":"VDX-USDT",
        //             "baseCurrencySymbol":"VDX",
        //             "quoteCurrencySymbol":"USDT",
        //             "minTradeSize":"300.00000000",
        //             "precision":8,
        //             "status":"ONLINE", // "OFFLINE"
        //             "createdAt":"2019-05-23T00:41:21.843Z",
        //             "notice":"USDT has swapped to an ERC20-based token as of August 5, 2019."
        //         }
        //     ]
        //
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < response.len() {
            let mut market: Value = response.get(i.into());
            let mut base_id: Value = self.safe_string(market.clone(), Value::from("baseCurrencySymbol"), Value::Undefined);
            let mut quote_id: Value = self.safe_string(market.clone(), Value::from("quoteCurrencySymbol"), Value::Undefined);
            let mut base: Value = Bittrex::safe_currency_code(self, base_id.clone(), Value::Undefined);
            let mut quote: Value = Bittrex::safe_currency_code(self, quote_id.clone(), Value::Undefined);
            let mut status: Value = self.safe_string(market.clone(), Value::from("status"), Value::Undefined);
            result.push(Value::Json(normalize(&Value::Json(json!({
                "id": self.safe_string(market.clone(), Value::from("symbol"), Value::Undefined),
                "symbol": base.clone() + Value::from("/") + quote.clone(),
                "base": base,
                "quote": quote,
                "settle": Value::Undefined,
                "baseId": base_id,
                "quoteId": quote_id,
                "settleId": Value::Undefined,
                "type": "spot",
                "spot": true,
                "margin": false,
                "swap": false,
                "future": false,
                "option": false,
                "active": status.clone() == Value::from("ONLINE"),
                "contract": false,
                "linear": Value::Undefined,
                "inverse": Value::Undefined,
                "contractSize": Value::Undefined,
                "expiry": Value::Undefined,
                "expiryDatetime": Value::Undefined,
                "strike": Value::Undefined,
                "optionType": Value::Undefined,
                "precision": Value::Json(normalize(&Value::Json(json!({
                    "amount": self.parse_number(Value::from("0.00000001"), Value::Undefined),
                    "price": self.parse_number(Bittrex::parse_precision(self, self.safe_string(market.clone(), Value::from("precision"), Value::from("8"))), Value::Undefined)
                }))).unwrap()),
                "limits": Value::Json(normalize(&Value::Json(json!({
                    "leverage": Value::Json(normalize(&Value::Json(json!({
                        "min": Value::Undefined,
                        "max": Value::Undefined
                    }))).unwrap()),
                    "amount": Value::Json(normalize(&Value::Json(json!({
                        "min": Bittrex::safe_number(self, market.clone(), Value::from("minTradeSize"), Value::Undefined),
                        "max": Value::Undefined
                    }))).unwrap()),
                    "price": Value::Json(normalize(&Value::Json(json!({
                        "min": Value::Undefined,
                        "max": Value::Undefined
                    }))).unwrap()),
                    "cost": Value::Json(normalize(&Value::Json(json!({
                        "min": Value::Undefined,
                        "max": Value::Undefined
                    }))).unwrap())
                }))).unwrap()),
                "info": market
            }))).unwrap()));
            i += 1;
        };
        return result.clone();
    }

    fn parse_balance(&self, mut response: Value) -> Value {
        let mut result: Value = Value::Json(normalize(&Value::Json(json!({
            "info": response
        }))).unwrap());
        let mut indexed: Value = self.index_by(response.clone(), Value::from("currencySymbol"), Value::Undefined);
        let mut currency_ids: Value = Object::keys(indexed.clone());
        let mut i: usize = 0;
        while i < currency_ids.len() {
            let mut currency_id: Value = currency_ids.get(i.into());
            let mut code: Value = Bittrex::safe_currency_code(self, currency_id.clone(), Value::Undefined);
            let mut account: Value = Bittrex::account(self);
            let mut balance: Value = indexed.get(currency_id.clone());
            account.set("free".into(), self.safe_string(balance.clone(), Value::from("available"), Value::Undefined));
            account.set("total".into(), self.safe_string(balance.clone(), Value::from("total"), Value::Undefined));
            result.set(code.clone(), account.clone());
            i += 1;
        };
        return Bittrex::safe_balance(self, result.clone());
    }

    /// Returns a [balance structure](https://docs.ccxt.com/en/latest/manual.html?#balance-structure)
    ///
    /// Query for balance and get the amount of funds available for trading or funds locked in orders
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut response: Value = Bittrex::dispatch(self, "privateGetBalances".into(), params.clone(), Value::Undefined).await;
        return Bittrex::parse_balance(self, response.clone());
    }

    /// Returns a dictionary of [order book structures](https://docs.ccxt.com/en/latest/manual.html#order-book-structure) indexed by market symbols
    ///
    /// Fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch the order book for
    /// * `limit` {int|undefined} - the maximum amount of order book entries to return
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_order_book(&mut self, mut symbol: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Bittrex::market(self, symbol.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "marketSymbol": market.get(Value::from("id"))
        }))).unwrap());
        if limit.clone().is_nonnullish() {
            if limit.clone() != Value::from(1) && limit.clone() != Value::from(25) && limit.clone() != Value::from(500) {
                panic!(r###"BadRequest::new(self.get("id".into()) + Value::from(" fetchOrderBook() limit argument must be undefined, 1, 25 or 500, default is 25"))"###);
            };
            request.set("depth".into(), limit.clone());
        };
        let mut response: Value = Bittrex::dispatch(self, "publicGetMarketsMarketSymbolOrderbook".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "bid":[
        //             {"quantity":"0.01250000","rate":"10718.56200003"},
        //             {"quantity":"0.10000000","rate":"10718.56200002"},
        //             {"quantity":"0.39648292","rate":"10718.56200001"},
        //         ],
        //         "ask":[
        //             {"quantity":"0.05100000","rate":"10724.30099631"},
        //             {"quantity":"0.10000000","rate":"10724.30099632"},
        //             {"quantity":"0.26000000","rate":"10724.30099634"},
        //         ]
        //     }
        //
        let mut sequence: Value = self.safe_integer(self.get("last_response_headers".into()), Value::from("Sequence"), Value::Undefined);
        let mut orderbook: Value = Bittrex::parse_order_book(self, response.clone(), market.get(Value::from("symbol")), Value::Undefined, Value::from("bid"), Value::from("ask"), Value::from("rate"), Value::from("quantity"));
        orderbook.set("nonce".into(), sequence.clone());
        return orderbook.clone();
    }

    /// Returns an associative dictionary of currencies
    ///
    /// Fetches all available currencies on an exchange
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_currencies(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut response: Value = Bittrex::dispatch(self, "publicGetCurrencies".into(), params.clone(), Value::Undefined).await;
        //
        //     [
        //         {
        //             "symbol":"1ST",
        //             "name":"Firstblood",
        //             "coinType":"ETH_CONTRACT",
        //             "status":"ONLINE",
        //             "minConfirmations":36,
        //             "notice":"",
        //             "txFee":"4.50000000",
        //             "logoUrl":"https://bittrexblobstorage.blob.core.windows.net/public/5685a7be-1edf-4ba0-a313-b5309bb204f8.png",
        //             "prohibitedIn":[],
        //             "baseAddress":"0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98",
        //             "associatedTermsOfService":[]
        //         }
        //     ]
        //
        let mut result: Value = Value::new_object();
        let mut i: usize = 0;
        while i < response.len() {
            let mut currency: Value = response.get(i.into());
            let mut id: Value = self.safe_string(currency.clone(), Value::from("symbol"), Value::Undefined);
            let mut code: Value = Bittrex::safe_currency_code(self, id.clone(), Value::Undefined);
            let mut precision: Value = self.parse_number(Value::from("0.00000001"), Value::Undefined);
            // default precision, todo: fix "magic constants"
            let mut fee: Value = Bittrex::safe_number(self, currency.clone(), Value::from("txFee"), Value::Undefined);
            // todo: redesign
            let mut is_active: Value = self.safe_string(currency.clone(), Value::from("status"), Value::Undefined);
            result.set(code.clone(), Value::Json(normalize(&Value::Json(json!({
                "id": id,
                "code": code,
                "address": self.safe_string(currency.clone(), Value::from("baseAddress"), Value::Undefined),
                "info": currency,
                "type": self.safe_string(currency.clone(), Value::from("coinType"), Value::Undefined),
                "name": self.safe_string(currency.clone(), Value::from("name"), Value::Undefined),
                "active": is_active.clone() == Value::from("ONLINE"),
                "deposit": Value::Undefined,
                "withdraw": Value::Undefined,
                "fee": fee,
                "precision": precision,
                "limits": Value::Json(normalize(&Value::Json(json!({
                    "amount": Value::Json(normalize(&Value::Json(json!({
                        "min": precision,
                        "max": Value::Undefined
                    }))).unwrap()),
                    "withdraw": Value::Json(normalize(&Value::Json(json!({
                        "min": fee,
                        "max": Value::Undefined
                    }))).unwrap())
                }))).unwrap())
            }))).unwrap()));
            i += 1;
        };
        return result.clone();
    }

    fn parse_ticker(&self, mut ticker: Value, mut market: Value) -> Value {
        //
        // ticker
        //
        //     {
        //         "symbol":"ETH-BTC",
        //         "lastTradeRate":"0.03284496",
        //         "bidRate":"0.03284523",
        //         "askRate":"0.03286857"
        //     }
        //
        // summary
        //
        //     {
        //         "symbol":"ETH-BTC",
        //         "high":"0.03369528",
        //         "low":"0.03282442",
        //         "volume":"4307.83794556",
        //         "quoteVolume":"143.08608869",
        //         "percentChange":"0.79",
        //         "updatedAt":"2020-09-29T07:36:57.823Z"
        //     }
        //
        let mut timestamp: Value = self.parse8601(self.safe_string(ticker.clone(), Value::from("updatedAt"), Value::Undefined));
        let mut market_id: Value = self.safe_string(ticker.clone(), Value::from("symbol"), Value::Undefined);
        market = Bittrex::safe_market(self, market_id.clone(), market.clone(), Value::from("-"));
        let mut symbol: Value = market.get(Value::from("symbol"));
        let mut percentage: Value = self.safe_string(ticker.clone(), Value::from("percentChange"), Value::Undefined);
        let mut last: Value = self.safe_string(ticker.clone(), Value::from("lastTradeRate"), Value::Undefined);
        return Bittrex::safe_ticker(self, Value::Json(normalize(&Value::Json(json!({
            "symbol": symbol,
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "high": self.safe_string(ticker.clone(), Value::from("high"), Value::Undefined),
            "low": self.safe_string(ticker.clone(), Value::from("low"), Value::Undefined),
            "bid": self.safe_string(ticker.clone(), Value::from("bidRate"), Value::Undefined),
            "bidVolume": Value::Undefined,
            "ask": self.safe_string(ticker.clone(), Value::from("askRate"), Value::Undefined),
            "askVolume": Value::Undefined,
            "vwap": Value::Undefined,
            "open": Value::Undefined,
            "close": last,
            "last": last,
            "previousClose": Value::Undefined,
            "change": Value::Undefined,
            "percentage": percentage,
            "average": Value::Undefined,
            "baseVolume": self.safe_string(ticker.clone(), Value::from("volume"), Value::Undefined),
            "quoteVolume": self.safe_string(ticker.clone(), Value::from("quoteVolume"), Value::Undefined),
            "info": ticker
        }))).unwrap()), market.clone());
    }

    /// Returns an array of [ticker structures](https://docs.ccxt.com/en/latest/manual.html#ticker-structure)
    ///
    /// Fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
    ///
    /// # Arguments
    ///
    /// * `symbols` {[string]|undefined} - unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_tickers(&mut self, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        symbols = Bittrex::market_symbols(self, symbols.clone());
        let mut options: Value = self.safe_value(self.get("options".into()), Value::from("fetchTickers"), Value::new_object());
        let mut default_method: Value = self.safe_string(options.clone(), Value::from("method"), Value::from("publicGetMarketsTickers"));
        let mut method: Value = self.safe_string(params.clone(), Value::from("method"), default_method.clone());
        params = self.omit(params.clone(), Value::from("method"));
        let mut response: Value = Bittrex::dispatch(self, method, params.clone(), Value::Undefined).await;
        //
        // publicGetMarketsTickers
        //
        //     [
        //         {
        //             "symbol":"4ART-BTC",
        //             "lastTradeRate":"0.00000210",
        //             "bidRate":"0.00000210",
        //             "askRate":"0.00000215"
        //         }
        //     ]
        //
        // publicGetMarketsSummaries
        //
        //     [
        //         {
        //             "symbol":"4ART-BTC",
        //             "high":"0.00000206",
        //             "low":"0.00000196",
        //             "volume":"14871.32000233",
        //             "quoteVolume":"0.02932756",
        //             "percentChange":"1.48",
        //             "updatedAt":"2020-09-29T07:34:32.757Z"
        //         }
        //     ]
        //
        let mut tickers: Value = Value::new_array();
        let mut i: usize = 0;
        while i < response.len() {
            let mut ticker: Value = Bittrex::parse_ticker(self, response.get(i.into()), Value::Undefined);
            tickers.push(ticker.clone());
            i += 1;
        };
        return Bittrex::filter_by_array(self, tickers.clone(), Value::from("symbol"), symbols.clone(), Value::Undefined);
    }

    /// Returns a [ticker structure](https://docs.ccxt.com/en/latest/manual.html#ticker-structure)
    ///
    /// Fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch the ticker for
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_ticker(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Bittrex::market(self, symbol.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "marketSymbol": market.get(Value::from("id"))
        }))).unwrap());
        let mut options: Value = self.safe_value(self.get("options".into()), Value::from("fetchTicker"), Value::new_object());
        let mut default_method: Value = self.safe_string(options.clone(), Value::from("method"), Value::from("publicGetMarketsMarketSymbolTicker"));
        let mut method: Value = self.safe_string(params.clone(), Value::from("method"), default_method.clone());
        params = self.omit(params.clone(), Value::from("method"));
        let mut response: Value = Bittrex::dispatch(self, method, extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        // publicGetMarketsMarketSymbolTicker
        //
        //     {
        //         "symbol":"ETH-BTC",
        //         "lastTradeRate":"0.03284496",
        //         "bidRate":"0.03284523",
        //         "askRate":"0.03286857"
        //     }
        //
        //
        // publicGetMarketsMarketSymbolSummary
        //
        //     {
        //         "symbol":"ETH-BTC",
        //         "high":"0.03369528",
        //         "low":"0.03282442",
        //         "volume":"4307.83794556",
        //         "quoteVolume":"143.08608869",
        //         "percentChange":"0.79",
        //         "updatedAt":"2020-09-29T07:36:57.823Z"
        //     }
        //
        return Bittrex::parse_ticker(self, response.clone(), market.clone());
    }

    /// Returns an array of [ticker structures](https://docs.ccxt.com/en/latest/manual.html#ticker-structure)
    ///
    /// Fetches the bid and ask price and volume for multiple markets
    ///
    /// # Arguments
    ///
    /// * `symbols` {[string]|undefined} - unified symbols of the markets to fetch the bids and asks for, all markets are returned if not assigned
    /// * `params` {object} - extra parameters specific to the binance api endpoint
    async fn fetch_bids_asks(&mut self, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut response: Value = Bittrex::dispatch(self, "publicGetMarketsTickers".into(), params.clone(), Value::Undefined).await;
        //
        //     [
        //       {
        //         "symbol":"ETH-BTC",
        //         "lastTradeRate":"0.03284496",
        //         "bidRate":"0.03284523",
        //         "askRate":"0.03286857"
        //       }
        //     ]
        //
        return Bittrex::parse_tickers(self, response.clone(), symbols.clone(), Value::Undefined);
    }

    fn parse_trade(&mut self, mut trade: Value, mut market: Value) -> Value {
        //
        // public fetchTrades
        //
        //      {
        //          "id": "8a614d4e-e455-45b0-9aac-502b0aeb433f",
        //          "executedAt": "2021-11-25T14:54:44.65Z",
        //          "quantity": "30.00000000",
        //          "rate": "1.72923112",
        //          "takerSide": "SELL"
        //      }
        //
        // private fetchOrderTrades
        //      {
        //          "id": "8a614d4e-e455-45b0-9aac-502b0aeb433f",
        //          "marketSymbol": "ADA-USDT",
        //          "executedAt": "2021-11-25T14:54:44.65Z",
        //          "quantity": "30.00000000",
        //          "rate": "1.72923112",
        //          "orderId": "6f7abf18-6901-4659-a48c-db0e88440ea4",
        //          "commission": "0.38907700",
        //          "isTaker":  true
        //      }
        //
        let mut timestamp: Value = self.parse8601(self.safe_string(trade.clone(), Value::from("executedAt"), Value::Undefined));
        let mut id: Value = self.safe_string(trade.clone(), Value::from("id"), Value::Undefined);
        let mut order: Value = self.safe_string(trade.clone(), Value::from("orderId"), Value::Undefined);
        let mut market_id: Value = self.safe_string(trade.clone(), Value::from("marketSymbol"), Value::Undefined);
        market = Bittrex::safe_market(self, market_id.clone(), market.clone(), Value::from("-"));
        let mut price_string: Value = self.safe_string(trade.clone(), Value::from("rate"), Value::Undefined);
        let mut amount_string: Value = self.safe_string(trade.clone(), Value::from("quantity"), Value::Undefined);
        let mut taker_or_maker: Value = Value::Undefined;
        let mut is_taker: Value = self.safe_value(trade.clone(), Value::from("isTaker"), Value::Undefined);
        if is_taker.clone().is_nonnullish() {
            taker_or_maker = if is_taker.is_truthy() { Value::from("taker") } else { Value::from("maker") };
        };
        let mut fee: Value = Value::Undefined;
        let mut fee_cost_string: Value = self.safe_string(trade.clone(), Value::from("commission"), Value::Undefined);
        if fee_cost_string.clone().is_nonnullish() {
            fee = Value::Json(normalize(&Value::Json(json!({
                "cost": fee_cost_string,
                "currency": market.get(Value::from("quote"))
            }))).unwrap());
        };
        let mut side: Value = self.safe_string_lower(trade.clone(), Value::from("takerSide"), Value::Undefined);
        return Bittrex::safe_trade(self, Value::Json(normalize(&Value::Json(json!({
            "info": trade,
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "symbol": market.get(Value::from("symbol")),
            "id": id,
            "order": order,
            "takerOrMaker": taker_or_maker,
            "type": Value::Undefined,
            "side": side,
            "price": price_string,
            "amount": amount_string,
            "cost": Value::Undefined,
            "fee": fee
        }))).unwrap()), market.clone());
    }

    /// Returns the current integer timestamp in milliseconds from the exchange server
    ///
    /// Fetches the current integer timestamp in milliseconds from the exchange server
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_time(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut response: Value = Bittrex::dispatch(self, "publicGetPing".into(), params.clone(), Value::Undefined).await;
        //
        //     {
        //         "serverTime": 1594596023162
        //     }
        //
        return self.safe_integer(response.clone(), Value::from("serverTime"), Value::Undefined);
    }

    /// Returns a list of [trade structures](https://docs.ccxt.com/en/latest/manual.html?#public-trades)
    ///
    /// Get the list of most recent trades for a particular symbol
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch trades for
    /// * `since` {int|undefined} - timestamp in ms of the earliest trade to fetch
    /// * `limit` {int|undefined} - the maximum amount of trades to fetch
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_trades(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Bittrex::market(self, symbol.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "marketSymbol": market.get(Value::from("id"))
        }))).unwrap());
        let mut response: Value = Bittrex::dispatch(self, "publicGetMarketsMarketSymbolTrades".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     [
        //         {
        //             "id":"9c5589db-42fb-436c-b105-5e2edcb95673",
        //             "executedAt":"2020-10-03T11:48:43.38Z",
        //             "quantity":"0.17939626",
        //             "rate":"0.03297952",
        //             "takerSide":"BUY"
        //         }
        //     ]
        //
        return Bittrex::parse_trades(self, response.clone(), market.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    /// Returns a [fee structure](https://docs.ccxt.com/en/latest/manual.html#fee-structure)
    ///
    /// Fetch the trading fees for a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified market symbol
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_trading_fee(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Bittrex::market(self, symbol.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "marketSymbol": market.get(Value::from("id"))
        }))).unwrap());
        let mut response: Value = Bittrex::dispatch(self, "privateGetAccountFeesTradingMarketSymbol".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "marketSymbol":"1INCH-ETH",
        //         "makerRate":"0.00750000",
        //         "takerRate":"0.00750000"
        //     }
        //
        return Bittrex::parse_trading_fee(self, response.clone(), market.clone());
    }

    /// Returns a dictionary of [fee structures](https://docs.ccxt.com/en/latest/manual.html#fee-structure) indexed by market symbols
    ///
    /// Fetch the trading fees for multiple markets
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_trading_fees(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut response: Value = Bittrex::dispatch(self, "privateGetAccountFeesTrading".into(), params.clone(), Value::Undefined).await;
        //
        //     [
        //         {"marketSymbol":"1ECO-BTC","makerRate":"0.00750000","takerRate":"0.00750000"},
        //         {"marketSymbol":"1ECO-USDT","makerRate":"0.00750000","takerRate":"0.00750000"},
        //         {"marketSymbol":"1INCH-BTC","makerRate":"0.00750000","takerRate":"0.00750000"},
        //         {"marketSymbol":"1INCH-ETH","makerRate":"0.00750000","takerRate":"0.00750000"},
        //         {"marketSymbol":"1INCH-USD","makerRate":"0.00750000","takerRate":"0.00750000"},
        //     ]
        //
        return Bittrex::parse_trading_fees(self, response.clone());
    }

    fn parse_trading_fee(&self, mut fee: Value, mut market: Value) -> Value {
        let mut market_id: Value = self.safe_string(fee.clone(), Value::from("marketSymbol"), Value::Undefined);
        let mut maker: Value = Bittrex::safe_number(self, fee.clone(), Value::from("makerRate"), Value::Undefined);
        let mut taker: Value = Bittrex::safe_number(self, fee.clone(), Value::from("takerRate"), Value::Undefined);
        return Value::Json(normalize(&Value::Json(json!({
            "info": fee,
            "symbol": Bittrex::safe_symbol(self, market_id.clone(), market.clone(), Value::Undefined),
            "maker": maker,
            "taker": taker
        }))).unwrap());
    }

    fn parse_trading_fees(&self, mut fees: Value) -> Value {
        let mut result: Value = Value::Json(normalize(&Value::Json(json!({
            "info": fees
        }))).unwrap());
        let mut i: usize = 0;
        while i < fees.len() {
            let mut fee: Value = Bittrex::parse_trading_fee(self, fees.get(i.into()), Value::Undefined);
            let mut symbol: Value = fee.get(Value::from("symbol"));
            result.set(symbol.clone(), fee.clone());
            i += 1;
        };
        return result.clone();
    }

    fn parse_ohlcv(&self, mut ohlcv: Value, mut market: Value) -> Value {
        //
        //     {
        //         "startsAt":"2020-06-12T02:35:00Z",
        //         "open":"0.02493753",
        //         "high":"0.02493753",
        //         "low":"0.02493753",
        //         "close":"0.02493753",
        //         "volume":"0.09590123",
        //         "quoteVolume":"0.00239153"
        //     }
        //
        return Value::Json(serde_json::Value::Array(vec![self.parse8601(self.safe_string(ohlcv.clone(), Value::from("startsAt"), Value::Undefined)).into(), Bittrex::safe_number(self, ohlcv.clone(), Value::from("open"), Value::Undefined).into(), Bittrex::safe_number(self, ohlcv.clone(), Value::from("high"), Value::Undefined).into(), Bittrex::safe_number(self, ohlcv.clone(), Value::from("low"), Value::Undefined).into(), Bittrex::safe_number(self, ohlcv.clone(), Value::from("close"), Value::Undefined).into(), Bittrex::safe_number(self, ohlcv.clone(), Value::from("volume"), Value::Undefined).into()]));
    }

    /// Returns a list of candles ordered as timestamp, open, high, low, close, volume
    ///
    /// Fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch OHLCV data for
    /// * `timeframe` {string} - the length of time each candle represents
    /// * `since` {int|undefined} - timestamp in ms of the earliest candle to fetch
    /// * `limit` {int|undefined} - the maximum amount of candles to fetch
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Bittrex::market(self, symbol.clone());
        let mut reverse_id: Value = market.get(Value::from("baseId")) + Value::from("-") + market.get(Value::from("quoteId"));
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "candleInterval": self.get("timeframes".into()).get(timeframe.clone()),
            "marketSymbol": reverse_id
        }))).unwrap());
        let mut method: Value = Value::from("publicGetMarketsMarketSymbolCandlesCandleIntervalRecent");
        if since.clone().is_nonnullish() {
            let mut now: Value = self.milliseconds();
            let mut difference: Value = Math::abs(now.clone() - since.clone());
            let mut since_date: Value = self.yyyymmdd(since.clone(), Value::Undefined);
            let mut parts: Value = since_date.split(Value::from("-"));
            let mut since_year: Value = self.safe_integer(parts.clone(), Value::from(0), Value::Undefined);
            let mut since_month: Value = self.safe_integer(parts.clone(), Value::from(1), Value::Undefined);
            let mut since_day: Value = self.safe_integer(parts.clone(), Value::from(2), Value::Undefined);
            if timeframe.clone() == Value::from("1d") {
                // if the since argument is beyond one year into the past
                if difference.clone() > Value::from(31622400000i64) {
                    method = Value::from("publicGetMarketsMarketSymbolCandlesCandleIntervalHistoricalYear");
                    request.set("year".into(), since_year.clone());
                };
            } else if timeframe.clone() == Value::from("1h") {
                // request['year'] = year;
                // if the since argument is beyond 31 days into the past
                if difference.clone() > Value::from(2678400000i64) {
                    method = Value::from("publicGetMarketsMarketSymbolCandlesCandleIntervalHistoricalYearMonth");
                    request.set("year".into(), since_year.clone());
                    request.set("month".into(), since_month.clone());
                };
            } else {
                // if the since argument is beyond 1 day into the past
                if difference.clone() > Value::from(86400000) {
                    method = Value::from("publicGetMarketsMarketSymbolCandlesCandleIntervalHistoricalYearMonthDay");
                    request.set("year".into(), since_year.clone());
                    request.set("month".into(), since_month.clone());
                    request.set("day".into(), since_day.clone());
                };
            };
        };
        let mut response: Value = Bittrex::dispatch(self, method, extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     [
        //         {"startsAt":"2020-06-12T02:35:00Z","open":"0.02493753","high":"0.02493753","low":"0.02493753","close":"0.02493753","volume":"0.09590123","quoteVolume":"0.00239153"},
        //         {"startsAt":"2020-06-12T02:40:00Z","open":"0.02491874","high":"0.02491874","low":"0.02490970","close":"0.02490970","volume":"0.04515695","quoteVolume":"0.00112505"},
        //         {"startsAt":"2020-06-12T02:45:00Z","open":"0.02490753","high":"0.02493143","low":"0.02490753","close":"0.02493143","volume":"0.17769640","quoteVolume":"0.00442663"}
        //     ]
        //
        return Bittrex::parse_ohlcvs(self, response.clone(), market.clone(), timeframe.clone(), since.clone(), limit.clone());
    }

    /// Returns a list of [order structures](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Fetch all unfilled currently open orders
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - unified market symbol
    /// * `since` {int|undefined} - the earliest time in ms to fetch open orders for
    /// * `limit` {int|undefined} - the maximum number of  open orders structures to retrieve
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_open_orders(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::new_object();
        let mut market: Value = Value::Undefined;
        let mut stop: Value = self.safe_value(params.clone(), Value::from("stop"), Value::Undefined);
        if symbol.clone().is_nonnullish() {
            market = Bittrex::market(self, symbol.clone());
            request.set("marketSymbol".into(), market.get(Value::from("id")));
        };
        let mut method: Value = Value::from("privateGetOrdersOpen");
        if stop.is_truthy() {
            method = Value::from("privateGetConditionalOrdersOpen");
        };
        let mut query: Value = self.omit(params.clone(), Value::from("stop"));
        let mut response: Value = Bittrex::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        //
        // Spot
        //
        //     [
        //         {
        //             "id": "df6cf5ee-fc27-4b61-991a-cc94b6459ac9",
        //             "marketSymbol": "BTC-USDT",
        //             "direction": "BUY",
        //             "type": "LIMIT",
        //             "quantity": "0.00023277",
        //             "limit": "30000.00000000",
        //             "timeInForce": "GOOD_TIL_CANCELLED",
        //             "fillQuantity": "0.00000000",
        //             "commission": "0.00000000",
        //             "proceeds": "0.00000000",
        //             "status": "OPEN",
        //             "createdAt": "2022-04-20T02:33:53.16Z",
        //             "updatedAt": "2022-04-20T02:33:53.16Z"
        //         }
        //     ]
        //
        // Stop
        //
        //     [
        //         {
        //             "id": "f64f7c4f-295c-408b-9cbc-601981abf100",
        //             "marketSymbol": "BTC-USDT",
        //             "operand": "LTE",
        //             "triggerPrice": "0.10000000",
        //             "orderToCreate": {
        //                 "marketSymbol": "BTC-USDT",
        //                 "direction": "BUY",
        //                 "type": "LIMIT",
        //                 "quantity": "0.00020000",
        //                 "limit": "30000.00000000",
        //                 "timeInForce": "GOOD_TIL_CANCELLED"
        //             },
        //             "status": "OPEN",
        //             "createdAt": "2022-04-20T02:38:12.26Z",
        //             "updatedAt": "2022-04-20T02:38:12.26Z"
        //         }
        //     ]
        //
        return Bittrex::parse_orders(self, response.clone(), market.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    /// Returns a list of [trade structures](https://docs.ccxt.com/en/latest/manual.html#trade-structure)
    ///
    /// Fetch all the trades made from a single order
    ///
    /// # Arguments
    ///
    /// * `id` {string} - order id
    /// * `symbol` {string|undefined} - unified market symbol
    /// * `since` {int|undefined} - the earliest time in ms to fetch trades for
    /// * `limit` {int|undefined} - the maximum number of trades to retrieve
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_order_trades(&mut self, mut id: Value, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "orderId": id
        }))).unwrap());
        let mut response: Value = Bittrex::dispatch(self, "privateGetOrdersOrderIdExecutions".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        let mut market: Value = Value::Undefined;
        if symbol.clone().is_nonnullish() {
            market = Bittrex::market(self, symbol.clone());
        };
        return Bittrex::parse_trades(self, response.clone(), market.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    /// Returns an [order structure](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Create a trade order
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to create an order in
    /// * `type` {string} - 'market' or 'limit'
    /// * `side` {string} - 'buy' or 'sell'
    /// * `amount` {float} - how much of currency you want to trade in units of base currency
    /// * `price` {float|undefined} - the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn create_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        // A ceiling order is a market or limit order that allows you to specify
        // the amount of quote currency you want to spend (or receive, if selling)
        // instead of the quantity of the market currency (e.g. buy $100 USD of BTC
        // at the current market BTC price)
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Bittrex::market(self, symbol.clone());
        let mut uppercase_type: Value = Value::Undefined;
        if r#type.clone().is_nonnullish() {
            uppercase_type = r#type.to_upper_case();
        };
        let mut reverse_id: Value = market.get(Value::from("baseId")) + Value::from("-") + market.get(Value::from("quoteId"));
        let mut stop: Value = self.safe_value(params.clone(), Value::from("stop"), Value::Undefined);
        let mut stop_price: Value = Bittrex::safe_number_2(self, params.clone(), Value::from("triggerPrice"), Value::from("stopPrice"), Value::Undefined);
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "marketSymbol": reverse_id
        }))).unwrap());
        // SPOT and STOP
        // 'direction': side.toUpperCase (), // SPOT, STOP 'orderToCreate'
        // 'type': uppercaseType, // SPOT: LIMIT, MARKET, CEILING_LIMIT, CEILING_MARKET
        // 'quantity': this.amountToPrecision (symbol, amount), // SPOT, required for limit orders, excluded for ceiling orders
        // 'ceiling': this.priceToPrecision (symbol, price), // SPOT, required for ceiling orders, excluded for non-ceiling orders
        // 'limit': this.priceToPrecision (symbol, price), // SPOT, required for limit orders, excluded for market orders
        // 'timeInForce': 'GOOD_TIL_CANCELLED', // SPOT, IMMEDIATE_OR_CANCEL, FILL_OR_KILL, POST_ONLY_GOOD_TIL_CANCELLED
        // 'useAwards': false, // SPOT, optional
        // 'operand': 'LTE', // STOP, price above (GTE) or below (LTE) which the conditional order will trigger. either this or trailingStopPercent must be specified.
        // 'triggerPrice': this.priceToPrecision (symbol, stopPrice), // STOP
        // 'trailingStopPercent': this.priceToPrecision (symbol, stopPrice), // STOP, either this or triggerPrice must be set
        // 'orderToCreate': {direction:side,type:uppercaseType}, // STOP, The spot order to be triggered
        // 'orderToCancel': {id:'f03d5e98-b5ac-48fb-8647-dd4db828a297',type:uppercaseType}, // STOP, The spot order to be canceled
        // 'clineConditionalOrderId': 'f03d5e98-b5ac-48fb-8647-dd4db828a297', // STOP
        let mut method: Value = Value::from("privatePostOrders");
        if stop.is_truthy() || stop_price.is_truthy() {
            method = Value::from("privatePostConditionalOrders");
            let mut operand: Value = self.safe_string(params.clone(), Value::from("operand"), Value::Undefined);
            if operand.clone().is_nullish() {
                panic!(r###"ArgumentsRequired::new(self.get("id".into()) + Value::from(" createOrder() requires an operand parameter"))"###);
            };
            let mut trailing_stop_percent: Value = Bittrex::safe_number(self, params.clone(), Value::from("trailingStopPercent"), Value::Undefined);
            let mut order_to_create: Value = self.safe_value(params.clone(), Value::from("orderToCreate"), Value::Undefined);
            let mut order_to_cancel: Value = self.safe_value(params.clone(), Value::from("orderToCancel"), Value::Undefined);
            if stop_price.clone().is_nullish() {
                request.set("trailingStopPercent".into(), Bittrex::price_to_precision(self, symbol.clone(), trailing_stop_percent.clone()));
            };
            if order_to_create.is_truthy() {
                let mut is_ceiling_limit: Value = (uppercase_type.clone() == Value::from("CEILING_LIMIT")).into();
                let mut is_ceiling_market: Value = (uppercase_type.clone() == Value::from("CEILING_MARKET")).into();
                let mut is_ceiling_order: Value = (is_ceiling_limit.is_truthy() || is_ceiling_market.is_truthy()).into();
                let mut ceiling: Value = Value::Undefined;
                let mut limit: Value = Value::Undefined;
                let mut time_in_force: Value = Value::Undefined;
                if is_ceiling_order.is_truthy() {
                    let mut cost: Value = Value::Undefined;
                    if is_ceiling_limit.is_truthy() {
                        limit = Bittrex::price_to_precision(self, symbol.clone(), price.clone());
                        cost = Bittrex::safe_number_2(self, params.clone(), Value::from("ceiling"), Value::from("cost"), amount.clone());
                    } else if is_ceiling_market.is_truthy() {
                        cost = Bittrex::safe_number_2(self, params.clone(), Value::from("ceiling"), Value::from("cost"), Value::Undefined);
                        if cost.clone().is_nullish() {
                            if price.clone().is_nullish() {
                                cost = amount.clone();
                            } else {
                                cost = amount.clone() * price.clone();
                            };
                        };
                    };
                    ceiling = Bittrex::cost_to_precision(self, symbol.clone(), cost.clone());
                    time_in_force = Value::from("IMMEDIATE_OR_CANCEL");
                } else {
                    if uppercase_type.clone() == Value::from("LIMIT") {
                        limit = Bittrex::price_to_precision(self, symbol.clone(), price.clone());
                        time_in_force = Value::from("GOOD_TIL_CANCELLED");
                    } else {
                        time_in_force = Value::from("IMMEDIATE_OR_CANCEL");
                    };
                };
                request.set("orderToCreate".into(), Value::Json(normalize(&Value::Json(json!({
                    "marketSymbol": reverse_id,
                    "direction": side.to_upper_case(),
                    "type": uppercase_type,
                    "quantity": Bittrex::amount_to_precision(self, symbol.clone(), amount.clone()),
                    "ceiling": ceiling,
                    "limit": limit,
                    "timeInForce": time_in_force,
                    "clientOrderId": self.safe_string(params.clone(), Value::from("clientOrderId"), Value::Undefined),
                    "useAwards": self.safe_value(params.clone(), Value::from("useAwards"), Value::Undefined)
                }))).unwrap()));
            };
            if order_to_cancel.is_truthy() {
                request.set("orderToCancel".into(), order_to_cancel.clone());
            };
            request.set("triggerPrice".into(), Bittrex::price_to_precision(self, symbol.clone(), stop_price.clone()));
            request.set("operand".into(), operand.clone());
        } else {
            if side.clone().is_nonnullish() {
                request.set("direction".into(), side.to_upper_case());
            };
            request.set("type".into(), uppercase_type.clone());
            let mut is_ceiling_limit: Value = (uppercase_type.clone() == Value::from("CEILING_LIMIT")).into();
            let mut is_ceiling_market: Value = (uppercase_type.clone() == Value::from("CEILING_MARKET")).into();
            let mut is_ceiling_order: Value = (is_ceiling_limit.is_truthy() || is_ceiling_market.is_truthy()).into();
            if is_ceiling_order.is_truthy() {
                let mut cost: Value = Value::Undefined;
                if is_ceiling_limit.is_truthy() {
                    request.set("limit".into(), Bittrex::price_to_precision(self, symbol.clone(), price.clone()));
                    cost = Bittrex::safe_number_2(self, params.clone(), Value::from("ceiling"), Value::from("cost"), amount.clone());
                } else if is_ceiling_market.is_truthy() {
                    cost = Bittrex::safe_number_2(self, params.clone(), Value::from("ceiling"), Value::from("cost"), Value::Undefined);
                    if cost.clone().is_nullish() {
                        if price.clone().is_nullish() {
                            cost = amount.clone();
                        } else {
                            cost = amount.clone() * price.clone();
                        };
                    };
                };
                request.set("ceiling".into(), Bittrex::cost_to_precision(self, symbol.clone(), cost.clone()));
                // bittrex only accepts IMMEDIATE_OR_CANCEL or FILL_OR_KILL for ceiling orders
                request.set("timeInForce".into(), Value::from("IMMEDIATE_OR_CANCEL"));
            } else {
                request.set("quantity".into(), Bittrex::amount_to_precision(self, symbol.clone(), amount.clone()));
                if uppercase_type.clone() == Value::from("LIMIT") {
                    request.set("limit".into(), Bittrex::price_to_precision(self, symbol.clone(), price.clone()));
                    request.set("timeInForce".into(), Value::from("GOOD_TIL_CANCELLED"));
                } else {
                    // bittrex does not allow GOOD_TIL_CANCELLED for market orders
                    request.set("timeInForce".into(), Value::from("IMMEDIATE_OR_CANCEL"));
                };
            };
        };
        let mut query: Value = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("stop").into(), Value::from("stopPrice").into(), Value::from("ceiling").into(), Value::from("cost").into(), Value::from("operand").into(), Value::from("trailingStopPercent").into(), Value::from("orderToCreate").into(), Value::from("orderToCancel").into()])));
        let mut response: Value = Bittrex::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        //
        // Spot
        //
        //     {
        //         id: 'f03d5e98-b5ac-48fb-8647-dd4db828a297',
        //         marketSymbol: 'BTC-USDT',
        //         direction: 'SELL',
        //         type: 'LIMIT',
        //         quantity: '0.01',
        //         limit: '6000',
        //         timeInForce: 'GOOD_TIL_CANCELLED',
        //         fillQuantity: '0.00000000',
        //         commission: '0.00000000',
        //         proceeds: '0.00000000',
        //         status: 'OPEN',
        //         createdAt: '2020-03-18T02:37:33.42Z',
        //         updatedAt: '2020-03-18T02:37:33.42Z'
        //       }
        //
        // Stop
        //
        //     {
        //         "id": "9791fe52-a3e5-4ac3-ae03-e327b2993571",
        //         "marketSymbol": "BTC-USDT",
        //         "operand": "LTE",
        //         "triggerPrice": "0.1",
        //         "orderToCreate": {
        //             "marketSymbol": "BTC-USDT",
        //             "direction": "BUY",
        //             "type": "LIMIT",
        //             "quantity": "0.0002",
        //             "limit": "30000",
        //             "timeInForce": "GOOD_TIL_CANCELLED"
        //         },
        //         "status": "OPEN",
        //         "createdAt": "2022-04-19T21:02:14.17Z",
        //         "updatedAt": "2022-04-19T21:02:14.17Z"
        //     }
        //
        return Bittrex::parse_order(self, response.clone(), market.clone());
    }

    /// Returns an [order structure](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Cancels an open order
    ///
    /// # Arguments
    ///
    /// * `id` {string} - order id
    /// * `symbol` {string|undefined} - unified symbol of the market the order was made in
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn cancel_order(&mut self, mut id: Value, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut stop: Value = self.safe_value(params.clone(), Value::from("stop"), Value::Undefined);
        let mut request: Value = Value::new_object();
        let mut method: Value = Value::Undefined;
        let mut market: Value = Value::Undefined;
        if symbol.clone().is_nonnullish() {
            market = Bittrex::market(self, symbol.clone());
        };
        if stop.is_truthy() {
            method = Value::from("privateDeleteConditionalOrdersConditionalOrderId");
            request = Value::Json(normalize(&Value::Json(json!({
                "conditionalOrderId": id
            }))).unwrap());
        } else {
            method = Value::from("privateDeleteOrdersOrderId");
            request = Value::Json(normalize(&Value::Json(json!({
                "orderId": id
            }))).unwrap());
        };
        let mut query: Value = self.omit(params.clone(), Value::from("stop"));
        let mut response: Value = Bittrex::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        //
        // Spot
        //
        //     [
        //         {
        //             "id": "df6cf5ee-fc27-4b61-991a-cc94b6459ac9",
        //             "marketSymbol": "BTC-USDT",
        //             "direction": "BUY",
        //             "type": "LIMIT",
        //             "quantity": "0.00023277",
        //             "limit": "30000.00000000",
        //             "timeInForce": "GOOD_TIL_CANCELLED",
        //             "fillQuantity": "0.00000000",
        //             "commission": "0.00000000",
        //             "proceeds": "0.00000000",
        //             "status": "CANCELLED",
        //             "createdAt": "2022-04-20T02:33:53.16Z",
        //             "updatedAt": "2022-04-20T02:33:53.16Z"
        //         }
        //     ]
        //
        // Stop
        //
        //     [
        //         {
        //             "id": "f64f7c4f-295c-408b-9cbc-601981abf100",
        //             "marketSymbol": "BTC-USDT",
        //             "operand": "LTE",
        //             "triggerPrice": "0.10000000",
        //             "orderToCreate": {
        //                 "marketSymbol": "BTC-USDT",
        //                 "direction": "BUY",
        //                 "type": "LIMIT",
        //                 "quantity": "0.00020000",
        //                 "limit": "30000.00000000",
        //                 "timeInForce": "GOOD_TIL_CANCELLED"
        //             },
        //             "status": "CANCELLED",
        //             "createdAt": "2022-04-20T02:38:12.26Z",
        //             "updatedAt": "2022-04-20T02:38:12.26Z"
        //             "closedAt": "2022-04-20T03:47:24.69Z"
        //         }
        //     ]
        //
        return extend_2(Bittrex::parse_order(self, response.clone(), market.clone()), Value::Json(normalize(&Value::Json(json!({
            "id": id,
            "info": response,
            "status": "canceled"
        }))).unwrap()));
    }

    /// Returns a list of [order structures](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Cancel all open orders
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - unified market symbol, only orders in the market of this symbol are cancelled when symbol is not undefined
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn cancel_all_orders(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::new_object();
        let mut market: Value = Value::Undefined;
        if symbol.clone().is_nonnullish() {
            market = Bittrex::market(self, symbol.clone());
            request.set("marketSymbol".into(), market.get(Value::from("id")));
        };
        let mut response: Value = Bittrex::dispatch(self, "privateDeleteOrdersOpen".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     [
        //         {
        //             "id":"66582be0-5337-4d8c-b212-c356dd525801",
        //             "statusCode":"SUCCESS",
        //             "result":{
        //                 "id":"66582be0-5337-4d8c-b212-c356dd525801",
        //                 "marketSymbol":"BTC-USDT",
        //                 "direction":"BUY",
        //                 "type":"LIMIT",
        //                 "quantity":"0.01000000",
        //                 "limit":"3000.00000000",
        //                 "timeInForce":"GOOD_TIL_CANCELLED",
        //                 "fillQuantity":"0.00000000",
        //                 "commission":"0.00000000",
        //                 "proceeds":"0.00000000",
        //                 "status":"CLOSED",
        //                 "createdAt":"2020-10-06T12:31:53.39Z",
        //                 "updatedAt":"2020-10-06T12:54:28.8Z",
        //                 "closedAt":"2020-10-06T12:54:28.8Z"
        //             }
        //         }
        //     ]
        //
        let mut orders: Value = Value::new_array();
        let mut i: usize = 0;
        while i < response.len() {
            let mut result: Value = self.safe_value(response.get(i.into()), Value::from("result"), Value::new_object());
            orders.push(result.clone());
            i += 1;
        };
        return Bittrex::parse_orders(self, orders.clone(), market.clone(), Value::Undefined, Value::Undefined, Value::Undefined);
    }

    /// Returns a [transaction structure](https://docs.ccxt.com/en/latest/manual.html#transaction-structure)
    ///
    /// Fetch data on a currency deposit via the deposit id
    ///
    /// # Arguments
    ///
    /// * `id` {string} - deposit id
    /// * `code` {string|undefined} - filter by currency code
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_deposit(&mut self, mut id: Value, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "txId": id
        }))).unwrap());
        let mut response: Value = Bittrex::dispatch(self, "privateGetDepositsByTxIdTxId".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        let mut transactions: Value = Bittrex::parse_transactions(self, response.clone(), code.clone(), Value::Undefined, Value::Undefined, Value::Undefined);
        return self.safe_value(transactions.clone(), Value::from(0), Value::Undefined);
    }

    /// Returns a list of [transaction structures](https://docs.ccxt.com/en/latest/manual.html#transaction-structure)
    ///
    /// Fetch all deposits made to an account
    ///
    /// # Arguments
    ///
    /// * `code` {string|undefined} - unified currency code
    /// * `since` {int|undefined} - the earliest time in ms to fetch deposits for
    /// * `limit` {int|undefined} - the maximum number of deposits structures to retrieve
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    /// * `params.endDate` {int|undefined} - Filters out result after this timestamp. Uses ISO-8602 format.
    /// * `params.nextPageToken` {string|undefined} - The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint. Used for traversing a paginated set in the forward direction.
    /// * `params.previousPageToken` {string|undefined} - The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint. Used for traversing a paginated set in the reverse direction.
    async fn fetch_deposits(&mut self, mut code: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        // https://support.bittrex.com/hc/en-us/articles/115003723911
        let mut request: Value = Value::new_object();
        let mut currency: Value = Value::Undefined;
        if code.clone().is_nonnullish() {
            currency = Bittrex::currency(self, code.clone());
            request.set("currencySymbol".into(), currency.get(Value::from("id")));
        };
        if since.clone().is_nonnullish() {
            let mut start_date: Value = parse_int(since.clone() / Value::from(1000)) * Value::from(1000);
            request.set("startDate".into(), self.iso8601(start_date.clone()));
        };
        if limit.clone().is_nonnullish() {
            request.set("pageSize".into(), limit.clone());
        };
        let mut method: Value = Value::Undefined;
        let mut options: Value = self.safe_value(self.get("options".into()), Value::from("fetchDeposits"), Value::new_object());
        let mut default_status: Value = self.safe_string(options.clone(), Value::from("status"), Value::from("ok"));
        let mut status: Value = self.safe_string(params.clone(), Value::from("status"), default_status.clone());
        if status.clone() == Value::from("pending") {
            method = Value::from("privateGetDepositsOpen");
        } else {
            method = Value::from("privateGetDepositsClosed");
        };
        params = self.omit(params.clone(), Value::from("status"));
        let mut response: Value = Bittrex::dispatch(self, method, extend_2(request.clone(), params.clone()), Value::Undefined).await;
        // we cannot filter by `since` timestamp, as it isn't set by Bittrex
        // see https://github.com/ccxt/ccxt/issues/4067
        // return this.parseTransactions (response, currency, since, limit);
        return Bittrex::parse_transactions(self, response.clone(), currency.clone(), Value::Undefined, limit.clone(), Value::Undefined);
    }

    /// Returns a list of [transaction structures](https://docs.ccxt.com/en/latest/manual.html#transaction-structure)
    ///
    /// Fetch all pending deposits made from an account
    ///
    /// # Arguments
    ///
    /// * `code` {string|undefined} - unified currency code
    /// * `since` {int|undefined} - the earliest time in ms to fetch withdrawals for
    /// * `limit` {int|undefined} - the maximum number of withdrawals structures to retrieve
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    /// * `params.endDate` {int|undefined} - Filters out result after this timestamp. Uses ISO-8602 format.
    /// * `params.nextPageToken` {string|undefined} - The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint. Used for traversing a paginated set in the forward direction.
    /// * `params.previousPageToken` {string|undefined} - The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint. Used for traversing a paginated set in the reverse direction.
    async fn fetch_pending_deposits(&mut self, mut code: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        return Bittrex::fetch_deposits(self, code.clone(), since.clone(), limit.clone(), extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "status": "pending"
        }))).unwrap())));
    }

    /// Returns a [transaction structure](https://docs.ccxt.com/en/latest/manual.html#transaction-structure)
    ///
    /// Fetch data on a currency withdrawal via the withdrawal id
    ///
    /// # Arguments
    ///
    /// * `id` {string} - withdrawal id
    /// * `code` {string|undefined} - filter by currency code
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_withdrawal(&mut self, mut id: Value, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "txId": id
        }))).unwrap());
        let mut response: Value = Bittrex::dispatch(self, "privateGetWithdrawalsByTxIdTxId".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        let mut transactions: Value = Bittrex::parse_transactions(self, response.clone(), code.clone(), Value::Undefined, Value::Undefined, Value::Undefined);
        return self.safe_value(transactions.clone(), Value::from(0), Value::Undefined);
    }

    /// Returns a list of [transaction structures](https://docs.ccxt.com/en/latest/manual.html#transaction-structure)
    ///
    /// Fetch all withdrawals made from an account
    ///
    /// # Arguments
    ///
    /// * `code` {string|undefined} - unified currency code
    /// * `since` {int|undefined} - the earliest time in ms to fetch withdrawals for
    /// * `limit` {int|undefined} - the maximum number of withdrawals structures to retrieve
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    /// * `params.endDate` {int|undefined} - Filters out result after this timestamp. Uses ISO-8602 format.
    /// * `params.nextPageToken` {string|undefined} - The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint. Used for traversing a paginated set in the forward direction.
    /// * `params.previousPageToken` {string|undefined} - The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint. Used for traversing a paginated set in the reverse direction.
    async fn fetch_withdrawals(&mut self, mut code: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        // https://support.bittrex.com/hc/en-us/articles/115003723911
        let mut request: Value = Value::new_object();
        let mut currency: Value = Value::Undefined;
        if code.clone().is_nonnullish() {
            currency = Bittrex::currency(self, code.clone());
            request.set("currencySymbol".into(), currency.get(Value::from("id")));
        };
        if since.clone().is_nonnullish() {
            let mut start_date: Value = parse_int(since.clone() / Value::from(1000)) * Value::from(1000);
            request.set("startDate".into(), self.iso8601(start_date.clone()));
        };
        if limit.clone().is_nonnullish() {
            request.set("pageSize".into(), limit.clone());
        };
        let mut method: Value = Value::Undefined;
        let mut options: Value = self.safe_value(self.get("options".into()), Value::from("fetchWithdrawals"), Value::new_object());
        let mut default_status: Value = self.safe_string(options.clone(), Value::from("status"), Value::from("ok"));
        let mut status: Value = self.safe_string(params.clone(), Value::from("status"), default_status.clone());
        if status.clone() == Value::from("pending") {
            method = Value::from("privateGetWithdrawalsOpen");
        } else {
            method = Value::from("privateGetWithdrawalsClosed");
        };
        params = self.omit(params.clone(), Value::from("status"));
        let mut response: Value = Bittrex::dispatch(self, method, extend_2(request.clone(), params.clone()), Value::Undefined).await;
        return Bittrex::parse_transactions(self, response.clone(), currency.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    /// Returns a list of [transaction structures](https://docs.ccxt.com/en/latest/manual.html#transaction-structure)
    ///
    /// Fetch all pending withdrawals made from an account
    ///
    /// # Arguments
    ///
    /// * `code` {string|undefined} - unified currency code
    /// * `since` {int|undefined} - the earliest time in ms to fetch withdrawals for
    /// * `limit` {int|undefined} - the maximum number of withdrawals structures to retrieve
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    /// * `params.endDate` {int|undefined} - Filters out result after this timestamp. Uses ISO-8602 format.
    /// * `params.nextPageToken` {string|undefined} - The unique identifier of the item that the resulting query result should start after, in the sort order of the given endpoint. Used for traversing a paginated set in the forward direction.
    /// * `params.previousPageToken` {string|undefined} - The unique identifier of the item that the resulting query result should end before, in the sort order of the given endpoint. Used for traversing a paginated set in the reverse direction.
    async fn fetch_pending_withdrawals(&mut self, mut code: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        return Bittrex::fetch_withdrawals(self, code.clone(), since.clone(), limit.clone(), extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "status": "pending"
        }))).unwrap())));
    }

    fn parse_transaction(&self, mut transaction: Value, mut currency: Value) -> Value {
        //
        // fetchDeposits
        //
        //      {
        //          "id": "77f2e4f0-a33d-4285-9140-ed5b20533a17",
        //          "currencySymbol": "ETH",
        //          "quantity": "0.36487773",
        //          "cryptoAddress": "0xeee7cff0f587706acdddfc1ff65968936fcf621e",
        //          "txId": "0x059fd3279452a245b308a944a0ee341ff9d17652a8a1bc663e6006282128c782",
        //          "confirmations": 44,
        //          "updatedAt": "2017-12-28T13:57:42.753Z",
        //          "completedAt": "2017-12-28T13:57:42.753Z",
        //          "status": "COMPLETED",
        //          "source": "BLOCKCHAIN"
        //      }
        //
        // fetchWithdrawals
        //
        //      {
        //          "id":"d20d556c-59ac-4480-95d8-268f8d4adedb",
        //          "currencySymbol":"OMG",
        //          "quantity":"2.67000000",
        //          "cryptoAddress":"0xa7daa9acdb41c0c476966ee23d388d6f2a1448cd",
        //          "cryptoAddressTag":"",
        //          "txCost":"0.10000000",
        //          "txId":"0xb54b8c5fb889aa9f9154e013cc5dd67b3048a3e0ae58ba845868225cda154bf5",
        //          "status":"COMPLETED",
        //          "createdAt":"2017-12-16T20:46:22.5Z",
        //          "completedAt":"2017-12-16T20:48:03.887Z",
        //          "target":"BLOCKCHAIN"
        //      }
        //
        // withdraw
        //
        //     {
        //         "currencySymbol": "string",
        //         "quantity": "number (double)",
        //         "cryptoAddress": "string",
        //         "cryptoAddressTag": "string",
        //         "fundsTransferMethodId": "string (uuid)",
        //         "clientWithdrawalId": "string (uuid)"
        //     }
        //
        let mut id: Value = self.safe_string_2(transaction.clone(), Value::from("id"), Value::from("clientWithdrawalId"), Value::Undefined);
        let mut amount: Value = Bittrex::safe_number(self, transaction.clone(), Value::from("quantity"), Value::Undefined);
        let mut address: Value = self.safe_string(transaction.clone(), Value::from("cryptoAddress"), Value::Undefined);
        let mut address_to: Value = Value::Undefined;
        let mut address_from: Value = Value::Undefined;
        let mut is_deposit: Value = (self.safe_string(transaction.clone(), Value::from("source"), Value::Undefined) == Value::from("BLOCKCHAIN")).into();
        if is_deposit.is_truthy() {
            address_from = address.clone();
        } else {
            address_to = address.clone();
        };
        let mut txid: Value = self.safe_string(transaction.clone(), Value::from("txId"), Value::Undefined);
        let mut updated: Value = self.parse8601(self.safe_string(transaction.clone(), Value::from("updatedAt"), Value::Undefined));
        let mut opened: Value = self.parse8601(self.safe_string(transaction.clone(), Value::from("createdAt"), Value::Undefined));
        let mut timestamp: Value = if opened.is_truthy() { opened.clone() } else { updated.clone() };
        let mut r#type: Value = if opened.clone().is_nullish() { Value::from("deposit") } else { Value::from("withdrawal") };
        let mut currency_id: Value = self.safe_string(transaction.clone(), Value::from("currencySymbol"), Value::Undefined);
        let mut code: Value = Bittrex::safe_currency_code(self, currency_id.clone(), currency.clone());
        let mut status: Value = Value::from("pending");
        if r#type.clone() == Value::from("deposit") {
            //
            // deposits numConfirmations never reach the minConfirmations number
            // we set all of them to 'ok', otherwise they'd all be 'pending'
            //
            //     const numConfirmations = this.safeInteger (transaction, 'Confirmations', 0);
            //     const minConfirmations = this.safeInteger (currency['info'], 'MinConfirmation');
            //     if (numConfirmations >= minConfirmations) {
            //         status = 'ok';
            //     }
            //
            status = Value::from("ok");
        } else {
            let mut response_status: Value = self.safe_string(transaction.clone(), Value::from("status"), Value::Undefined);
            if response_status.clone() == Value::from("ERROR_INVALID_ADDRESS") {
                status = Value::from("failed");
            } else if response_status.clone() == Value::from("CANCELLED") {
                status = Value::from("canceled");
            } else if response_status.clone() == Value::from("PENDING") {
                status = Value::from("pending");
            } else if response_status.clone() == Value::from("COMPLETED") {
                status = Value::from("ok");
            } else if response_status.clone() == Value::from("AUTHORIZED") && txid.clone().is_nonnullish() {
                status = Value::from("ok");
            };
        };
        let mut fee_cost: Value = Bittrex::safe_number(self, transaction.clone(), Value::from("txCost"), Value::Undefined);
        if fee_cost.clone().is_nullish() {
            if r#type.clone() == Value::from("deposit") {
                // according to https://support.bittrex.com/hc/en-us/articles/115000199651-What-fees-does-Bittrex-charge-
                fee_cost = Value::from(0);
            };
        };
        return Value::Json(normalize(&Value::Json(json!({
            "info": transaction,
            "id": id,
            "currency": code,
            "amount": amount,
            "network": Value::Undefined,
            "address": address,
            "addressTo": address_to,
            "addressFrom": address_from,
            "tag": Value::Undefined,
            "tagTo": Value::Undefined,
            "tagFrom": Value::Undefined,
            "status": status,
            "type": r#type,
            "updated": updated,
            "txid": txid,
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "fee": Value::Json(normalize(&Value::Json(json!({
                "currency": code,
                "cost": fee_cost
            }))).unwrap())
        }))).unwrap());
    }

    fn parse_time_in_force(&self, mut time_in_force: Value) -> Value {
        let mut time_in_forces: Value = Value::Json(normalize(&Value::Json(json!({
            "GOOD_TIL_CANCELLED": "GTC",
            "IMMEDIATE_OR_CANCEL": "IOC",
            "FILL_OR_KILL": "FOK",
            "POST_ONLY_GOOD_TIL_CANCELLED": "PO"
        }))).unwrap());
        return self.safe_string(time_in_forces.clone(), time_in_force.clone(), time_in_force.clone());
    }

    fn parse_order(&mut self, mut order: Value, mut market: Value) -> Value {
        //
        // Spot createOrder, fetchOpenOrders, fetchClosedOrders, fetchOrder, cancelOrder
        //
        //     {
        //         id: '1be35109-b763-44ce-b6ea-05b6b0735c0c',
        //         marketSymbol: 'LTC-ETH',
        //         direction: 'BUY',
        //         type: 'LIMIT',
        //         quantity: '0.50000000',
        //         limit: '0.17846699',
        //         timeInForce: 'GOOD_TIL_CANCELLED',
        //         clientOrderId: 'ff156d39-fe01-44ca-8f21-b0afa19ef228',
        //         fillQuantity: '0.50000000',
        //         commission: '0.00022286',
        //         proceeds: '0.08914915',
        //         status: 'CLOSED',
        //         createdAt: '2018-06-23T13:14:28.613Z',
        //         updatedAt: '2018-06-23T13:14:30.19Z',
        //         closedAt: '2018-06-23T13:14:30.19Z'
        //     }
        //
        // Stop createOrder, fetchOpenOrders, fetchClosedOrders, fetchOrder, cancelOrder
        //
        //     {
        //         "id": "9791fe52-a3e5-4ac3-ae03-e327b2993571",
        //         "marketSymbol": "BTC-USDT",
        //         "operand": "LTE",
        //         "triggerPrice": "0.1",
        //         "orderToCreate": {
        //             "marketSymbol": "BTC-USDT",
        //             "direction": "BUY",
        //             "type": "LIMIT",
        //             "quantity": "0.0002",
        //             "limit": "30000",
        //             "timeInForce": "GOOD_TIL_CANCELLED"
        //         },
        //         "status": "OPEN",
        //         "createdAt": "2022-04-19T21:02:14.17Z",
        //         "updatedAt": "2022-04-19T21:02:14.17Z",
        //         "closedAt": "2022-04-20T03:47:24.69Z"
        //     }
        //
        let mut market_symbol: Value = self.safe_string(order.clone(), Value::from("marketSymbol"), Value::Undefined);
        market = Bittrex::safe_market(self, market_symbol.clone(), market.clone(), Value::from("-"));
        let mut symbol: Value = market.get(Value::from("symbol"));
        let mut fee_currency: Value = market.get(Value::from("quote"));
        let mut created_at: Value = self.safe_string(order.clone(), Value::from("createdAt"), Value::Undefined);
        let mut updated_at: Value = self.safe_string(order.clone(), Value::from("updatedAt"), Value::Undefined);
        let mut closed_at: Value = self.safe_string(order.clone(), Value::from("closedAt"), Value::Undefined);
        let mut client_order_id: Value = self.safe_string(order.clone(), Value::from("clientOrderId"), Value::Undefined);
        let mut last_trade_timestamp: Value = Value::Undefined;
        if closed_at.clone().is_nonnullish() {
            last_trade_timestamp = self.parse8601(closed_at.clone());
        } else if updated_at.is_truthy() {
            last_trade_timestamp = self.parse8601(updated_at.clone());
        };
        let mut timestamp: Value = self.parse8601(created_at.clone());
        let mut direction: Value = self.safe_string_lower(order.clone(), Value::from("direction"), Value::Undefined);
        if direction.clone().is_nullish() {
            let mut conditional_order: Value = self.safe_value(order.clone(), Value::from("orderToCreate"), Value::Undefined);
            if conditional_order.clone().is_nullish() {
                conditional_order = self.safe_value(order.clone(), Value::from("orderToCancel"), Value::Undefined);
            };
            direction = self.safe_string_lower(conditional_order.clone(), Value::from("direction"), Value::Undefined);
        };
        let mut r#type: Value = self.safe_string_lower(order.clone(), Value::from("type"), Value::Undefined);
        if r#type.clone().is_nullish() {
            let mut conditional_order: Value = self.safe_value(order.clone(), Value::from("orderToCreate"), Value::Undefined);
            if conditional_order.clone().is_nullish() {
                conditional_order = self.safe_value(order.clone(), Value::from("orderToCancel"), Value::Undefined);
            };
            r#type = self.safe_string_lower(conditional_order.clone(), Value::from("type"), Value::Undefined);
        };
        let mut quantity: Value = self.safe_string(order.clone(), Value::from("quantity"), Value::Undefined);
        if quantity.clone().is_nullish() {
            let mut conditional_order: Value = self.safe_value(order.clone(), Value::from("orderToCreate"), Value::Undefined);
            if conditional_order.clone().is_nullish() {
                conditional_order = self.safe_value(order.clone(), Value::from("orderToCancel"), Value::Undefined);
            };
            quantity = self.safe_string(conditional_order.clone(), Value::from("quantity"), Value::Undefined);
        };
        let mut limit: Value = self.safe_string(order.clone(), Value::from("limit"), Value::Undefined);
        if limit.clone().is_nullish() {
            let mut conditional_order: Value = self.safe_value(order.clone(), Value::from("orderToCreate"), Value::Undefined);
            if conditional_order.clone().is_nullish() {
                conditional_order = self.safe_value(order.clone(), Value::from("orderToCancel"), Value::Undefined);
            };
            limit = self.safe_string(conditional_order.clone(), Value::from("limit"), Value::Undefined);
        };
        let mut time_in_force: Value = Bittrex::parse_time_in_force(self, self.safe_string(order.clone(), Value::from("timeInForce"), Value::Undefined));
        if time_in_force.clone().is_nullish() {
            let mut conditional_order: Value = self.safe_value(order.clone(), Value::from("orderToCreate"), Value::Undefined);
            if conditional_order.clone().is_nullish() {
                conditional_order = self.safe_value(order.clone(), Value::from("orderToCancel"), Value::Undefined);
            };
            time_in_force = Bittrex::parse_time_in_force(self, self.safe_string(conditional_order.clone(), Value::from("timeInForce"), Value::Undefined));
        };
        let mut fill_quantity: Value = self.safe_string(order.clone(), Value::from("fillQuantity"), Value::Undefined);
        let mut commission: Value = Bittrex::safe_number(self, order.clone(), Value::from("commission"), Value::Undefined);
        let mut proceeds: Value = self.safe_string(order.clone(), Value::from("proceeds"), Value::Undefined);
        let mut status: Value = self.safe_string_lower(order.clone(), Value::from("status"), Value::Undefined);
        let mut post_only: Value = (time_in_force.clone() == Value::from("PO")).into();
        return Bittrex::safe_order(self, Value::Json(normalize(&Value::Json(json!({
            "id": self.safe_string(order.clone(), Value::from("id"), Value::Undefined),
            "clientOrderId": client_order_id,
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "lastTradeTimestamp": last_trade_timestamp,
            "symbol": symbol,
            "type": r#type,
            "timeInForce": time_in_force,
            "postOnly": post_only,
            "side": direction,
            "price": limit,
            "stopPrice": self.safe_string(order.clone(), Value::from("triggerPrice"), Value::Undefined),
            "cost": proceeds,
            "average": Value::Undefined,
            "amount": quantity,
            "filled": fill_quantity,
            "remaining": Value::Undefined,
            "status": status,
            "fee": Value::Json(normalize(&Value::Json(json!({
                "cost": commission,
                "currency": fee_currency
            }))).unwrap()),
            "info": order,
            "trades": Value::Undefined
        }))).unwrap()), market.clone());
    }

    fn parse_orders(&mut self, mut orders: Value, mut market: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if self.get("options".into()).get(Value::from("fetchClosedOrdersFilterBySince")).is_truthy() {
            return Exchange::parse_orders(self, orders.clone(), market.clone(), since.clone(), limit.clone(), params.clone());
        } else {
            return Exchange::parse_orders(self, orders.clone(), market.clone(), Value::Undefined, limit.clone(), params.clone());
        };
        Value::Undefined
    }

    fn parse_order_status(&self, mut status: Value) -> Value {
        let mut statuses: Value = Value::Json(normalize(&Value::Json(json!({
            "CLOSED": "closed",
            "OPEN": "open",
            "CANCELLED": "canceled",
            "CANCELED": "canceled"
        }))).unwrap());
        return self.safe_string(statuses.clone(), status.clone(), status.clone());
    }

    /// Returns an [order structure](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Fetches information on an order made by the user
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - unified symbol of the market the order was made in
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_order(&mut self, mut id: Value, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut stop: Value = self.safe_value(params.clone(), Value::from("stop"), Value::Undefined);
        let mut market: Value = Value::Undefined;
        if symbol.clone().is_nonnullish() {
            market = Bittrex::market(self, symbol.clone());
        };
        let mut response: Value = Value::Undefined;
        let mut method: Value = Value::Undefined;
        {
        let mut request: Value = Value::new_object();
        if stop.is_truthy() {
            method = Value::from("privateGetConditionalOrdersConditionalOrderId");
            request.set("conditionalOrderId".into(), id.clone());
        } else {
            method = Value::from("privateGetOrdersOrderId");
            request.set("orderId".into(), id.clone());
        };
        let mut query: Value = self.omit(params.clone(), Value::from("stop"));
        response = Bittrex::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
    };
        return Bittrex::parse_order(self, response.clone(), market.clone());
    }

    /// Returns a list of [trade structures](https://docs.ccxt.com/en/latest/manual.html#trade-structure)
    ///
    /// Fetch all trades made by the user
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - unified market symbol
    /// * `since` {int|undefined} - the earliest time in ms to fetch trades for
    /// * `limit` {int|undefined} - the maximum number of trades structures to retrieve
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_my_trades(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::new_object();
        if limit.clone().is_nonnullish() {
            request.set("pageSize".into(), limit.clone());
        };
        if since.clone().is_nonnullish() {
            request.set("startDate".into(), self.ymdhms(since.clone(), Value::from("T")) + Value::from("Z"));
        };
        let mut market: Value = Value::Undefined;
        if symbol.clone().is_nonnullish() {
            market = Bittrex::market(self, symbol.clone());
            symbol = market.get(Value::from("symbol"));
            request.set("marketSymbol".into(), market.get(Value::from("id")));
        };
        let mut response: Value = Bittrex::dispatch(self, "privateGetExecutions".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        let mut trades: Value = Bittrex::parse_trades(self, response.clone(), market.clone(), Value::Undefined, Value::Undefined, Value::Undefined);
        return Bittrex::filter_by_symbol_since_limit(self, trades.clone(), symbol.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    /// Returns a list of [order structures](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Fetches information on multiple closed orders made by the user
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - unified market symbol of the market orders were made in
    /// * `since` {int|undefined} - the earliest time in ms to fetch orders for
    /// * `limit` {int|undefined} - the maximum number of  orde structures to retrieve
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_closed_orders(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut stop: Value = self.safe_value(params.clone(), Value::from("stop"), Value::Undefined);
        let mut request: Value = Value::new_object();
        if limit.clone().is_nonnullish() {
            request.set("pageSize".into(), limit.clone());
        };
        if since.clone().is_nonnullish() {
            request.set("startDate".into(), self.ymdhms(since.clone(), Value::from("T")) + Value::from("Z"));
        };
        let mut market: Value = Value::Undefined;
        if symbol.clone().is_nonnullish() {
            market = Bittrex::market(self, symbol.clone());
            // because of this line we will have to rethink the entire v3
            // in other words, markets define all the rest of the API
            // and v3 market ids are reversed in comparison to v1
            // v3 has to be a completely separate implementation
            // otherwise we will have to shuffle symbols and currencies everywhere
            // which is prone to errors, as was shown here
            // https://github.com/ccxt/ccxt/pull/5219#issuecomment-499646209
            request.set("marketSymbol".into(), market.get(Value::from("base")) + Value::from("-") + market.get(Value::from("quote")));
        };
        let mut method: Value = Value::from("privateGetOrdersClosed");
        if stop.is_truthy() {
            method = Value::from("privateGetConditionalOrdersClosed");
        };
        let mut query: Value = self.omit(params.clone(), Value::from("stop"));
        let mut response: Value = Bittrex::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        //
        // Spot
        //
        //     [
        //         {
        //             "id": "df6cf5ee-fc27-4b61-991a-cc94b6459ac9",
        //             "marketSymbol": "BTC-USDT",
        //             "direction": "BUY",
        //             "type": "LIMIT",
        //             "quantity": "0.00023277",
        //             "limit": "30000.00000000",
        //             "timeInForce": "GOOD_TIL_CANCELLED",
        //             "fillQuantity": "0.00000000",
        //             "commission": "0.00000000",
        //             "proceeds": "0.00000000",
        //             "status": "OPEN",
        //             "createdAt": "2022-04-20T02:33:53.16Z",
        //             "updatedAt": "2022-04-20T02:33:53.16Z"
        //         }
        //     ]
        //
        // Stop
        //
        //     [
        //         {
        //             "id": "f64f7c4f-295c-408b-9cbc-601981abf100",
        //             "marketSymbol": "BTC-USDT",
        //             "operand": "LTE",
        //             "triggerPrice": "0.10000000",
        //             "orderToCreate": {
        //                 "marketSymbol": "BTC-USDT",
        //                 "direction": "BUY",
        //                 "type": "LIMIT",
        //                 "quantity": "0.00020000",
        //                 "limit": "30000.00000000",
        //                 "timeInForce": "GOOD_TIL_CANCELLED"
        //             },
        //             "status": "OPEN",
        //             "createdAt": "2022-04-20T02:38:12.26Z",
        //             "updatedAt": "2022-04-20T02:38:12.26Z"
        //         }
        //     ]
        //
        return Bittrex::parse_orders(self, response.clone(), market.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    /// Returns an [address structure](https://docs.ccxt.com/en/latest/manual.html#address-structure)
    ///
    /// Create a currency deposit address
    ///
    /// # Arguments
    ///
    /// * `code` {string} - unified currency code of the currency for the deposit address
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn create_deposit_address(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut currency: Value = Bittrex::currency(self, code.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "currencySymbol": currency.get(Value::from("id"))
        }))).unwrap());
        let mut response: Value = Bittrex::dispatch(self, "privatePostAddresses".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "status":"PROVISIONED",
        //         "currencySymbol":"XRP",
        //         "cryptoAddress":"rPVMhWBsfF9iMXYj3aAzJVkPDTFNSyWdKy",
        //         "cryptoAddressTag":"392034158"
        //     }
        //
        let mut address: Value = self.safe_string(response.clone(), Value::from("cryptoAddress"), Value::Undefined);
        let mut message: Value = self.safe_string(response.clone(), Value::from("status"), Value::Undefined);
        if !address.is_truthy() || message.clone() == Value::from("REQUESTED") {
            panic!(r###"AddressPending::new(self.get("id".into()) + Value::from(" the address for ") + code.clone() + Value::from(" is being generated (pending, not ready yet, retry again later)"))"###);
        };
        let mut tag: Value = self.safe_string(response.clone(), Value::from("cryptoAddressTag"), Value::Undefined);
        if tag.clone().is_nullish() && self.get("options".into()).get(Value::from("tag")).contains_key(currency.get(Value::from("type"))) {
            tag = address.clone();
            address = currency.get(Value::from("address"));
        };
        self.check_address(address.clone());
        return Value::Json(normalize(&Value::Json(json!({
            "currency": code,
            "address": address,
            "tag": tag,
            "info": response
        }))).unwrap());
    }

    /// Returns an [address structure](https://docs.ccxt.com/en/latest/manual.html#address-structure)
    ///
    /// Fetch the deposit address for a currency associated with this account
    ///
    /// # Arguments
    ///
    /// * `code` {string} - unified currency code
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn fetch_deposit_address(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut currency: Value = Bittrex::currency(self, code.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "currencySymbol": currency.get(Value::from("id"))
        }))).unwrap());
        let mut response: Value = Bittrex::dispatch(self, "privateGetAddressesCurrencySymbol".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "status":"PROVISIONED",
        //         "currencySymbol":"XRP",
        //         "cryptoAddress":"rPVMhWBsfF9iMXYj3aAzJVkPDTFNSyWdKy",
        //         "cryptoAddressTag":"392034158"
        //     }
        //
        let mut address: Value = self.safe_string(response.clone(), Value::from("cryptoAddress"), Value::Undefined);
        let mut message: Value = self.safe_string(response.clone(), Value::from("status"), Value::Undefined);
        if !address.is_truthy() || message.clone() == Value::from("REQUESTED") {
            panic!(r###"AddressPending::new(self.get("id".into()) + Value::from(" the address for ") + code.clone() + Value::from(" is being generated (pending, not ready yet, retry again later)"))"###);
        };
        let mut tag: Value = self.safe_string(response.clone(), Value::from("cryptoAddressTag"), Value::Undefined);
        if tag.clone().is_nullish() && self.get("options".into()).get(Value::from("tag")).contains_key(currency.get(Value::from("type"))) {
            tag = address.clone();
            address = currency.get(Value::from("address"));
        };
        self.check_address(address.clone());
        return Value::Json(normalize(&Value::Json(json!({
            "currency": code,
            "address": address,
            "tag": tag,
            "network": Value::Undefined,
            "info": response
        }))).unwrap());
    }

    /// Returns a [transaction structure](https://docs.ccxt.com/en/latest/manual.html#transaction-structure)
    ///
    /// Make a withdrawal
    ///
    /// # Arguments
    ///
    /// * `code` {string} - unified currency code
    /// * `amount` {float} - the amount to withdraw
    /// * `address` {string} - the address to withdraw to
    /// * `tag` {string|undefined} - 
    /// * `params` {object} - extra parameters specific to the bittrex api endpoint
    async fn withdraw(&mut self, mut code: Value, mut amount: Value, mut address: Value, mut tag: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        (tag, params) = shift_2(Bittrex::handle_withdraw_tag_and_params(self, tag.clone(), params.clone()));
        self.check_address(address.clone());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut currency: Value = Bittrex::currency(self, code.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "currencySymbol": currency.get(Value::from("id")),
            "quantity": amount,
            "cryptoAddress": address
        }))).unwrap());
        if tag.clone().is_nonnullish() {
            request.set("cryptoAddressTag".into(), tag.clone());
        };
        let mut response: Value = Bittrex::dispatch(self, "privatePostWithdrawals".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "currencySymbol": "string",
        //         "quantity": "number (double)",
        //         "cryptoAddress": "string",
        //         "cryptoAddressTag": "string",
        //         "fundsTransferMethodId": "string (uuid)",
        //         "clientWithdrawalId": "string (uuid)"
        //     }
        //
        return Bittrex::parse_transaction(self, response.clone(), currency.clone());
    }

    fn sign(&mut self, mut path: Value, mut api: Value, mut method: Value, mut params: Value, mut headers: Value, mut body: Value) -> Value {
        api = api.or_default(Value::from("v3"));
        method = method.or_default(Value::from("GET"));
        params = params.or_default(Value::new_object());
        let mut url: Value = self.implode_params(self.get("urls".into()).get(Value::from("api")).get(api.clone()), Value::Json(normalize(&Value::Json(json!({
            "hostname": self.get("hostname".into())
        }))).unwrap())) + Value::from("/");
        if api.clone() == Value::from("private") {
            url = url +  self.get("version".into()) + Value::from("/");
            Bittrex::check_required_credentials(self, Value::Undefined);
            url = url +  self.implode_params(path.clone(), params.clone());
            params = self.omit(params.clone(), self.extract_params(path.clone()));
            let mut hash_string: Value = Value::from("");
            if method.clone() == Value::from("POST") {
                body = self.json(params.clone(), Value::Undefined);
                hash_string = body.clone();
            } else {
                if Object::keys(params.clone()).len() > 0 {
                    url = url +  Value::from("?") + self.rawencode(params.clone());
                };
            };
            let mut content_hash: Value = self.hash(self.encode(hash_string.clone()), Value::from("sha512"), Value::from("hex"));
            let mut timestamp: Value = self.milliseconds().to_string();
            let mut auth: Value = timestamp.clone() + url.clone() + method.clone() + content_hash.clone();
            let mut subaccount_id: Value = self.safe_value(self.get("options".into()), Value::from("subaccountId"), Value::Undefined);
            if subaccount_id.clone().is_nonnullish() {
                auth = auth +  subaccount_id.clone();
            };
            let mut signature: Value = self.hmac(self.encode(auth.clone()), self.encode(self.get("secret".into())), Value::from("sha512"), Value::Undefined);
            headers = Value::Json(normalize(&Value::Json(json!({
                "Api-Key": self.get("apiKey".into()),
                "Api-Timestamp": timestamp,
                "Api-Content-Hash": content_hash,
                "Api-Signature": signature
            }))).unwrap());
            if subaccount_id.clone().is_nonnullish() {
                headers.set("Api-Subaccount-Id".into(), subaccount_id.clone());
            };
            if method.clone() == Value::from("POST") {
                headers.set("Content-Type".into(), Value::from("application/json"));
            };
        } else {
            if api.clone() == Value::from("public") {
                url = url +  self.get("version".into()) + Value::from("/");
            };
            url = url +  self.implode_params(path.clone(), params.clone());
            params = self.omit(params.clone(), self.extract_params(path.clone()));
            if Object::keys(params.clone()).len() > 0 {
                url = url +  Value::from("?") + self.urlencode(params.clone());
            };
        };
        return Value::Json(normalize(&Value::Json(json!({
            "url": url,
            "method": method,
            "body": body,
            "headers": headers
        }))).unwrap());
    }

    fn handle_errors(&mut self, mut code: Value, mut reason: Value, mut url: Value, mut method: Value, mut headers: Value, mut body: Value, mut response: Value, mut request_headers: Value, mut request_body: Value) -> Value {
        if response.clone().is_nullish() {
            return Value::Undefined;
        };
        // fallback to default error handler
        //
        //     { success: false, message: "message" }
        //
        if body.get(Value::from(0)) == Value::from("{") {
            let mut feedback: Value = self.get("id".into()) + Value::from(" ") + body.clone();
            let mut success: Value = self.safe_value(response.clone(), Value::from("success"), Value::Undefined);
            if success.clone().is_nullish() {
                let mut code: Value = self.safe_string(response.clone(), Value::from("code"), Value::Undefined);
                if code.clone() == Value::from("NOT_FOUND") && url.index_of(Value::from("addresses")) >= Value::from(0) {
                    panic!(r###"InvalidAddress::new(feedback)"###);
                };
                if code.clone().is_nonnullish() {
                    Bittrex::throw_exactly_matched_exception(self, self.get("exceptions".into()).get(Value::from("exact")), code.clone(), feedback.clone());
                    Bittrex::throw_broadly_matched_exception(self, self.get("exceptions".into()).get(Value::from("broad")), code.clone(), feedback.clone());
                };
                // throw new ExchangeError (this.id + ' malformed response ' + this.json (response));
                return Value::Undefined;
            };
            if success.typeof_() == Value::from("string") {
                // bleutrade uses string instead of boolean
                success = (success.clone() == Value::from("true")).into();
            };
            if !success.is_truthy() {
                let mut message: Value = self.safe_string(response.clone(), Value::from("message"), Value::Undefined);
                if message.clone() == Value::from("APIKEY_INVALID") {
                    if self.get("options".into()).get(Value::from("hasAlreadyAuthenticatedSuccessfully")).is_truthy() {
                        panic!(r###"DDoSProtection::new(feedback)"###);
                    } else {
                        panic!(r###"AuthenticationError::new(feedback)"###);
                    };
                };
                // https://github.com/ccxt/ccxt/issues/4932
                // the following two lines are now redundant, see line 171 in describe()
                //
                //     if (message === 'DUST_TRADE_DISALLOWED_MIN_VALUE_50K_SAT')
                //         throw new InvalidOrder (this.id + ' order cost should be over 50k satoshi ' + this.json (response));
                //
                if message.clone() == Value::from("INVALID_ORDER") {
                    // Bittrex will return an ambiguous INVALID_ORDER message
                    // upon canceling already-canceled and closed orders
                    // therefore this special case for cancelOrder
                    // let url = 'https://bittrex.com/api/v1.1/market/cancel?apikey=API_KEY&uuid=ORDER_UUID'
                    let mut cancel: Value = Value::from("cancel");
                    let mut index_of_cancel: Value = url.index_of(cancel.clone());
                    if index_of_cancel.clone() >= Value::from(0) {
                        let mut url_parts: Value = url.split(Value::from("?"));
                        let mut num_parts: Value = url_parts.len().into();
                        if num_parts.clone() > Value::from(1) {
                            let mut query: Value = url_parts.get(Value::from(1));
                            let mut params: Value = query.split(Value::from("&"));
                            let mut num_params: Value = params.len().into();
                            let mut order_id: Value = Value::Undefined;
                            let mut i: usize = 0;
                            while i < num_params.clone().into() {
                                let mut param: Value = params.get(i.into());
                                let mut key_value: Value = param.split(Value::from("="));
                                if key_value.get(Value::from(0)) == Value::from("uuid") {
                                    order_id = key_value.get(Value::from(1));
                                    break;
                                };
                                i += 1;
                            };
                            if order_id.clone().is_nonnullish() {
                                panic!(r###"OrderNotFound::new(self.get("id".into()) + Value::from(" cancelOrder ") + order_id.clone() + Value::from(" ") + self.json(response.clone(), Value::Undefined))"###);
                            } else {
                                panic!(r###"OrderNotFound::new(self.get("id".into()) + Value::from(" cancelOrder ") + self.json(response.clone(), Value::Undefined))"###);
                            };
                        };
                    };
                };
                Bittrex::throw_exactly_matched_exception(self, self.get("exceptions".into()).get(Value::from("exact")), message.clone(), feedback.clone());
                if message.clone().is_nonnullish() {
                    Bittrex::throw_broadly_matched_exception(self, self.get("exceptions".into()).get(Value::from("broad")), message.clone(), feedback.clone());
                };
                panic!(r###"ExchangeError::new(feedback)"###);
            };
        };
        Value::Undefined
    }

    fn safe_ledger_entry(&self, mut entry: Value, mut currency: Value) -> Value {
        currency = Bittrex::safe_currency(self, Value::Undefined, currency.clone());
        let mut direction: Value = self.safe_string(entry.clone(), Value::from("direction"), Value::Undefined);
        let mut before: Value = self.safe_string(entry.clone(), Value::from("before"), Value::Undefined);
        let mut after: Value = self.safe_string(entry.clone(), Value::from("after"), Value::Undefined);
        let mut amount: Value = self.safe_string(entry.clone(), Value::from("amount"), Value::Undefined);
        if amount.clone().is_nonnullish() {
            if before.clone().is_nullish() && after.clone().is_nonnullish() {
                before = Precise::string_sub(after.clone(), amount.clone());
            } else if before.clone().is_nonnullish() && after.clone().is_nullish() {
                after = Precise::string_add(before.clone(), amount.clone());
            };
        };
        if before.clone().is_nonnullish() && after.clone().is_nonnullish() {
            if direction.clone().is_nullish() {
                if Precise::string_gt(before.clone(), after.clone()) {
                    direction = Value::from("out");
                };
                if Precise::string_gt(after.clone(), before.clone()) {
                    direction = Value::from("in");
                };
            };
        };
        let mut fee: Value = self.safe_value(entry.clone(), Value::from("fee"), Value::Undefined);
        if fee.clone().is_nonnullish() {
            fee.set("cost".into(), Bittrex::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
        };
        let mut timestamp: Value = self.safe_integer(entry.clone(), Value::from("timestamp"), Value::Undefined);
        return Value::Json(normalize(&Value::Json(json!({
            "id": self.safe_string(entry.clone(), Value::from("id"), Value::Undefined),
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "direction": direction,
            "account": self.safe_string(entry.clone(), Value::from("account"), Value::Undefined),
            "referenceId": self.safe_string(entry.clone(), Value::from("referenceId"), Value::Undefined),
            "referenceAccount": self.safe_string(entry.clone(), Value::from("referenceAccount"), Value::Undefined),
            "type": self.safe_string(entry.clone(), Value::from("type"), Value::Undefined),
            "currency": currency.get(Value::from("code")),
            "amount": self.parse_number(amount.clone(), Value::Undefined),
            "before": self.parse_number(before.clone(), Value::Undefined),
            "after": self.parse_number(after.clone(), Value::Undefined),
            "status": self.safe_string(entry.clone(), Value::from("status"), Value::Undefined),
            "fee": fee,
            "info": entry
        }))).unwrap());
    }

    fn set_markets(&mut self, mut markets: Value, mut currencies: Value) -> Value {
        let mut values: Value = Value::new_array();
        let mut market_values: Value = self.to_array(markets.clone());
        let mut i: usize = 0;
        while i < market_values.len() {
            let mut market: Value = self.deep_extend_4(Bittrex::safe_market(self, Value::Undefined, Value::Undefined, Value::Undefined), Value::Json(normalize(&Value::Json(json!({
                "precision": self.get("precision".into()),
                "limits": self.get("limits".into())
            }))).unwrap()), self.get("fees".into()).get(Value::from("trading")), market_values.get(i.into()));
            values.push(market.clone());
            i += 1;
        };
        self.set("markets".into(), self.index_by(values.clone(), Value::from("symbol"), Value::Undefined));
        self.set("markets_by_id".into(), self.index_by(markets.clone(), Value::from("id"), Value::Undefined));
        let mut markets_sorted_by_symbol: Value = self.keysort(self.get("markets".into()), Value::Undefined);
        let mut markets_sorted_by_id: Value = self.keysort(self.get("markets_by_id".into()), Value::Undefined);
        self.set("symbols".into(), Object::keys(markets_sorted_by_symbol.clone()));
        self.set("ids".into(), Object::keys(markets_sorted_by_id.clone()));
        if currencies.clone().is_nonnullish() {
            self.set("currencies".into(), self.deep_extend_2(self.get("currencies".into()), currencies.clone()));
        } else {
            let mut base_currencies: Value = Value::new_array();
            let mut quote_currencies: Value = Value::new_array();
            let mut i: usize = 0;
            while i < values.len() {
                let mut market: Value = values.get(i.into());
                let mut default_currency_precision: Value = if self.get("precision_mode".into()) == DECIMAL_PLACES.into() { Value::from(8) } else { self.parse_number(Value::from("0.00000001"), Value::Undefined) };
                let mut market_precision: Value = self.safe_value(market.clone(), Value::from("precision"), Value::new_object());
                if market.contains_key(Value::from("base")) {
                    let mut currency_precision: Value = self.safe_value_2(market_precision.clone(), Value::from("base"), Value::from("amount"), default_currency_precision.clone());
                    let mut currency: Value = Value::Json(normalize(&Value::Json(json!({
                        "id": self.safe_string_2(market.clone(), Value::from("baseId"), Value::from("base"), Value::Undefined),
                        "numericId": self.safe_string(market.clone(), Value::from("baseNumericId"), Value::Undefined),
                        "code": self.safe_string(market.clone(), Value::from("base"), Value::Undefined),
                        "precision": currency_precision
                    }))).unwrap());
                    base_currencies.push(currency.clone());
                };
                if market.contains_key(Value::from("quote")) {
                    let mut currency_precision: Value = self.safe_value_2(market_precision.clone(), Value::from("quote"), Value::from("amount"), default_currency_precision.clone());
                    let mut currency: Value = Value::Json(normalize(&Value::Json(json!({
                        "id": self.safe_string_2(market.clone(), Value::from("quoteId"), Value::from("quote"), Value::Undefined),
                        "numericId": self.safe_string(market.clone(), Value::from("quoteNumericId"), Value::Undefined),
                        "code": self.safe_string(market.clone(), Value::from("quote"), Value::Undefined),
                        "precision": currency_precision
                    }))).unwrap());
                    quote_currencies.push(currency.clone());
                };
                i += 1;
            };
            base_currencies = self.sort_by(base_currencies.clone(), Value::from("code"), Value::Undefined, Value::Undefined);
            quote_currencies = self.sort_by(quote_currencies.clone(), Value::from("code"), Value::Undefined, Value::Undefined);
            self.set("base_currencies".into(), self.index_by(base_currencies.clone(), Value::from("code"), Value::Undefined));
            self.set("quote_currencies".into(), self.index_by(quote_currencies.clone(), Value::from("code"), Value::Undefined));
            let mut all_currencies: Value = self.array_concat(base_currencies.clone(), quote_currencies.clone());
            let mut grouped_currencies: Value = self.group_by(all_currencies.clone(), Value::from("code"), Value::Undefined);
            let mut codes: Value = Object::keys(grouped_currencies.clone());
            let mut resulting_currencies: Value = Value::new_array();
            let mut i: usize = 0;
            while i < codes.len() {
                let mut code: Value = codes.get(i.into());
                let mut grouped_currencies_code: Value = self.safe_value(grouped_currencies.clone(), code.clone(), Value::new_array());
                let mut highest_precision_currency: Value = self.safe_value(grouped_currencies_code.clone(), Value::from(0), Value::Undefined);
                let mut j: usize = 1;
                while j < grouped_currencies_code.len() {
                    let mut current_currency: Value = grouped_currencies_code.get(j.into());
                    if self.get("precision_mode".into()) == TICK_SIZE.into() {
                        highest_precision_currency = if current_currency.get(Value::from("precision")) < highest_precision_currency.get(Value::from("precision")) { current_currency.clone() } else { highest_precision_currency.clone() };
                    } else {
                        highest_precision_currency = if current_currency.get(Value::from("precision")) > highest_precision_currency.get(Value::from("precision")) { current_currency.clone() } else { highest_precision_currency.clone() };
                    };
                    j += 1;
                };
                resulting_currencies.push(highest_precision_currency.clone());
                i += 1;
            };
            let mut sorted_currencies: Value = self.sort_by(resulting_currencies.clone(), Value::from("code"), Value::Undefined, Value::Undefined);
            self.set("currencies".into(), self.deep_extend_2(self.get("currencies".into()), self.index_by(sorted_currencies.clone(), Value::from("code"), Value::Undefined)));
        };
        self.set("currencies_by_id".into(), self.index_by(self.get("currencies".into()), Value::from("id"), Value::Undefined));
        let mut currencies_sorted_by_code: Value = self.keysort(self.get("currencies".into()), Value::Undefined);
        self.set("codes".into(), Object::keys(currencies_sorted_by_code.clone()));
        return self.get("markets".into());
    }

    fn safe_balance(&self, mut balance: Value) -> Value {
        let mut balances: Value = self.omit(balance.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("info").into(), Value::from("timestamp").into(), Value::from("datetime").into(), Value::from("free").into(), Value::from("used").into(), Value::from("total").into()])));
        let mut codes: Value = Object::keys(balances.clone());
        balance.set("free".into(), Value::new_object());
        balance.set("used".into(), Value::new_object());
        balance.set("total".into(), Value::new_object());
        let mut i: usize = 0;
        while i < codes.len() {
            let mut code: Value = codes.get(i.into());
            let mut total: Value = self.safe_string(balance.get(code.clone()), Value::from("total"), Value::Undefined);
            let mut free: Value = self.safe_string(balance.get(code.clone()), Value::from("free"), Value::Undefined);
            let mut used: Value = self.safe_string(balance.get(code.clone()), Value::from("used"), Value::Undefined);
            if total.clone().is_nullish() && free.clone().is_nonnullish() && used.clone().is_nonnullish() {
                total = Precise::string_add(free.clone(), used.clone());
            };
            if free.clone().is_nullish() && total.clone().is_nonnullish() && used.clone().is_nonnullish() {
                free = Precise::string_sub(total.clone(), used.clone());
            };
            if used.clone().is_nullish() && total.clone().is_nonnullish() && free.clone().is_nonnullish() {
                used = Precise::string_sub(total.clone(), free.clone());
            };
            balance.get(code.clone()).set("free".into(), self.parse_number(free.clone(), Value::Undefined));
            balance.get(code.clone()).set("used".into(), self.parse_number(used.clone(), Value::Undefined));
            balance.get(code.clone()).set("total".into(), self.parse_number(total.clone(), Value::Undefined));
            balance.get(Value::from("free")).set(code.clone(), balance.get(code.clone()).get(Value::from("free")));
            balance.get(Value::from("used")).set(code.clone(), balance.get(code.clone()).get(Value::from("used")));
            balance.get(Value::from("total")).set(code.clone(), balance.get(code.clone()).get(Value::from("total")));
            i += 1;
        };
        return balance.clone();
    }

    fn safe_order(&mut self, mut order: Value, mut market: Value) -> Value {
        // parses numbers as strings
        // it is important pass the trades as unparsed rawTrades
        let mut amount: Value = self.omit_zero(self.safe_string(order.clone(), Value::from("amount"), Value::Undefined));
        let mut remaining: Value = self.safe_string(order.clone(), Value::from("remaining"), Value::Undefined);
        let mut filled: Value = self.safe_string(order.clone(), Value::from("filled"), Value::Undefined);
        let mut cost: Value = self.safe_string(order.clone(), Value::from("cost"), Value::Undefined);
        let mut average: Value = self.omit_zero(self.safe_string(order.clone(), Value::from("average"), Value::Undefined));
        let mut price: Value = self.omit_zero(self.safe_string(order.clone(), Value::from("price"), Value::Undefined));
        let mut last_trade_time_timestamp: Value = self.safe_integer(order.clone(), Value::from("lastTradeTimestamp"), Value::Undefined);
        let mut parse_filled: Value = (filled.clone().is_nullish()).into();
        let mut parse_cost: Value = (cost.clone().is_nullish()).into();
        let mut parse_last_trade_time_timestamp: Value = (last_trade_time_timestamp.clone().is_nullish()).into();
        let mut fee: Value = self.safe_value(order.clone(), Value::from("fee"), Value::Undefined);
        let mut parse_fee: Value = (fee.clone().is_nullish()).into();
        let mut parse_fees: Value = (self.safe_value(order.clone(), Value::from("fees"), Value::Undefined).is_nullish()).into();
        let mut should_parse_fees: Value = (parse_fee.is_truthy() || parse_fees.is_truthy()).into();
        let mut fees: Value = self.safe_value(order.clone(), Value::from("fees"), Value::new_array());
        let mut trades: Value = Value::new_array();
        if parse_filled.is_truthy() || parse_cost.is_truthy() || should_parse_fees.is_truthy() {
            let mut raw_trades: Value = self.safe_value(order.clone(), Value::from("trades"), trades.clone());
            let mut old_number: Value = self.get("number".into());
            // we parse trades as strings here!
            self.set_number_mode("String".into());
            trades = Bittrex::parse_trades(self, raw_trades.clone(), market.clone(), Value::Undefined, Value::Undefined, Value::Json(normalize(&Value::Json(json!({
                "symbol": order.get(Value::from("symbol")),
                "side": order.get(Value::from("side")),
                "type": order.get(Value::from("type")),
                "order": order.get(Value::from("id"))
            }))).unwrap()));
            self.set("number".into(), old_number.clone());
            let mut trades_length: Value = Value::from(0);
            let mut is_array: Value = Array::is_array(trades.clone());
            if is_array.is_truthy() {
                trades_length = trades.len().into();
            };
            if is_array.is_truthy() && trades_length.clone() > Value::from(0) {
                // move properties that are defined in trades up into the order
                if order.get(Value::from("symbol")).is_nullish() {
                    order.set("symbol".into(), trades.get(Value::from(0)).get(Value::from("symbol")));
                };
                if order.get(Value::from("side")).is_nullish() {
                    order.set("side".into(), trades.get(Value::from(0)).get(Value::from("side")));
                };
                if order.get(Value::from("type")).is_nullish() {
                    order.set("type".into(), trades.get(Value::from(0)).get(Value::from("type")));
                };
                if order.get(Value::from("id")).is_nullish() {
                    order.set("id".into(), trades.get(Value::from(0)).get(Value::from("order")));
                };
                if parse_filled.is_truthy() {
                    filled = Value::from("0");
                };
                if parse_cost.is_truthy() {
                    cost = Value::from("0");
                };
                let mut i: usize = 0;
                while i < trades.len() {
                    let mut trade: Value = trades.get(i.into());
                    let mut trade_amount: Value = self.safe_string(trade.clone(), Value::from("amount"), Value::Undefined);
                    if parse_filled.is_truthy() && trade_amount.clone().is_nonnullish() {
                        filled = Precise::string_add(filled.clone(), trade_amount.clone());
                    };
                    let mut trade_cost: Value = self.safe_string(trade.clone(), Value::from("cost"), Value::Undefined);
                    if parse_cost.is_truthy() && trade_cost.clone().is_nonnullish() {
                        cost = Precise::string_add(cost.clone(), trade_cost.clone());
                    };
                    let mut trade_timestamp: Value = self.safe_value(trade.clone(), Value::from("timestamp"), Value::Undefined);
                    if parse_last_trade_time_timestamp.is_truthy() && trade_timestamp.clone().is_nonnullish() {
                        if last_trade_time_timestamp.clone().is_nullish() {
                            last_trade_time_timestamp = trade_timestamp.clone();
                        } else {
                            last_trade_time_timestamp = Math::max(last_trade_time_timestamp.clone(), trade_timestamp.clone());
                        };
                    };
                    if should_parse_fees.is_truthy() {
                        let mut trade_fees: Value = self.safe_value(trade.clone(), Value::from("fees"), Value::Undefined);
                        if trade_fees.clone().is_nonnullish() {
                            let mut j: usize = 0;
                            while j < trade_fees.len() {
                                let mut trade_fee: Value = trade_fees.get(j.into());
                                fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                                j += 1;
                            };
                        } else {
                            let mut trade_fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
                            if trade_fee.clone().is_nonnullish() {
                                fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                            };
                        };
                    };
                    i += 1;
                };
            };
        };
        if should_parse_fees.is_truthy() {
            let mut reduced_fees: Value = if self.get("reduce_fees".into()).is_truthy() { Bittrex::reduce_fees_by_currency(self, fees.clone()) } else { fees.clone() };
            let mut reduced_length: Value = reduced_fees.len().into();
            let mut i: usize = 0;
            while i < reduced_length.clone().into() {
                reduced_fees.get(i.into()).set("cost".into(), Bittrex::safe_number(self, reduced_fees.get(i.into()), Value::from("cost"), Value::Undefined));
                if reduced_fees.get(i.into()).contains_key(Value::from("rate")) {
                    reduced_fees.get(i.into()).set("rate".into(), Bittrex::safe_number(self, reduced_fees.get(i.into()), Value::from("rate"), Value::Undefined));
                };
                i += 1;
            };
            if !parse_fee.is_truthy() && reduced_length.clone() == Value::from(0) {
                fee.set("cost".into(), Bittrex::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
                if fee.contains_key(Value::from("rate")) {
                    fee.set("rate".into(), Bittrex::safe_number(self, fee.clone(), Value::from("rate"), Value::Undefined));
                };
                reduced_fees.push(fee.clone());
            };
            order.set("fees".into(), reduced_fees.clone());
            if parse_fee.is_truthy() && reduced_length.clone() == Value::from(1) {
                order.set("fee".into(), reduced_fees.get(Value::from(0)));
            };
        };
        if amount.clone().is_nullish() {
            // ensure amount = filled + remaining
            if filled.clone().is_nonnullish() && remaining.clone().is_nonnullish() {
                amount = Precise::string_add(filled.clone(), remaining.clone());
            } else if self.safe_string(order.clone(), Value::from("status"), Value::Undefined) == Value::from("closed") {
                amount = filled.clone();
            };
        };
        if filled.clone().is_nullish() {
            if amount.clone().is_nonnullish() && remaining.clone().is_nonnullish() {
                filled = Precise::string_sub(amount.clone(), remaining.clone());
            };
        };
        if remaining.clone().is_nullish() {
            if amount.clone().is_nonnullish() && filled.clone().is_nonnullish() {
                remaining = Precise::string_sub(amount.clone(), filled.clone());
            };
        };
        // ensure that the average field is calculated correctly
        if average.clone().is_nullish() {
            if filled.clone().is_nonnullish() && cost.clone().is_nonnullish() && Precise::string_gt(filled.clone(), Value::from("0")) {
                average = Precise::string_div(cost.clone(), filled.clone(), Value::Undefined);
            };
        };
        // also ensure the cost field is calculated correctly
        let mut cost_price_exists: Value = (average.clone().is_nonnullish() || price.clone().is_nonnullish()).into();
        if parse_cost.is_truthy() && filled.clone().is_nonnullish() && cost_price_exists.is_truthy() {
            let mut multiply_price: Value = Value::Undefined;
            if average.clone().is_nullish() {
                multiply_price = price.clone();
            } else {
                multiply_price = average.clone();
            };
            // contract trading
            let mut contract_size: Value = self.safe_string(market.clone(), Value::from("contractSize"), Value::Undefined);
            if contract_size.clone().is_nonnullish() {
                let mut inverse: Value = self.safe_value(market.clone(), Value::from("inverse"), false.into());
                if inverse.is_truthy() {
                    multiply_price = Precise::string_div(Value::from("1"), multiply_price.clone(), Value::Undefined);
                };
                multiply_price = Precise::string_mul(multiply_price.clone(), contract_size.clone());
            };
            cost = Precise::string_mul(multiply_price.clone(), filled.clone());
        };
        // support for market orders
        let mut order_type: Value = self.safe_value(order.clone(), Value::from("type"), Value::Undefined);
        let mut empty_price: Value = (price.clone().is_nullish() || Precise::string_equals(price.clone(), Value::from("0"))).into();
        if empty_price.is_truthy() && order_type.clone() == Value::from("market") {
            price = average.clone();
        };
        // we have trades with string values at this point so we will mutate them
        let mut i: usize = 0;
        while i < trades.len() {
            let mut entry: Value = trades.get(i.into());
            entry.set("amount".into(), Bittrex::safe_number(self, entry.clone(), Value::from("amount"), Value::Undefined));
            entry.set("price".into(), Bittrex::safe_number(self, entry.clone(), Value::from("price"), Value::Undefined));
            entry.set("cost".into(), Bittrex::safe_number(self, entry.clone(), Value::from("cost"), Value::Undefined));
            let mut fee: Value = self.safe_value(entry.clone(), Value::from("fee"), Value::new_object());
            fee.set("cost".into(), Bittrex::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
            if fee.contains_key(Value::from("rate")) {
                fee.set("rate".into(), Bittrex::safe_number(self, fee.clone(), Value::from("rate"), Value::Undefined));
            };
            entry.set("fee".into(), fee.clone());
            i += 1;
        };
        // timeInForceHandling
        let mut time_in_force: Value = self.safe_string(order.clone(), Value::from("timeInForce"), Value::Undefined);
        if time_in_force.clone().is_nullish() {
            if self.safe_string(order.clone(), Value::from("type"), Value::Undefined) == Value::from("market") {
                time_in_force = Value::from("IOC");
            };
            // allow postOnly override
            if self.safe_value(order.clone(), Value::from("postOnly"), false.into()).is_truthy() {
                time_in_force = Value::from("PO");
            };
        };
        return extend_2(order.clone(), Value::Json(normalize(&Value::Json(json!({
            "lastTradeTimestamp": last_trade_time_timestamp,
            "price": self.parse_number(price.clone(), Value::Undefined),
            "amount": self.parse_number(amount.clone(), Value::Undefined),
            "cost": self.parse_number(cost.clone(), Value::Undefined),
            "average": self.parse_number(average.clone(), Value::Undefined),
            "filled": self.parse_number(filled.clone(), Value::Undefined),
            "remaining": self.parse_number(remaining.clone(), Value::Undefined),
            "timeInForce": time_in_force,
            "trades": trades
        }))).unwrap()));
    }

    fn calculate_fee(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut taker_or_maker: Value, mut params: Value) -> Value {
        taker_or_maker = taker_or_maker.or_default(Value::from("taker"));
        params = params.or_default(Value::new_object());
        let mut market: Value = self.get("markets".into()).get(symbol.clone());
        let mut fee_side: Value = self.safe_string(market.clone(), Value::from("feeSide"), Value::from("quote"));
        let mut key: Value = Value::from("quote");
        let mut cost: Value = Value::Undefined;
        if fee_side.clone() == Value::from("quote") {
            // the fee is always in quote currency
            cost = amount.clone() * price.clone();
        } else if fee_side.clone() == Value::from("base") {
            // the fee is always in base currency
            cost = amount.clone();
        } else if fee_side.clone() == Value::from("get") {
            // the fee is always in the currency you get
            cost = amount.clone();
            if side.clone() == Value::from("sell") {
                cost = cost *  price.clone();
            } else {
                key = Value::from("base");
            };
        } else if fee_side.clone() == Value::from("give") {
            // the fee is always in the currency you give
            cost = amount.clone();
            if side.clone() == Value::from("buy") {
                cost = cost *  price.clone();
            } else {
                key = Value::from("base");
            };
        };
        let mut rate: Value = market.get(taker_or_maker.clone());
        if cost.clone().is_nonnullish() {
            cost = cost *  rate.clone();
        };
        return Value::Json(normalize(&Value::Json(json!({
            "type": taker_or_maker,
            "currency": market.get(key.clone()),
            "rate": rate,
            "cost": cost
        }))).unwrap());
    }

    fn safe_trade(&mut self, mut trade: Value, mut market: Value) -> Value {
        let mut amount: Value = self.safe_string(trade.clone(), Value::from("amount"), Value::Undefined);
        let mut price: Value = self.safe_string(trade.clone(), Value::from("price"), Value::Undefined);
        let mut cost: Value = self.safe_string(trade.clone(), Value::from("cost"), Value::Undefined);
        if cost.clone().is_nullish() {
            // contract trading
            let mut contract_size: Value = self.safe_string(market.clone(), Value::from("contractSize"), Value::Undefined);
            let mut multiply_price: Value = price.clone();
            if contract_size.clone().is_nonnullish() {
                let mut inverse: Value = self.safe_value(market.clone(), Value::from("inverse"), false.into());
                if inverse.is_truthy() {
                    multiply_price = Precise::string_div(Value::from("1"), price.clone(), Value::Undefined);
                };
                multiply_price = Precise::string_mul(multiply_price.clone(), contract_size.clone());
            };
            cost = Precise::string_mul(multiply_price.clone(), amount.clone());
        };
        let mut parse_fee: Value = (self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined).is_nullish()).into();
        let mut parse_fees: Value = (self.safe_value(trade.clone(), Value::from("fees"), Value::Undefined).is_nullish()).into();
        let mut should_parse_fees: Value = (parse_fee.is_truthy() || parse_fees.is_truthy()).into();
        let mut fees: Value = Value::new_array();
        if should_parse_fees.is_truthy() {
            let mut trade_fees: Value = self.safe_value(trade.clone(), Value::from("fees"), Value::Undefined);
            if trade_fees.clone().is_nonnullish() {
                let mut j: usize = 0;
                while j < trade_fees.len() {
                    let mut trade_fee: Value = trade_fees.get(j.into());
                    fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                    j += 1;
                };
            } else {
                let mut trade_fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
                if trade_fee.clone().is_nonnullish() {
                    fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                };
            };
        };
        let mut fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
        if should_parse_fees.is_truthy() {
            let mut reduced_fees: Value = if self.get("reduce_fees".into()).is_truthy() { Bittrex::reduce_fees_by_currency(self, fees.clone()) } else { fees.clone() };
            let mut reduced_length: Value = reduced_fees.len().into();
            let mut i: usize = 0;
            while i < reduced_length.clone().into() {
                reduced_fees.get(i.into()).set("cost".into(), Bittrex::safe_number(self, reduced_fees.get(i.into()), Value::from("cost"), Value::Undefined));
                if reduced_fees.get(i.into()).contains_key(Value::from("rate")) {
                    reduced_fees.get(i.into()).set("rate".into(), Bittrex::safe_number(self, reduced_fees.get(i.into()), Value::from("rate"), Value::Undefined));
                };
                i += 1;
            };
            if !parse_fee.is_truthy() && reduced_length.clone() == Value::from(0) {
                fee.set("cost".into(), Bittrex::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
                if fee.contains_key(Value::from("rate")) {
                    fee.set("rate".into(), Bittrex::safe_number(self, fee.clone(), Value::from("rate"), Value::Undefined));
                };
                reduced_fees.push(fee.clone());
            };
            if parse_fees.is_truthy() {
                trade.set("fees".into(), reduced_fees.clone());
            };
            if parse_fee.is_truthy() && reduced_length.clone() == Value::from(1) {
                trade.set("fee".into(), reduced_fees.get(Value::from(0)));
            };
            let mut trade_fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
            if trade_fee.clone().is_nonnullish() {
                trade_fee.set("cost".into(), Bittrex::safe_number(self, trade_fee.clone(), Value::from("cost"), Value::Undefined));
                if trade_fee.contains_key(Value::from("rate")) {
                    trade_fee.set("rate".into(), Bittrex::safe_number(self, trade_fee.clone(), Value::from("rate"), Value::Undefined));
                };
                trade.set("fee".into(), trade_fee.clone());
            };
        };
        trade.set("amount".into(), self.parse_number(amount.clone(), Value::Undefined));
        trade.set("price".into(), self.parse_number(price.clone(), Value::Undefined));
        trade.set("cost".into(), self.parse_number(cost.clone(), Value::Undefined));
        return trade.clone();
    }

    fn reduce_fees_by_currency(&mut self, mut fees: Value) -> Value {
        //
        // this function takes a list of fee structures having the following format
        //
        //     string = true
        //
        //     [
        //         { 'currency': 'BTC', 'cost': '0.1' },
        //         { 'currency': 'BTC', 'cost': '0.2'  },
        //         { 'currency': 'BTC', 'cost': '0.2', 'rate': '0.00123' },
        //         { 'currency': 'BTC', 'cost': '0.4', 'rate': '0.00123' },
        //         { 'currency': 'BTC', 'cost': '0.5', 'rate': '0.00456' },
        //         { 'currency': 'USDT', 'cost': '12.3456' },
        //     ]
        //
        //     string = false
        //
        //     [
        //         { 'currency': 'BTC', 'cost': 0.1 },
        //         { 'currency': 'BTC', 'cost': 0.2 },
        //         { 'currency': 'BTC', 'cost': 0.2, 'rate': 0.00123 },
        //         { 'currency': 'BTC', 'cost': 0.4, 'rate': 0.00123 },
        //         { 'currency': 'BTC', 'cost': 0.5, 'rate': 0.00456 },
        //         { 'currency': 'USDT', 'cost': 12.3456 },
        //     ]
        //
        // and returns a reduced fee list, where fees are summed per currency and rate (if any)
        //
        //     string = true
        //
        //     [
        //         { 'currency': 'BTC', 'cost': '0.3'  },
        //         { 'currency': 'BTC', 'cost': '0.6', 'rate': '0.00123' },
        //         { 'currency': 'BTC', 'cost': '0.5', 'rate': '0.00456' },
        //         { 'currency': 'USDT', 'cost': '12.3456' },
        //     ]
        //
        //     string  = false
        //
        //     [
        //         { 'currency': 'BTC', 'cost': 0.3  },
        //         { 'currency': 'BTC', 'cost': 0.6, 'rate': 0.00123 },
        //         { 'currency': 'BTC', 'cost': 0.5, 'rate': 0.00456 },
        //         { 'currency': 'USDT', 'cost': 12.3456 },
        //     ]
        //
        let mut reduced: Value = Value::new_object();
        let mut i: usize = 0;
        while i < fees.len() {
            let mut fee: Value = fees.get(i.into());
            let mut fee_currency_code: Value = self.safe_string(fee.clone(), Value::from("currency"), Value::Undefined);
            if fee_currency_code.clone().is_nonnullish() {
                let mut rate: Value = self.safe_string(fee.clone(), Value::from("rate"), Value::Undefined);
                let mut cost: Value = self.safe_value(fee.clone(), Value::from("cost"), Value::Undefined);
                if Precise::string_eq(cost.clone(), Value::from("0")) {
                    // omit zero cost fees
                    continue;
                };
                if !reduced.contains_key(fee_currency_code.clone()) {
                    reduced.set(fee_currency_code.clone(), Value::new_object());
                };
                let mut rate_key: Value = if rate.clone().is_nullish() { Value::from("") } else { rate.clone() };
                if reduced.get(fee_currency_code.clone()).contains_key(rate_key.clone()) {
                    reduced.get(fee_currency_code.clone()).get(rate_key.clone()).set("cost".into(), Precise::string_add(reduced.get(fee_currency_code.clone()).get(rate_key.clone()).get(Value::from("cost")), cost.clone()));
                } else {
                    reduced.get(fee_currency_code.clone()).set(rate_key.clone(), Value::Json(normalize(&Value::Json(json!({
                        "currency": fee_currency_code,
                        "cost": cost
                    }))).unwrap()));
                    if rate.clone().is_nonnullish() {
                        reduced.get(fee_currency_code.clone()).get(rate_key.clone()).set("rate".into(), rate.clone());
                    };
                };
            };
            i += 1;
        };
        let mut result: Value = Value::new_array();
        let mut fee_values: Value = Object::values(reduced.clone());
        let mut i: usize = 0;
        while i < fee_values.len() {
            let mut reduced_fee_values: Value = Object::values(fee_values.get(i.into()));
            result = self.array_concat(result.clone(), reduced_fee_values.clone());
            i += 1;
        };
        return result.clone();
    }

    fn safe_ticker(&self, mut ticker: Value, mut market: Value) -> Value {
        let mut open: Value = self.safe_value(ticker.clone(), Value::from("open"), Value::Undefined);
        let mut close: Value = self.safe_value(ticker.clone(), Value::from("close"), Value::Undefined);
        let mut last: Value = self.safe_value(ticker.clone(), Value::from("last"), Value::Undefined);
        let mut change: Value = self.safe_value(ticker.clone(), Value::from("change"), Value::Undefined);
        let mut percentage: Value = self.safe_value(ticker.clone(), Value::from("percentage"), Value::Undefined);
        let mut average: Value = self.safe_value(ticker.clone(), Value::from("average"), Value::Undefined);
        let mut vwap: Value = self.safe_value(ticker.clone(), Value::from("vwap"), Value::Undefined);
        let mut base_volume: Value = self.safe_value(ticker.clone(), Value::from("baseVolume"), Value::Undefined);
        let mut quote_volume: Value = self.safe_value(ticker.clone(), Value::from("quoteVolume"), Value::Undefined);
        if vwap.clone().is_nullish() {
            vwap = Precise::string_div(quote_volume.clone(), base_volume.clone(), Value::Undefined);
        };
        if last.clone().is_nonnullish() && close.clone().is_nullish() {
            close = last.clone();
        } else if last.clone().is_nullish() && close.clone().is_nonnullish() {
            last = close.clone();
        };
        if last.clone().is_nonnullish() && open.clone().is_nonnullish() {
            if change.clone().is_nullish() {
                change = Precise::string_sub(last.clone(), open.clone());
            };
            if average.clone().is_nullish() {
                average = Precise::string_div(Precise::string_add(last.clone(), open.clone()), Value::from("2"), Value::Undefined);
            };
        };
        if percentage.clone().is_nullish() && change.clone().is_nonnullish() && open.clone().is_nonnullish() && Precise::string_gt(open.clone(), Value::from("0")) {
            percentage = Precise::string_mul(Precise::string_div(change.clone(), open.clone(), Value::Undefined), Value::from("100"));
        };
        if change.clone().is_nullish() && percentage.clone().is_nonnullish() && open.clone().is_nonnullish() {
            change = Precise::string_div(Precise::string_mul(percentage.clone(), open.clone()), Value::from("100"), Value::Undefined);
        };
        if open.clone().is_nullish() && last.clone().is_nonnullish() && change.clone().is_nonnullish() {
            open = Precise::string_sub(last.clone(), change.clone());
        };
        // timestamp and symbol operations don't belong in safeTicker
        // they should be done in the derived classes
        return extend_2(ticker.clone(), Value::Json(normalize(&Value::Json(json!({
            "bid": Bittrex::safe_number(self, ticker.clone(), Value::from("bid"), Value::Undefined),
            "bidVolume": Bittrex::safe_number(self, ticker.clone(), Value::from("bidVolume"), Value::Undefined),
            "ask": Bittrex::safe_number(self, ticker.clone(), Value::from("ask"), Value::Undefined),
            "askVolume": Bittrex::safe_number(self, ticker.clone(), Value::from("askVolume"), Value::Undefined),
            "high": Bittrex::safe_number(self, ticker.clone(), Value::from("high"), Value::Undefined),
            "low": Bittrex::safe_number(self, ticker.clone(), Value::from("low"), Value::Undefined),
            "open": self.parse_number(open.clone(), Value::Undefined),
            "close": self.parse_number(close.clone(), Value::Undefined),
            "last": self.parse_number(last.clone(), Value::Undefined),
            "change": self.parse_number(change.clone(), Value::Undefined),
            "percentage": self.parse_number(percentage.clone(), Value::Undefined),
            "average": self.parse_number(average.clone(), Value::Undefined),
            "vwap": self.parse_number(vwap.clone(), Value::Undefined),
            "baseVolume": self.parse_number(base_volume.clone(), Value::Undefined),
            "quoteVolume": self.parse_number(quote_volume.clone(), Value::Undefined),
            "previousClose": Bittrex::safe_number(self, ticker.clone(), Value::from("previousClose"), Value::Undefined)
        }))).unwrap()));
    }

    fn convert_trading_view_to_ohlcv(&self, mut ohlcvs: Value, mut timestamp: Value, mut open: Value, mut high: Value, mut low: Value, mut close: Value, mut volume: Value, mut ms: Value) -> Value {
        timestamp = timestamp.or_default(Value::from("t"));
        open = open.or_default(Value::from("o"));
        high = high.or_default(Value::from("h"));
        low = low.or_default(Value::from("l"));
        close = close.or_default(Value::from("c"));
        volume = volume.or_default(Value::from("v"));
        ms = ms.or_default(false.into());
        let mut result: Value = Value::new_array();
        let mut timestamps: Value = self.safe_value(ohlcvs.clone(), timestamp.clone(), Value::new_array());
        let mut opens: Value = self.safe_value(ohlcvs.clone(), open.clone(), Value::new_array());
        let mut highs: Value = self.safe_value(ohlcvs.clone(), high.clone(), Value::new_array());
        let mut lows: Value = self.safe_value(ohlcvs.clone(), low.clone(), Value::new_array());
        let mut closes: Value = self.safe_value(ohlcvs.clone(), close.clone(), Value::new_array());
        let mut volumes: Value = self.safe_value(ohlcvs.clone(), volume.clone(), Value::new_array());
        let mut i: usize = 0;
        while i < timestamps.len() {
            result.push(Value::Json(serde_json::Value::Array(vec![if ms.is_truthy() { self.safe_integer(timestamps.clone(), Value::from(i), Value::Undefined) } else { self.safe_timestamp(timestamps.clone(), Value::from(i), Value::Undefined) }.into(), self.safe_value(opens.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(highs.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(lows.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(closes.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(volumes.clone(), Value::from(i), Value::Undefined).into()])));
            i += 1;
        };
        return result.clone();
    }

    fn convert_ohlcv_to_trading_view(&self, mut ohlcvs: Value, mut timestamp: Value, mut open: Value, mut high: Value, mut low: Value, mut close: Value, mut volume: Value, mut ms: Value) -> Value {
        timestamp = timestamp.or_default(Value::from("t"));
        open = open.or_default(Value::from("o"));
        high = high.or_default(Value::from("h"));
        low = low.or_default(Value::from("l"));
        close = close.or_default(Value::from("c"));
        volume = volume.or_default(Value::from("v"));
        ms = ms.or_default(false.into());
        let mut result: Value = Value::new_object();
        result.set(timestamp.clone(), Value::new_array());
        result.set(open.clone(), Value::new_array());
        result.set(high.clone(), Value::new_array());
        result.set(low.clone(), Value::new_array());
        result.set(close.clone(), Value::new_array());
        result.set(volume.clone(), Value::new_array());
        let mut i: usize = 0;
        while i < ohlcvs.len() {
            let mut ts: Value = if ms.is_truthy() { ohlcvs.get(i.into()).get(Value::from(0)) } else { parse_int(ohlcvs.get(i.into()).get(Value::from(0)) / Value::from(1000)) };
            result.get(timestamp.clone()).push(ts.clone());
            result.get(open.clone()).push(ohlcvs.get(i.into()).get(Value::from(1)));
            result.get(high.clone()).push(ohlcvs.get(i.into()).get(Value::from(2)));
            result.get(low.clone()).push(ohlcvs.get(i.into()).get(Value::from(3)));
            result.get(close.clone()).push(ohlcvs.get(i.into()).get(Value::from(4)));
            result.get(volume.clone()).push(ohlcvs.get(i.into()).get(Value::from(5)));
            i += 1;
        };
        return result.clone();
    }

    fn market_ids(&mut self, mut symbols: Value) -> Value {
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < symbols.len() {
            result.push(Bittrex::market_id(self, symbols.get(i.into())));
            i += 1;
        };
        return result.clone();
    }

    fn market_symbols(&self, mut symbols: Value) -> Value {
        if symbols.clone().is_nullish() {
            return symbols.clone();
        };
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < symbols.len() {
            result.push(Bittrex::symbol(self, symbols.get(i.into())));
            i += 1;
        };
        return result.clone();
    }

    fn parse_bids_asks(&self, mut bidasks: Value, mut price_key: Value, mut amount_key: Value) -> Value {
        price_key = price_key.or_default(Value::from(0));
        amount_key = amount_key.or_default(Value::from(1));
        bidasks = self.to_array(bidasks.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < bidasks.len() {
            result.push(Bittrex::parse_bid_ask(self, bidasks.get(i.into()), price_key.clone(), amount_key.clone()));
            i += 1;
        };
        return result.clone();
    }

    async fn fetch_l2_order_book(&mut self, mut symbol: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut orderbook: Value = Bittrex::fetch_order_book(self, symbol.clone(), limit.clone(), params.clone()).await;
        return extend_2(orderbook.clone(), Value::Json(normalize(&Value::Json(json!({
            "asks": self.sort_by(self.aggregate(orderbook.get(Value::from("asks"))), Value::from(0), Value::Undefined, Value::Undefined),
            "bids": self.sort_by(self.aggregate(orderbook.get(Value::from("bids"))), Value::from(0), true.into(), Value::Undefined)
        }))).unwrap()));
    }

    fn filter_by_symbol(&self, mut objects: Value, mut symbol: Value) -> Value {
        if symbol.clone().is_nullish() {
            return objects.clone();
        };
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < objects.len() {
            let mut object_symbol: Value = self.safe_string(objects.get(i.into()), Value::from("symbol"), Value::Undefined);
            if object_symbol.clone() == symbol.clone() {
                result.push(objects.get(i.into()));
            };
            i += 1;
        };
        return result.clone();
    }

    fn get_network(&mut self, mut network: Value, mut code: Value) -> Value {
        network = network.to_upper_case();
        let mut aliases: Value = Value::Json(normalize(&Value::Json(json!({
            "ETHEREUM": "ETH",
            "ETHER": "ETH",
            "ERC20": "ETH",
            "ETH": "ETH",
            "TRC20": "TRX",
            "TRON": "TRX",
            "TRX": "TRX",
            "BEP20": "BSC",
            "BSC": "BSC",
            "HRC20": "HT",
            "HECO": "HT",
            "SPL": "SOL",
            "SOL": "SOL",
            "TERRA": "LUNA",
            "LUNA": "LUNA",
            "POLYGON": "MATIC",
            "MATIC": "MATIC",
            "EOS": "EOS",
            "WAVES": "WAVES",
            "AVALANCHE": "AVAX",
            "AVAX": "AVAX",
            "QTUM": "QTUM",
            "CHZ": "CHZ",
            "NEO": "NEO",
            "ONT": "ONT",
            "RON": "RON"
        }))).unwrap());
        if network.clone() == code.clone() {
            return network.clone();
        } else if aliases.contains_key(network.clone()) {
            return aliases.get(network.clone());
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" network ") + network.clone() + Value::from(" is not yet supported"))"###);
        };
        Value::Undefined
    }

    fn safe_number_2(&self, mut dictionary: Value, mut key1: Value, mut key2: Value, mut d: Value) -> Value {
        let mut value: Value = self.safe_string_2(dictionary.clone(), key1.clone(), key2.clone(), Value::Undefined);
        return self.parse_number(value.clone(), d.clone());
    }

    fn parse_order_book(&self, mut orderbook: Value, mut symbol: Value, mut timestamp: Value, mut bids_key: Value, mut asks_key: Value, mut price_key: Value, mut amount_key: Value) -> Value {
        bids_key = bids_key.or_default(Value::from("bids"));
        asks_key = asks_key.or_default(Value::from("asks"));
        price_key = price_key.or_default(Value::from(0));
        amount_key = amount_key.or_default(Value::from(1));
        let mut bids: Value = Bittrex::parse_bids_asks(self, self.safe_value(orderbook.clone(), bids_key.clone(), Value::new_array()), price_key.clone(), amount_key.clone());
        let mut asks: Value = Bittrex::parse_bids_asks(self, self.safe_value(orderbook.clone(), asks_key.clone(), Value::new_array()), price_key.clone(), amount_key.clone());
        return Value::Json(normalize(&Value::Json(json!({
            "symbol": symbol,
            "bids": self.sort_by(bids.clone(), Value::from(0), true.into(), Value::Undefined),
            "asks": self.sort_by(asks.clone(), Value::from(0), Value::Undefined, Value::Undefined),
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "nonce": Value::Undefined
        }))).unwrap());
    }

    fn parse_ohlcvs(&self, mut ohlcvs: Value, mut market: Value, mut timeframe: Value, mut since: Value, mut limit: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        let mut results: Value = Value::new_array();
        let mut i: usize = 0;
        while i < ohlcvs.len() {
            results.push(Bittrex::parse_ohlcv(self, ohlcvs.get(i.into()), market.clone()));
            i += 1;
        };
        let mut sorted: Value = self.sort_by(results.clone(), Value::from(0), Value::Undefined, Value::Undefined);
        let mut tail: Value = (since.clone().is_nullish()).into();
        return self.filter_by_since_limit(sorted.clone(), since.clone(), limit.clone(), Value::from(0), tail.clone());
    }

    fn parse_leverage_tiers(&self, mut response: Value, mut symbols: Value, mut market_id_key: Value) -> Value {
        // marketIdKey should only be undefined when response is a dictionary
        symbols = Bittrex::market_symbols(self, symbols.clone());
        let mut tiers: Value = Value::new_object();
        let mut i: usize = 0;
        while i < response.len() {
            let mut item: Value = response.get(i.into());
            let mut id: Value = self.safe_string(item.clone(), market_id_key.clone(), Value::Undefined);
            let mut market: Value = Bittrex::safe_market(self, id.clone(), Value::Undefined, Value::Undefined);
            let mut symbol: Value = market.get(Value::from("symbol"));
            let mut contract: Value = self.safe_value(market.clone(), Value::from("contract"), false.into());
            if contract.is_truthy() && symbols.clone().is_nullish() || self.in_array(symbol.clone(), symbols.clone()).is_truthy() {
                tiers.set(symbol.clone(), self.parse_market_leverage_tiers(item.clone(), market.clone()));
            };
            i += 1;
        };
        return tiers.clone();
    }

    async fn load_trading_limits(&mut self, mut symbols: Value, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchTradingLimits")).is_truthy() {
            if reload.is_truthy() || !self.get("options".into()).contains_key(Value::from("limitsLoaded")) {
                let mut response: Value = self.fetch_trading_limits(symbols.clone(), Value::Undefined).await;
                let mut i: usize = 0;
                while i < symbols.len() {
                    let mut symbol: Value = symbols.get(i.into());
                    self.get("markets".into()).set(symbol.clone(), self.deep_extend_2(self.get("markets".into()).get(symbol.clone()), response.get(symbol.clone())));
                    i += 1;
                };
                self.get("options".into()).set("limitsLoaded".into(), self.milliseconds());
            };
        };
        return self.get("markets".into());
    }

    fn parse_positions(&self, mut positions: Value, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        symbols = Bittrex::market_symbols(self, symbols.clone());
        positions = self.to_array(positions.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < positions.len() {
            let mut position: Value = extend_2(self.parse_position(positions.get(i.into()), Value::Undefined), params.clone());
            result.push(position.clone());
            i += 1;
        };
        return Bittrex::filter_by_array(self, result.clone(), Value::from("symbol"), symbols.clone(), false.into());
    }

    fn parse_accounts(&self, mut accounts: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        accounts = self.to_array(accounts.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < accounts.len() {
            let mut account: Value = extend_2(Bittrex::parse_account(self, accounts.get(i.into())), params.clone());
            result.push(account.clone());
            i += 1;
        };
        return result.clone();
    }

    fn parse_trades(&mut self, mut trades: Value, mut market: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        trades = self.to_array(trades.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < trades.len() {
            let mut trade: Value = extend_2(Bittrex::parse_trade(self, trades.get(i.into()), market.clone()), params.clone());
            result.push(trade.clone());
            i += 1;
        };
        result = self.sort_by_2(result.clone(), Value::from("timestamp"), Value::from("id"), Value::Undefined, Value::Undefined);
        let mut symbol: Value = if market.clone().is_nonnullish() { market.get(Value::from("symbol")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Bittrex::filter_by_symbol_since_limit(self, result.clone(), symbol.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn parse_transactions(&self, mut transactions: Value, mut currency: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        transactions = self.to_array(transactions.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < transactions.len() {
            let mut transaction: Value = extend_2(Bittrex::parse_transaction(self, transactions.get(i.into()), currency.clone()), params.clone());
            result.push(transaction.clone());
            i += 1;
        };
        result = self.sort_by(result.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut code: Value = if currency.clone().is_nonnullish() { currency.get(Value::from("code")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Bittrex::filter_by_currency_since_limit(self, result.clone(), code.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn parse_transfers(&self, mut transfers: Value, mut currency: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        transfers = self.to_array(transfers.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < transfers.len() {
            let mut transfer: Value = extend_2(self.parse_transfer(transfers.get(i.into()), currency.clone()), params.clone());
            result.push(transfer.clone());
            i += 1;
        };
        result = self.sort_by(result.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut code: Value = if currency.clone().is_nonnullish() { currency.get(Value::from("code")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Bittrex::filter_by_currency_since_limit(self, result.clone(), code.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn parse_ledger(&self, mut data: Value, mut currency: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut result: Value = Value::new_array();
        let mut array_data: Value = self.to_array(data.clone());
        let mut i: usize = 0;
        while i < array_data.len() {
            let mut item_or_items: Value = self.parse_ledger_entry(array_data.get(i.into()), currency.clone());
            if Array::is_array(item_or_items.clone()).is_truthy() {
                let mut j: usize = 0;
                while j < item_or_items.len() {
                    result.push(extend_2(item_or_items.get(j.into()), params.clone()));
                    j += 1;
                };
            } else {
                result.push(extend_2(item_or_items.clone(), params.clone()));
            };
            i += 1;
        };
        result = self.sort_by(result.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut code: Value = if currency.clone().is_nonnullish() { currency.get(Value::from("code")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Bittrex::filter_by_currency_since_limit(self, result.clone(), code.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn nonce(&self) -> Value {
        return self.seconds();
    }

    fn set_headers(&mut self, mut headers: Value) -> Value {
        return headers.clone();
    }

    fn market_id(&mut self, mut symbol: Value) -> Value {
        let mut market: Value = Bittrex::market(self, symbol.clone());
        if market.clone().is_nonnullish() {
            return market.get(Value::from("id"));
        };
        return symbol.clone();
    }

    fn symbol(&self, mut symbol: Value) -> Value {
        let mut market: Value = Bittrex::market(self, symbol.clone());
        return self.safe_string(market.clone(), Value::from("symbol"), symbol.clone());
    }

    fn resolve_path(&mut self, mut path: Value, mut params: Value) -> Value {
        return Value::Json(serde_json::Value::Array(vec![self.implode_params(path.clone(), params.clone()).into(), self.omit(params.clone(), self.extract_params(path.clone())).into()]));
    }

    fn filter_by_array(&self, mut objects: Value, mut key: Value, mut values: Value, mut indexed: Value) -> Value {
        indexed = indexed.or_default(true.into());
        objects = self.to_array(objects.clone());
        // return all of them if no values were passed
        if values.clone().is_nullish() || !values.is_truthy() {
            return if indexed.is_truthy() { self.index_by(objects.clone(), key.clone(), Value::Undefined) } else { objects.clone() };
        };
        let mut results: Value = Value::new_array();
        let mut i: usize = 0;
        while i < objects.len() {
            if self.in_array(objects.get(i.into()).get(key.clone()), values.clone()).is_truthy() {
                results.push(objects.get(i.into()));
            };
            i += 1;
        };
        return if indexed.is_truthy() { self.index_by(results.clone(), key.clone(), Value::Undefined) } else { results.clone() };
    }

    async fn fetch2(&mut self, mut path: Value, mut api: Value, mut method: Value, mut params: Value, mut headers: Value, mut body: Value, mut config: Value, mut context: Value) -> Value {
        api = api.or_default(Value::from("public"));
        method = method.or_default(Value::from("GET"));
        params = params.or_default(Value::new_object());
        config = config.or_default(Value::new_object());
        context = context.or_default(Value::new_object());
        if self.get("enable_rate_limit".into()).is_truthy() {
            let mut cost: Value = Bittrex::calculate_rate_limiter_cost(self, api.clone(), method.clone(), path.clone(), params.clone(), config.clone(), context.clone());
            self.throttle(cost.clone()).await;
        };
        self.set("last_rest_request_timestamp".into(), self.milliseconds());
        let mut request: Value = Bittrex::sign(self, path.clone(), api.clone(), method.clone(), params.clone(), headers.clone(), body.clone());
        return self.fetch(request.get(Value::from("url")), request.get(Value::from("method")), request.get(Value::from("headers")), request.get(Value::from("body"))).await;
    }

    async fn request(&mut self, mut path: Value, mut api: Value, mut method: Value, mut params: Value, mut headers: Value, mut body: Value, mut config: Value, mut context: Value) -> Value {
        api = api.or_default(Value::from("public"));
        method = method.or_default(Value::from("GET"));
        params = params.or_default(Value::new_object());
        config = config.or_default(Value::new_object());
        context = context.or_default(Value::new_object());
        return Bittrex::fetch2(self, path.clone(), api.clone(), method.clone(), params.clone(), headers.clone(), body.clone(), config.clone(), context.clone()).await;
    }

    async fn load_accounts(&mut self, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        if reload.is_truthy() {
            self.set("accounts".into(), self.fetch_accounts(params.clone()).await);
        } else {
            if self.get("accounts".into()).is_truthy() {
                return self.get("accounts".into());
            } else {
                self.set("accounts".into(), self.fetch_accounts(params.clone()).await);
            };
        };
        self.set("accounts_by_id".into(), self.index_by(self.get("accounts".into()), Value::from("id"), Value::Undefined));
        return self.get("accounts".into());
    }

    async fn fetch_ohlcvc(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("fetchTrades")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchOHLCV() is not supported yet"))"###);
        };
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut trades: Value = Bittrex::fetch_trades(self, symbol.clone(), since.clone(), limit.clone(), params.clone()).await;
        return self.build_ohlcvc(trades.clone(), timeframe.clone(), since.clone(), limit.clone());
    }

    fn parse_trading_view_ohlcv(&self, mut ohlcvs: Value, mut market: Value, mut timeframe: Value, mut since: Value, mut limit: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        let mut result: Value = Bittrex::convert_trading_view_to_ohlcv(self, ohlcvs.clone(), Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined);
        return Bittrex::parse_ohlcvs(self, result.clone(), market.clone(), timeframe.clone(), since.clone(), limit.clone());
    }

    async fn edit_limit_buy_order(&mut self, mut id: Value, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Bittrex::edit_limit_order(self, id.clone(), symbol.clone(), Value::from("buy"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn edit_limit_sell_order(&mut self, mut id: Value, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Bittrex::edit_limit_order(self, id.clone(), symbol.clone(), Value::from("sell"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn edit_limit_order(&mut self, mut id: Value, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Bittrex::edit_order(self, id.clone(), symbol.clone(), Value::from("limit"), side.clone(), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn edit_order(&mut self, mut id: Value, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::cancel_order(self, id.clone(), symbol.clone(), Value::Undefined).await;
        return Bittrex::create_order(self, symbol.clone(), r#type.clone(), side.clone(), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn fetch_permissions(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchPermissions() is not supported yet"))"###);
        Value::Undefined
    }

    fn parse_bid_ask(&self, mut bidask: Value, mut price_key: Value, mut amount_key: Value) -> Value {
        price_key = price_key.or_default(Value::from(0));
        amount_key = amount_key.or_default(Value::from(1));
        let mut price: Value = Bittrex::safe_number(self, bidask.clone(), price_key.clone(), Value::Undefined);
        let mut amount: Value = Bittrex::safe_number(self, bidask.clone(), amount_key.clone(), Value::Undefined);
        return Value::Json(serde_json::Value::Array(vec![price.clone().into(), amount.clone().into()]));
    }

    fn safe_currency(&self, mut currency_id: Value, mut currency: Value) -> Value {
        if currency_id.clone().is_nullish() && currency.clone().is_nonnullish() {
            return currency.clone();
        };
        if self.get("currencies_by_id".into()).is_nonnullish() && self.get("currencies_by_id".into()).contains_key(currency_id.clone()) {
            return self.get("currencies_by_id".into()).get(currency_id.clone());
        };
        let mut code: Value = currency_id.clone();
        if currency_id.clone().is_nonnullish() {
            code = Bittrex::common_currency_code(self, currency_id.to_upper_case());
        };
        return Value::Json(normalize(&Value::Json(json!({
            "id": currency_id,
            "code": code
        }))).unwrap());
    }

    fn safe_market(&self, mut market_id: Value, mut market: Value, mut delimiter: Value) -> Value {
        let mut result: Value = Value::Json(normalize(&Value::Json(json!({
            "id": market_id,
            "symbol": market_id,
            "base": Value::Undefined,
            "quote": Value::Undefined,
            "baseId": Value::Undefined,
            "quoteId": Value::Undefined,
            "active": Value::Undefined,
            "type": Value::Undefined,
            "linear": Value::Undefined,
            "inverse": Value::Undefined,
            "spot": false,
            "swap": false,
            "future": false,
            "option": false,
            "margin": false,
            "contract": false,
            "contractSize": Value::Undefined,
            "expiry": Value::Undefined,
            "expiryDatetime": Value::Undefined,
            "optionType": Value::Undefined,
            "strike": Value::Undefined,
            "settle": Value::Undefined,
            "settleId": Value::Undefined,
            "precision": Value::Json(normalize(&Value::Json(json!({
                "amount": Value::Undefined,
                "price": Value::Undefined
            }))).unwrap()),
            "limits": Value::Json(normalize(&Value::Json(json!({
                "amount": Value::Json(normalize(&Value::Json(json!({
                    "min": Value::Undefined,
                    "max": Value::Undefined
                }))).unwrap()),
                "price": Value::Json(normalize(&Value::Json(json!({
                    "min": Value::Undefined,
                    "max": Value::Undefined
                }))).unwrap()),
                "cost": Value::Json(normalize(&Value::Json(json!({
                    "min": Value::Undefined,
                    "max": Value::Undefined
                }))).unwrap())
            }))).unwrap()),
            "info": Value::Undefined
        }))).unwrap());
        if market_id.clone().is_nonnullish() {
            if self.get("markets_by_id".into()).is_nonnullish() && self.get("markets_by_id".into()).contains_key(market_id.clone()) {
                market = self.get("markets_by_id".into()).get(market_id.clone());
            } else if delimiter.clone().is_nonnullish() {
                let mut parts: Value = market_id.split(delimiter.clone());
                let mut parts_length: Value = parts.len().into();
                if parts_length.clone() == Value::from(2) {
                    result.set("baseId".into(), self.safe_string(parts.clone(), Value::from(0), Value::Undefined));
                    result.set("quoteId".into(), self.safe_string(parts.clone(), Value::from(1), Value::Undefined));
                    result.set("base".into(), Bittrex::safe_currency_code(self, result.get(Value::from("baseId")), Value::Undefined));
                    result.set("quote".into(), Bittrex::safe_currency_code(self, result.get(Value::from("quoteId")), Value::Undefined));
                    result.set("symbol".into(), result.get(Value::from("base")) + Value::from("/") + result.get(Value::from("quote")));
                    return result.clone();
                } else {
                    return result.clone();
                };
            };
        };
        if market.clone().is_nonnullish() {
            return market.clone();
        };
        return result.clone();
    }

    fn check_required_credentials(&mut self, mut error: Value) -> Value {
        error = error.or_default(true.into());
        let mut keys: Value = Object::keys(self.get("required_credentials".into()));
        let mut i: usize = 0;
        while i < keys.len() {
            let mut key: Value = keys.get(i.into());
            if self.get("required_credentials".into()).get(key.clone()).is_truthy() && !self.get(key.clone()).is_truthy() {
                if error.is_truthy() {
                    panic!(r###"AuthenticationError::new(self.get("id".into()) + Value::from(r#" requires ""#) + key.clone() + Value::from(r#"" credential"#))"###);
                } else {
                    return error.clone();
                };
            };
            i += 1;
        };
        return true.into();
    }

    fn oath(&mut self) -> Value {
        if self.get("twofa".into()).is_nonnullish() {
            return self.totp(self.get("twofa".into()));
        } else {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" exchange.twofa has not been set for 2FA Two-Factor Authentication"))"###);
        };
        Value::Undefined
    }

    async fn fetch_partial_balance(&mut self, mut part: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut balance: Value = Bittrex::fetch_balance(self, params.clone()).await;
        return balance.get(part.clone());
    }

    async fn fetch_free_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Bittrex::fetch_partial_balance(self, Value::from("free"), params.clone()).await;
    }

    async fn fetch_used_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Bittrex::fetch_partial_balance(self, Value::from("used"), params.clone()).await;
    }

    async fn fetch_total_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Bittrex::fetch_partial_balance(self, Value::from("total"), params.clone()).await;
    }

    async fn fetch_status(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchTime")).is_truthy() {
            let mut time: Value = Bittrex::fetch_time(self, params.clone()).await;
            self.set("status".into(), extend_2(self.get("status".into()), Value::Json(normalize(&Value::Json(json!({
                "updated": time
            }))).unwrap())));
        };
        return self.get("status".into());
    }

    async fn fetch_funding_fee(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut warn_on_fetch_funding_fee: Value = self.safe_value(self.get("options".into()), Value::from("warnOnFetchFundingFee"), true.into());
        if warn_on_fetch_funding_fee.is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(r#" fetchFundingFee() method is deprecated, it will be removed in July 2022, please, use fetchTransactionFee() or set exchange.options["warnOnFetchFundingFee"] = false to suppress this warning"#))"###);
        };
        return Bittrex::fetch_transaction_fee(self, code.clone(), params.clone()).await;
    }

    async fn fetch_funding_fees(&mut self, mut codes: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut warn_on_fetch_funding_fees: Value = self.safe_value(self.get("options".into()), Value::from("warnOnFetchFundingFees"), true.into());
        if warn_on_fetch_funding_fees.is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(r#" fetchFundingFees() method is deprecated, it will be removed in July 2022. Please, use fetchTransactionFees() or set exchange.options["warnOnFetchFundingFees"] = false to suppress this warning"#))"###);
        };
        return Bittrex::fetch_transaction_fees(self, codes.clone(), params.clone()).await;
    }

    async fn fetch_transaction_fee(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("fetchTransactionFees")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTransactionFee() is not supported yet"))"###);
        };
        return Bittrex::fetch_transaction_fees(self, Value::Json(serde_json::Value::Array(vec![code.clone().into()])), params.clone()).await;
    }

    async fn fetch_transaction_fees(&mut self, mut codes: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTransactionFees() is not supported yet"))"###);
        Value::Undefined
    }

    fn get_supported_mapping(&self, mut key: Value, mut mapping: Value) -> Value {
        mapping = mapping.or_default(Value::new_object());
        if mapping.contains_key(key.clone()) {
            return mapping.get(key.clone());
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" ") + key.clone() + Value::from(" does not have a value in mapping"))"###);
        };
        Value::Undefined
    }

    async fn fetch_borrow_rate(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
        if !self.get("has".into()).get(Value::from("fetchBorrowRates")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchBorrowRate() is not supported yet"))"###);
        };
        let mut borrow_rates: Value = self.fetch_borrow_rates(params.clone()).await;
        let mut rate: Value = self.safe_value(borrow_rates.clone(), code.clone(), Value::Undefined);
        if rate.clone().is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" fetchBorrowRate() could not find the borrow rate for currency code ") + code.clone())"###);
        };
        return rate.clone();
    }

    fn handle_market_type_and_params(&mut self, mut method_name: Value, mut market: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut default_type: Value = self.safe_string_2(self.get("options".into()), Value::from("defaultType"), Value::from("type"), Value::from("spot"));
        let mut method_options: Value = self.safe_value(self.get("options".into()), method_name.clone(), Value::Undefined);
        let mut method_type: Value = default_type.clone();
        if method_options.clone().is_nonnullish() {
            if method_options.typeof_() == Value::from("string") {
                method_type = method_options.clone();
            } else {
                method_type = self.safe_string_2(method_options.clone(), Value::from("defaultType"), Value::from("type"), method_type.clone());
            };
        };
        let mut market_type: Value = if market.clone().is_nullish() { method_type.clone() } else { market.get(Value::from("type")) };
        let mut r#type: Value = self.safe_string_2(params.clone(), Value::from("defaultType"), Value::from("type"), market_type.clone());
        params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("defaultType").into(), Value::from("type").into()])));
        return Value::Json(serde_json::Value::Array(vec![r#type.clone().into(), params.clone().into()]));
    }

    fn handle_sub_type_and_params(&mut self, mut method_name: Value, mut market: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut sub_type: Value = Value::Undefined;
        // if set in params, it takes precedence
        let mut sub_type_in_params: Value = self.safe_string_2(params.clone(), Value::from("subType"), Value::from("subType"), Value::Undefined);
        // avoid omitting if it's not present
        if sub_type_in_params.clone().is_nonnullish() {
            sub_type = sub_type_in_params.clone();
            params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("defaultSubType").into(), Value::from("subType").into()])));
        } else {
            // at first, check from market object
            if market.clone().is_nonnullish() {
                if market.get(Value::from("linear")).is_truthy() {
                    sub_type = Value::from("linear");
                } else if market.get(Value::from("inverse")).is_truthy() {
                    sub_type = Value::from("inverse");
                };
            };
            // if it was not defined in market object
            if sub_type.clone().is_nullish() {
                let mut exchange_wide_value: Value = self.safe_string_2(self.get("options".into()), Value::from("defaultSubType"), Value::from("subType"), Value::from("linear"));
                let mut method_options: Value = self.safe_value(self.get("options".into()), method_name.clone(), Value::new_object());
                sub_type = self.safe_string_2(method_options.clone(), Value::from("defaultSubType"), Value::from("subType"), exchange_wide_value.clone());
            };
        };
        return Value::Json(serde_json::Value::Array(vec![sub_type.clone().into(), params.clone().into()]));
    }

    fn throw_exactly_matched_exception(&mut self, mut exact: Value, mut string: Value, mut message: Value) -> () {
        if exact.contains_key(string.clone()) {
            panic!(r###"exact.get(string.clone())::new(message)"###);
        };
    }

    fn throw_broadly_matched_exception(&mut self, mut broad: Value, mut string: Value, mut message: Value) -> () {
        let mut broad_key: Value = Bittrex::find_broadly_matched_key(self, broad.clone(), string.clone());
        if broad_key.clone().is_nonnullish() {
            panic!(r###"broad.get(broad_key.clone())::new(message)"###);
        };
    }

    fn find_broadly_matched_key(&mut self, mut broad: Value, mut string: Value) -> Value {
        // a helper for matching error strings exactly vs broadly
        let mut keys: Value = Object::keys(broad.clone());
        let mut i: usize = 0;
        while i < keys.len() {
            let mut key: Value = keys.get(i.into());
            if string.index_of(key.clone()) >= Value::from(0) {
                return key.clone();
            };
            i += 1;
        };
        return Value::Undefined;
    }

    fn calculate_rate_limiter_cost(&mut self, mut api: Value, mut method: Value, mut path: Value, mut params: Value, mut config: Value, mut context: Value) -> Value {
        config = config.or_default(Value::new_object());
        context = context.or_default(Value::new_object());
        return self.safe_value(config.clone(), Value::from("cost"), Value::from(1));
    }

    async fn fetch_order_status(&mut self, mut id: Value, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut order: Value = Bittrex::fetch_order(self, id.clone(), symbol.clone(), params.clone()).await;
        return order.get(Value::from("status"));
    }

    async fn fetch_unified_order(&mut self, mut order: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Bittrex::fetch_order(self, self.safe_value(order.clone(), Value::from("id"), Value::Undefined), self.safe_value(order.clone(), Value::from("symbol"), Value::Undefined), params.clone()).await;
    }

    async fn cancel_unified_order(&mut self, mut order: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Bittrex::cancel_order(self, self.safe_value(order.clone(), Value::from("id"), Value::Undefined), self.safe_value(order.clone(), Value::from("symbol"), Value::Undefined), params.clone()).await;
    }

    async fn fetch_orders(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchOrders() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_transactions(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTransactions() is not supported yet"))"###);
        Value::Undefined
    }

    fn account(&self) -> Value {
        return Value::Json(normalize(&Value::Json(json!({
            "free": Value::Undefined,
            "used": Value::Undefined,
            "total": Value::Undefined
        }))).unwrap());
    }

    fn common_currency_code(&self, mut currency: Value) -> Value {
        if !self.get("substitute_common_currency_codes".into()).is_truthy() {
            return currency.clone();
        };
        return self.safe_string(self.get("common_currencies".into()), currency.clone(), currency.clone());
    }

    fn currency(&self, mut code: Value) -> Value {
        if self.get("currencies".into()).is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" currencies not loaded"))"###);
        };
        if code.typeof_() == Value::from("string") {
            if self.get("currencies".into()).contains_key(code.clone()) {
                return self.get("currencies".into()).get(code.clone());
            } else if self.get("currencies_by_id".into()).contains_key(code.clone()) {
                return self.get("currencies_by_id".into()).get(code.clone());
            };
        };
        panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" does not have currency code ") + code.clone())"###);
        Value::Undefined
    }

    fn market(&self, mut symbol: Value) -> Value {
        if self.get("markets".into()).is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" markets not loaded"))"###);
        };
        if self.get("markets_by_id".into()).is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" markets not loaded"))"###);
        };
        if symbol.typeof_() == Value::from("string") {
            if self.get("markets".into()).contains_key(symbol.clone()) {
                return self.get("markets".into()).get(symbol.clone());
            } else if self.get("markets_by_id".into()).contains_key(symbol.clone()) {
                return self.get("markets_by_id".into()).get(symbol.clone());
            };
        };
        panic!(r###"BadSymbol::new(self.get("id".into()) + Value::from(" does not have market symbol ") + symbol.clone())"###);
        Value::Undefined
    }

    fn handle_withdraw_tag_and_params(&mut self, mut tag: Value, mut params: Value) -> Value {
        if tag.typeof_() == Value::from("object") {
            params = extend_2(tag.clone(), params.clone());
            tag = Value::Undefined;
        };
        if tag.clone().is_nullish() {
            tag = self.safe_string(params.clone(), Value::from("tag"), Value::Undefined);
            if tag.clone().is_nonnullish() {
                params = self.omit(params.clone(), Value::from("tag"));
            };
        };
        return Value::Json(serde_json::Value::Array(vec![tag.clone().into(), params.clone().into()]));
    }

    async fn create_limit_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Bittrex::create_order(self, symbol.clone(), Value::from("limit"), side.clone(), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_market_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Bittrex::create_order(self, symbol.clone(), Value::from("market"), side.clone(), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_limit_buy_order(&mut self, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Bittrex::create_order(self, symbol.clone(), Value::from("limit"), Value::from("buy"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_limit_sell_order(&mut self, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Bittrex::create_order(self, symbol.clone(), Value::from("limit"), Value::from("sell"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_market_buy_order(&mut self, mut symbol: Value, mut amount: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Bittrex::create_order(self, symbol.clone(), Value::from("market"), Value::from("buy"), amount.clone(), Value::Undefined, params.clone()).await;
    }

    async fn create_market_sell_order(&mut self, mut symbol: Value, mut amount: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Bittrex::create_order(self, symbol.clone(), Value::from("market"), Value::from("sell"), amount.clone(), Value::Undefined, params.clone()).await;
    }

    fn cost_to_precision(&mut self, mut symbol: Value, mut cost: Value) -> Value {
        let mut market: Value = Bittrex::market(self, symbol.clone());
        return self.decimal_to_precision(cost.clone(), TRUNCATE.into(), market.get(Value::from("precision")).get(Value::from("price")), self.get("precision_mode".into()), self.get("padding_mode".into()));
    }

    fn price_to_precision(&mut self, mut symbol: Value, mut price: Value) -> Value {
        let mut market: Value = Bittrex::market(self, symbol.clone());
        return self.decimal_to_precision(price.clone(), ROUND.into(), market.get(Value::from("precision")).get(Value::from("price")), self.get("precision_mode".into()), self.get("padding_mode".into()));
    }

    fn amount_to_precision(&mut self, mut symbol: Value, mut amount: Value) -> Value {
        let mut market: Value = Bittrex::market(self, symbol.clone());
        return self.decimal_to_precision(amount.clone(), TRUNCATE.into(), market.get(Value::from("precision")).get(Value::from("amount")), self.get("precision_mode".into()), self.get("padding_mode".into()));
    }

    fn currency_to_precision(&mut self, mut code: Value, mut fee: Value, mut network_code: Value) -> Value {
        let mut currency: Value = self.get("currencies".into()).get(code.clone());
        let mut precision: Value = self.safe_value(currency.clone(), Value::from("precision"), Value::Undefined);
        if network_code.clone().is_nonnullish() {
            let mut networks: Value = self.safe_value(currency.clone(), Value::from("networks"), Value::new_object());
            let mut network_item: Value = self.safe_value(networks.clone(), network_code.clone(), Value::new_object());
            precision = self.safe_value(network_item.clone(), Value::from("precision"), precision.clone());
        };
        if precision.clone().is_nullish() {
            return fee.clone();
        } else {
            return self.decimal_to_precision(fee.clone(), ROUND.into(), precision.clone(), self.get("precision_mode".into()), self.get("padding_mode".into()));
        };
        Value::Undefined
    }

    fn safe_number(&self, mut object: Value, mut key: Value, mut d: Value) -> Value {
        let mut value: Value = self.safe_string(object.clone(), key.clone(), Value::Undefined);
        return self.parse_number(value.clone(), d.clone());
    }

    fn safe_number_n(&self, mut object: Value, mut arr: Value, mut d: Value) -> Value {
        let mut value: Value = self.safe_string_n(object.clone(), arr.clone(), Value::Undefined);
        return self.parse_number(value.clone(), d.clone());
    }

    fn parse_precision(&self, mut precision: Value) -> Value {
        if precision.clone().is_nullish() {
            return Value::Undefined;
        };
        return Value::from("1e") + Precise::string_neg(precision.clone());
    }

    async fn load_time_difference(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut server_time: Value = Bittrex::fetch_time(self, params.clone()).await;
        let mut after: Value = self.milliseconds();
        self.get("options".into()).set("timeDifference".into(), after.clone() - server_time.clone());
        return self.get("options".into()).get(Value::from("timeDifference"));
    }

    fn implode_hostname(&mut self, mut url: Value) -> Value {
        return self.implode_params(url.clone(), Value::Json(normalize(&Value::Json(json!({
            "hostname": self.get("hostname".into())
        }))).unwrap()));
    }

    async fn fetch_market_leverage_tiers(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchLeverageTiers")).is_truthy() {
            let mut market: Value = Bittrex::market(self, symbol.clone());
            if !market.get(Value::from("contract")).is_truthy() {
                panic!(r###"BadSymbol::new(self.get("id".into()) + Value::from(" fetchMarketLeverageTiers() supports contract markets only"))"###);
            };
            let mut tiers: Value = self.fetch_leverage_tiers(Value::Json(serde_json::Value::Array(vec![symbol.clone().into()])), Value::Undefined).await;
            return self.safe_value(tiers.clone(), symbol.clone(), Value::Undefined);
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchMarketLeverageTiers() is not supported yet"))"###);
        };
        Value::Undefined
    }

    async fn create_post_only_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createPostOnlyOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from("createPostOnlyOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "postOnly": true
        }))).unwrap()));
        return Bittrex::create_order(self, symbol.clone(), r#type.clone(), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_reduce_only_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createReduceOnlyOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from("createReduceOnlyOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "reduceOnly": true
        }))).unwrap()));
        return Bittrex::create_order(self, symbol.clone(), r#type.clone(), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_stop_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut stop_price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createStopOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" createStopOrder() is not supported yet"))"###);
        };
        if stop_price.clone().is_nullish() {
            panic!(r###"ArgumentsRequired::new(self.get("id".into()) + Value::from(" create_stop_order() requires a stopPrice argument"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "stopPrice": stop_price
        }))).unwrap()));
        return Bittrex::create_order(self, symbol.clone(), r#type.clone(), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_stop_limit_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut stop_price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createStopLimitOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" createStopLimitOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "stopPrice": stop_price
        }))).unwrap()));
        return Bittrex::create_order(self, symbol.clone(), Value::from("limit"), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_stop_market_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut stop_price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createStopMarketOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" createStopMarketOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "stopPrice": stop_price
        }))).unwrap()));
        return Bittrex::create_order(self, symbol.clone(), Value::from("market"), side.clone(), amount.clone(), Value::Undefined, query.clone()).await;
    }

    fn safe_currency_code(&self, mut currency_id: Value, mut currency: Value) -> Value {
        currency = Bittrex::safe_currency(self, currency_id.clone(), currency.clone());
        return currency.get(Value::from("code"));
    }

    fn filter_by_symbol_since_limit(&self, mut array: Value, mut symbol: Value, mut since: Value, mut limit: Value, mut tail: Value) -> Value {
        tail = tail.or_default(false.into());
        return self.filter_by_value_since_limit(array.clone(), Value::from("symbol"), symbol.clone(), since.clone(), limit.clone(), Value::from("timestamp"), tail.clone());
    }

    fn filter_by_currency_since_limit(&self, mut array: Value, mut code: Value, mut since: Value, mut limit: Value, mut tail: Value) -> Value {
        tail = tail.or_default(false.into());
        return self.filter_by_value_since_limit(array.clone(), Value::from("currency"), code.clone(), since.clone(), limit.clone(), Value::from("timestamp"), tail.clone());
    }

    fn parse_tickers(&self, mut tickers: Value, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        //
        // the value of tickers is either a dict or a list
        //
        // dict
        //
        //     {
        //         'marketId1': { ... },
        //         'marketId2': { ... },
        //         'marketId3': { ... },
        //         ...
        //     }
        //
        // list
        //
        //     [
        //         { 'market': 'marketId1', ... },
        //         { 'market': 'marketId2', ... },
        //         { 'market': 'marketId3', ... },
        //         ...
        //     ]
        //
        let mut results: Value = Value::new_array();
        if Array::is_array(tickers.clone()).is_truthy() {
            let mut i: usize = 0;
            while i < tickers.len() {
                let mut ticker: Value = extend_2(Bittrex::parse_ticker(self, tickers.get(i.into()), Value::Undefined), params.clone());
                results.push(ticker.clone());
                i += 1;
            };
        } else {
            let mut market_ids: Value = Object::keys(tickers.clone());
            let mut i: usize = 0;
            while i < market_ids.len() {
                let mut market_id: Value = market_ids.get(i.into());
                let mut market: Value = Bittrex::safe_market(self, market_id.clone(), Value::Undefined, Value::Undefined);
                let mut ticker: Value = extend_2(Bittrex::parse_ticker(self, tickers.get(market_id.clone()), market.clone()), params.clone());
                results.push(ticker.clone());
                i += 1;
            };
        };
        symbols = Bittrex::market_symbols(self, symbols.clone());
        return Bittrex::filter_by_array(self, results.clone(), Value::from("symbol"), symbols.clone(), Value::Undefined);
    }

    fn parse_deposit_addresses(&self, mut addresses: Value, mut codes: Value, mut indexed: Value, mut params: Value) -> Value {
        indexed = indexed.or_default(true.into());
        params = params.or_default(Value::new_object());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < addresses.len() {
            let mut address: Value = extend_2(self.parse_deposit_address(addresses.get(i.into()), Value::Undefined), params.clone());
            result.push(address.clone());
            i += 1;
        };
        if codes.clone().is_nonnullish() {
            result = Bittrex::filter_by_array(self, result.clone(), Value::from("currency"), codes.clone(), false.into());
        };
        result = if indexed.is_truthy() { self.index_by(result.clone(), Value::from("currency"), Value::Undefined) } else { result.clone() };
        return result.clone();
    }

    fn parse_borrow_interests(&self, mut response: Value, mut market: Value) -> Value {
        let mut interests: Value = Value::new_array();
        let mut i: usize = 0;
        while i < response.len() {
            let mut row: Value = response.get(i.into());
            interests.push(self.parse_borrow_interest(row.clone(), market.clone()));
            i += 1;
        };
        return interests.clone();
    }

    fn parse_funding_rate_histories(&self, mut response: Value, mut market: Value, mut since: Value, mut limit: Value) -> Value {
        let mut rates: Value = Value::new_array();
        let mut i: usize = 0;
        while i < response.len() {
            let mut entry: Value = response.get(i.into());
            rates.push(self.parse_funding_rate_history(entry.clone(), market.clone()));
            i += 1;
        };
        let mut sorted: Value = self.sort_by(rates.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut symbol: Value = if market.clone().is_nullish() { Value::Undefined } else { market.get(Value::from("symbol")) };
        return Bittrex::filter_by_symbol_since_limit(self, sorted.clone(), symbol.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    fn safe_symbol(&self, mut market_id: Value, mut market: Value, mut delimiter: Value) -> Value {
        market = Bittrex::safe_market(self, market_id.clone(), market.clone(), delimiter.clone());
        return market.get(Value::from("symbol"));
    }

    fn parse_funding_rate(&self, mut contract: Value, mut market: Value) -> Value {
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" parseFundingRate() is not supported yet"))"###);
        Value::Undefined
    }

    fn parse_funding_rates(&self, mut response: Value, mut market: Value) -> Value {
        let mut result: Value = Value::new_object();
        let mut i: usize = 0;
        while i < response.len() {
            let mut parsed: Value = Bittrex::parse_funding_rate(self, response.get(i.into()), market.clone());
            result.set(parsed.get(Value::from("symbol")), parsed.clone());
            i += 1;
        };
        return result.clone();
    }

    /// Returns true if a post only order, false otherwise
    ///
    /// @ignore
    ///
    /// # Arguments
    ///
    /// * `type` {string} - Order type
    /// * `exchangeSpecificParam` {boolean} - exchange specific postOnly
    /// * `params` {object} - exchange specific params
    fn is_post_only(&mut self, mut is_market_order: Value, mut exchange_specific_param: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut time_in_force: Value = self.safe_string_upper(params.clone(), Value::from("timeInForce"), Value::Undefined);
        let mut post_only: Value = self.safe_value_2(params.clone(), Value::from("postOnly"), Value::from("post_only"), false.into());
        // we assume timeInForce is uppercase from safeStringUpper (params, 'timeInForce')
        let mut ioc: Value = (time_in_force.clone() == Value::from("IOC")).into();
        let mut fok: Value = (time_in_force.clone() == Value::from("FOK")).into();
        let mut time_in_force_post_only: Value = (time_in_force.clone() == Value::from("PO")).into();
        post_only = (post_only.is_truthy() || time_in_force_post_only.is_truthy() || exchange_specific_param.is_truthy()).into();
        if post_only.is_truthy() {
            if ioc.is_truthy() || fok.is_truthy() {
                panic!(r###"InvalidOrder::new(self.get("id".into()) + Value::from(" postOnly orders cannot have timeInForce equal to ") + time_in_force.clone())"###);
            } else if is_market_order.is_truthy() {
                panic!(r###"InvalidOrder::new(self.get("id".into()) + Value::from(" market orders cannot be postOnly"))"###);
            } else {
                return true.into();
            };
        } else {
            return false.into();
        };
        Value::Undefined
    }

    fn parse_open_interest(&self, mut interest: Value, mut market: Value) -> Value {
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" parseOpenInterest () is not supported yet"))"###);
        Value::Undefined
    }

    fn parse_open_interests(&self, mut response: Value, mut market: Value, mut since: Value, mut limit: Value) -> Value {
        let mut interests: Value = Value::new_array();
        let mut i: usize = 0;
        while i < response.len() {
            let mut entry: Value = response.get(i.into());
            let mut interest: Value = Bittrex::parse_open_interest(self, entry.clone(), market.clone());
            interests.push(interest.clone());
            i += 1;
        };
        let mut sorted: Value = self.sort_by(interests.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut symbol: Value = self.safe_string(market.clone(), Value::from("symbol"), Value::Undefined);
        return Bittrex::filter_by_symbol_since_limit(self, sorted.clone(), symbol.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    async fn fetch_funding_rate(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchFundingRates")).is_truthy() {
            Bittrex::load_markets(self, Value::Undefined, Value::Undefined).await;
            let mut market: Value = Bittrex::market(self, symbol.clone());
            if !market.get(Value::from("contract")).is_truthy() {
                panic!(r###"BadSymbol::new(self.get("id".into()) + Value::from(" fetchFundingRate() supports contract markets only"))"###);
            };
            let mut rates: Value = self.fetch_funding_rates(Value::Json(serde_json::Value::Array(vec![symbol.clone().into()])), params.clone()).await;
            let mut rate: Value = self.safe_value(rates.clone(), symbol.clone(), Value::Undefined);
            if rate.clone().is_nullish() {
                panic!(r###"NullResponse::new(self.get("id".into()) + Value::from(" fetchFundingRate () returned no data for ") + symbol.clone())"###);
            } else {
                return rate.clone();
            };
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchFundingRate () is not supported yet"))"###);
        };
        Value::Undefined
    }

    /// Returns a list of candles ordered as timestamp, open, high, low, close, undefined
    ///
    /// Fetches historical mark price candlestick data containing the open, high, low, and close price of a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch OHLCV data for
    /// * `timeframe` {string} - the length of time each candle represents
    /// * `since` {int|undefined} - timestamp in ms of the earliest candle to fetch
    /// * `limit` {int|undefined} - the maximum amount of candles to fetch
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    async fn fetch_mark_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchMarkOHLCV")).is_truthy() {
            let mut request: Value = Value::Json(normalize(&Value::Json(json!({
                "price": "mark"
            }))).unwrap());
            return Bittrex::fetch_ohlcv(self, symbol.clone(), timeframe.clone(), since.clone(), limit.clone(), extend_2(request.clone(), params.clone())).await;
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchMarkOHLCV () is not supported yet"))"###);
        };
        Value::Undefined
    }

    /// Returns a list of candles ordered as timestamp, open, high, low, close, undefined
    ///
    /// Fetches historical index price candlestick data containing the open, high, low, and close price of a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch OHLCV data for
    /// * `timeframe` {string} - the length of time each candle represents
    /// * `since` {int|undefined} - timestamp in ms of the earliest candle to fetch
    /// * `limit` {int|undefined} - the maximum amount of candles to fetch
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    async fn fetch_index_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchIndexOHLCV")).is_truthy() {
            let mut request: Value = Value::Json(normalize(&Value::Json(json!({
                "price": "index"
            }))).unwrap());
            return Bittrex::fetch_ohlcv(self, symbol.clone(), timeframe.clone(), since.clone(), limit.clone(), extend_2(request.clone(), params.clone())).await;
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchIndexOHLCV () is not supported yet"))"###);
        };
        Value::Undefined
    }

    /// Returns a list of candles ordered as timestamp, open, high, low, close, undefined
    ///
    /// Fetches historical premium index price candlestick data containing the open, high, low, and close price of a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch OHLCV data for
    /// * `timeframe` {string} - the length of time each candle represents
    /// * `since` {int|undefined} - timestamp in ms of the earliest candle to fetch
    /// * `limit` {int|undefined} - the maximum amount of candles to fetch
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    async fn fetch_premium_index_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchPremiumIndexOHLCV")).is_truthy() {
            let mut request: Value = Value::Json(normalize(&Value::Json(json!({
                "price": "premiumIndex"
            }))).unwrap());
            return Bittrex::fetch_ohlcv(self, symbol.clone(), timeframe.clone(), since.clone(), limit.clone(), extend_2(request.clone(), params.clone())).await;
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchPremiumIndexOHLCV () is not supported yet"))"###);
        };
        Value::Undefined
    }

    /// Returns returns the exchange specific value for timeInForce
    ///
    /// @ignore
    /// * Must add timeInForce to this.options to use this method
    fn handle_time_in_force(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut time_in_force: Value = self.safe_string_upper(params.clone(), Value::from("timeInForce"), Value::Undefined);
        // supported values GTC, IOC, PO
        if time_in_force.clone().is_nonnullish() {
            let mut exchange_value: Value = self.safe_string(self.get("options".into()).get(Value::from("timeInForce")), time_in_force.clone(), Value::Undefined);
            if exchange_value.clone().is_nullish() {
                panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(r#" does not support timeInForce ""#) + time_in_force.clone() + Value::from(r#"""#))"###);
            };
            return exchange_value.clone();
        };
        return Value::Undefined;
    }

    /// Returns the exchange specific account name or the isolated margin id for transfers
    ///
    /// @ignore
    /// * Must add accountsByType to this.options to use this method
    ///
    /// # Arguments
    ///
    /// * `account` {string} - key for account name in this.options['accountsByType']
    fn parse_account(&self, mut account: Value) -> Value {
        let mut accounts_by_type: Value = self.safe_value(self.get("options".into()), Value::from("accountsByType"), Value::new_object());
        let mut symbols: Value = self.get("symbols".into());
        if accounts_by_type.contains_key(account.clone()) {
            return accounts_by_type.get(account.clone());
        } else if self.in_array(account.clone(), symbols.clone()).is_truthy() {
            let mut market: Value = Bittrex::market(self, account.clone());
            return market.get(Value::from("id"));
        } else {
            return account.clone();
        };
        Value::Undefined
    }

    /// Returns {[string|undefined, object]} the marginMode in lowercase as specified by params["marginMode"], params["defaultMarginMode"] this.options["marginMode"] or this.options["defaultMarginMode"]
    ///
    /// @ignore
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    fn handle_margin_mode_and_params(&mut self, mut method_name: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut default_margin_mode: Value = self.safe_string_2(self.get("options".into()), Value::from("marginMode"), Value::from("defaultMarginMode"), Value::Undefined);
        let mut method_options: Value = self.safe_value(self.get("options".into()), method_name.clone(), Value::new_object());
        let mut method_margin_mode: Value = self.safe_string_2(method_options.clone(), Value::from("marginMode"), Value::from("defaultMarginMode"), default_margin_mode.clone());
        let mut margin_mode: Value = self.safe_string_lower_2(params.clone(), Value::from("marginMode"), Value::from("defaultMarginMode"), method_margin_mode.clone());
        if margin_mode.clone().is_nonnullish() {
            params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("marginMode").into(), Value::from("defaultMarginMode").into()])));
        };
        return Value::Json(serde_json::Value::Array(vec![margin_mode.clone().into(), params.clone().into()]));
    }

    async fn load_markets_helper(&mut self, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        if !reload.is_truthy() && self.get("markets".into()).is_truthy() {
            if !self.get("markets_by_id".into()).is_truthy() {
                return Bittrex::set_markets(self, self.get("markets".into()), Value::Undefined);
            };
            return self.get("markets".into());
        };
        let mut currencies: Value = Value::Undefined;
        // only call if exchange API provides endpoint (true), thus avoid emulated versions ('emulated')
        if self.get("has".into()).get(Value::from("fetchCurrencies")) == true.into() {
            currencies = Bittrex::fetch_currencies(self, Value::Undefined).await;
        };
        let mut markets: Value = Bittrex::fetch_markets(self, params.clone()).await;
        return Bittrex::set_markets(self, markets.clone(), currencies.clone());
    }

    async fn load_markets(&mut self, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        // this method is async, it returns a promise
        if reload.is_truthy() && !self.get("reloading_markets".into()).is_truthy() || !self.get("markets_loading".into()).is_truthy() {
            self.set("reloading_markets".into(), true.into());
            // TODO This should use a finally block
            let mut markets_loading: Value = Bittrex::load_markets_helper(self, reload.clone(), params.clone()).await;
            self.set("markets_loading".into(), markets_loading.clone());
            self.set("reloading_markets".into(), false.into());
            return self.get("markets_loading".into());
        };
        return self.get("markets_loading".into());
    }

    
    async fn dispatch(&mut self, method: Value, params: Value, context: Value) -> Value {
        match method {
            Value::Json(serde_json::Value::String(ref m)) => {
                match m.as_ref() {
                    "publicGetPing" => Bittrex::request(self, "ping".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetCurrencies" => Bittrex::request(self, "currencies".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetCurrenciesSymbol" => Bittrex::request(self, "currencies/{symbol}".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarkets" => Bittrex::request(self, "markets".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarketsTickers" => Bittrex::request(self, "markets/tickers".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarketsSummaries" => Bittrex::request(self, "markets/summaries".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarketsMarketSymbol" => Bittrex::request(self, "markets/{marketSymbol}".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarketsMarketSymbolSummary" => Bittrex::request(self, "markets/{marketSymbol}/summary".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarketsMarketSymbolOrderbook" => Bittrex::request(self, "markets/{marketSymbol}/orderbook".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarketsMarketSymbolTrades" => Bittrex::request(self, "markets/{marketSymbol}/trades".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarketsMarketSymbolTicker" => Bittrex::request(self, "markets/{marketSymbol}/ticker".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarketsMarketSymbolCandlesCandleIntervalRecent" => Bittrex::request(self, "markets/{marketSymbol}/candles/{candleInterval}/recent".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarketsMarketSymbolCandlesCandleIntervalHistoricalYearMonthDay" => Bittrex::request(self, "markets/{marketSymbol}/candles/{candleInterval}/historical/{year}/{month}/{day}".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarketsMarketSymbolCandlesCandleIntervalHistoricalYearMonth" => Bittrex::request(self, "markets/{marketSymbol}/candles/{candleInterval}/historical/{year}/{month}".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetMarketsMarketSymbolCandlesCandleIntervalHistoricalYear" => Bittrex::request(self, "markets/{marketSymbol}/candles/{candleInterval}/historical/{year}".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetAccount" => Bittrex::request(self, "account".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetAccountFeesFiat" => Bittrex::request(self, "account/fees/fiat".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetAccountFeesFiatCurrencySymbol" => Bittrex::request(self, "account/fees/fiat/{currencySymbol}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetAccountFeesTrading" => Bittrex::request(self, "account/fees/trading".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetAccountFeesTradingMarketSymbol" => Bittrex::request(self, "account/fees/trading/{marketSymbol}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetAccountVolume" => Bittrex::request(self, "account/volume".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetAddresses" => Bittrex::request(self, "addresses".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetAddressesCurrencySymbol" => Bittrex::request(self, "addresses/{currencySymbol}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetBalances" => Bittrex::request(self, "balances".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetBalancesCurrencySymbol" => Bittrex::request(self, "balances/{currencySymbol}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetDepositsOpen" => Bittrex::request(self, "deposits/open".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetDepositsClosed" => Bittrex::request(self, "deposits/closed".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetDepositsByTxIdTxId" => Bittrex::request(self, "deposits/ByTxId/{txId}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetDepositsDepositId" => Bittrex::request(self, "deposits/{depositId}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetExecutions" => Bittrex::request(self, "executions".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOrdersClosed" => Bittrex::request(self, "orders/closed".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOrdersOpen" => Bittrex::request(self, "orders/open".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOrdersOrderId" => Bittrex::request(self, "orders/{orderId}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOrdersOrderIdExecutions" => Bittrex::request(self, "orders/{orderId}/executions".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetPing" => Bittrex::request(self, "ping".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetSubaccountsSubaccountId" => Bittrex::request(self, "subaccounts/{subaccountId}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetSubaccounts" => Bittrex::request(self, "subaccounts".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetWithdrawalsOpen" => Bittrex::request(self, "withdrawals/open".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetWithdrawalsClosed" => Bittrex::request(self, "withdrawals/closed".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetWithdrawalsByTxIdTxId" => Bittrex::request(self, "withdrawals/ByTxId/{txId}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetWithdrawalsWithdrawalId" => Bittrex::request(self, "withdrawals/{withdrawalId}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetWithdrawalsWhitelistAddresses" => Bittrex::request(self, "withdrawals/whitelistAddresses".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetConditionalOrdersConditionalOrderId" => Bittrex::request(self, "conditional-orders/{conditionalOrderId}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetConditionalOrdersClosed" => Bittrex::request(self, "conditional-orders/closed".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetConditionalOrdersOpen" => Bittrex::request(self, "conditional-orders/open".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetTransfersSent" => Bittrex::request(self, "transfers/sent".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetTransfersReceived" => Bittrex::request(self, "transfers/received".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetTransfersTransferId" => Bittrex::request(self, "transfers/{transferId}".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostAddresses" => Bittrex::request(self, "addresses".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostOrders" => Bittrex::request(self, "orders".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostSubaccounts" => Bittrex::request(self, "subaccounts".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostWithdrawals" => Bittrex::request(self, "withdrawals".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostConditionalOrders" => Bittrex::request(self, "conditional-orders".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostTransfers" => Bittrex::request(self, "transfers".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteOrdersOpen" => Bittrex::request(self, "orders/open".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteOrdersOrderId" => Bittrex::request(self, "orders/{orderId}".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteWithdrawalsWithdrawalId" => Bittrex::request(self, "withdrawals/{withdrawalId}".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteConditionalOrdersConditionalOrderId" => Bittrex::request(self, "conditional-orders/{conditionalOrderId}".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    _ => unimplemented!(),
                }
            },
            _ => unimplemented!()
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub struct BittrexImpl(Value);
impl Exchange for BittrexImpl {}
impl Bittrex for BittrexImpl {}
impl ValueTrait for BittrexImpl {
    fn is_undefined(&self) -> bool { self.0.is_undefined() }
    fn is_nullish(&self) -> bool { self.0.is_nullish() }
    fn is_nonnullish(&self) -> bool { self.0.is_nonnullish() }
    fn is_truthy(&self) -> bool { self.0.is_truthy() }
    fn or_default(&self, default: Value) -> Value { self.0.or_default(default) }
    fn is_number(&self) -> bool { self.0.is_number() }
    fn is_string(&self) -> bool { self.0.is_string() }
    fn is_object(&self) -> bool { self.0.is_object() }
    fn is_falsy(&self) -> bool { self.0.is_falsy() }
    fn to_upper_case(&self) -> Value { self.0.to_upper_case() }
    fn unwrap_str(&self) -> &str { self.0.unwrap_str() }
    fn unwrap_usize(&self) -> usize { self.0.unwrap_usize() }
    fn unwrap_bool(&self) -> bool { self.0.unwrap_bool() }
    fn unwrap_precise(&self) -> &Precise { self.0.unwrap_precise() }
    fn unwrap_json(&self) -> &serde_json::Value { self.0.unwrap_json() }
    fn unwrap_json_mut(&mut self) -> &mut serde_json::Value { self.0.unwrap_json_mut() }
    fn unwrap_precise_mut(&mut self) -> &mut Precise { self.0.unwrap_precise_mut() }
    fn len(&self) -> usize { self.0.len() }
    fn get(&self, key: Value) -> Value { self.0.get(key) }
    fn set(&mut self, key: Value, value: Value) { self.0.set(key, value) }
    fn push(&mut self, value: Value) { self.0.push(value) }
    fn split(&self, separator: Value) -> Value { self.0.split(separator) }
    fn contains_key(&self, key: Value) -> bool { self.0.contains_key(key) }
    fn keys(&self) -> Vec<Value> { self.0.keys() }
    fn values(&self) -> Vec<Value> { self.0.values() }
    fn to_array(&self, x: Value) -> Value { self.0.to_array(x) }
    fn index_of(&self, x: Value) -> Value { self.0.index_of(x) }
    fn join(&self, glue: Value) -> Value { self.0.join(glue) }
    fn to_string(&self) -> Value { self.0.to_string() }
    fn typeof_(&self) -> Value { self.0.typeof_() }
    fn slice(&self, start: Value) -> Value { self.0.slice(start) }
}

impl BittrexImpl {
    pub fn new(params: Value) -> Self {
        let mut rv = BittrexImpl(match params {
            Value::Json(_) => params,
            _ => Value::new_object()
        });
        ExchangeImpl::init(&mut rv.0);

        let config_entries = Bittrex::describe(&rv);
        for k in config_entries.keys() {
            rv.set(k.clone(), config_entries.get(k).clone());
        }
        rv
    }
}

