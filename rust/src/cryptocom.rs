#![allow(clippy::all)]
#![allow(dead_code)]
#![allow(unreachable_code)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(unused_comparisons)]
#![allow(unused_mut)]
#![allow(unused_variables)]

use async_trait::async_trait;
use std::str::FromStr;
use serde::{Deserialize, Serialize};
use serde_json::json;
use crate::exchange::{Exchange, ExchangeImpl, Precise, Value, ValueTrait, JSON, Array, Object, Math, parse_int, shift_2, extend_2, normalize};

use crate::exchange::{PRECISE_BASE, TRUNCATE, ROUND, ROUND_UP, ROUND_DOWN};
use crate::exchange::{DECIMAL_PLACES, SIGNIFICANT_DIGITS, TICK_SIZE, NO_PADDING, PAD_WITH_ZERO};

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

#[async_trait]
pub trait Cryptocom : Exchange {
    fn describe(&self) -> Value {
        Value::Json(serde_json::Value::from_str(r###"{
            "id": "cryptocom",
            "name": "Crypto.com",
            "countries": [
                "MT"
            ],
            "enableRateLimit": true,
            "rateLimit": 10,
            "certified": false,
            "pro": true,
            "alias": false,
            "has": {
                "publicAPI": true,
                "privateAPI": true,
                "CORS": false,
                "spot": true,
                "margin": true,
                "cancelAllOrders": true,
                "cancelOrder": true,
                "createLimitOrder": true,
                "createMarketOrder": true,
                "createOrder": true,
                "editOrder": "emulated",
                "fetchBalance": true,
                "fetchBidsAsks": false,
                "fetchBorrowInterest": true,
                "fetchBorrowRate": false,
                "fetchBorrowRateHistory": false,
                "fetchBorrowRates": true,
                "fetchClosedOrders": "emulated",
                "fetchCurrencies": false,
                "fetchDepositAddress": true,
                "fetchDepositAddressesByNetwork": true,
                "fetchDeposits": true,
                "fetchTransactionFees": false,
                "fetchFundingHistory": false,
                "fetchFundingRate": false,
                "fetchFundingRates": false,
                "fetchL2OrderBook": true,
                "fetchMarkets": true,
                "fetchMyTrades": true,
                "fetchOHLCV": true,
                "fetchOpenOrders": true,
                "fetchOrder": true,
                "fetchOrderBook": true,
                "fetchOrders": true,
                "fetchPositions": false,
                "fetchStatus": false,
                "fetchTicker": true,
                "fetchTickers": true,
                "fetchTime": false,
                "fetchTrades": true,
                "fetchTradingFee": false,
                "fetchTradingFees": false,
                "fetchTransactions": false,
                "fetchTransfers": true,
                "fetchWithdrawals": true,
                "setLeverage": false,
                "setMarginMode": false,
                "transfer": true,
                "withdraw": true,
                "borrowMargin": true,
                "fetchBorrowRateHistories": false,
                "fetchMarginMode": false,
                "fetchPositionMode": false,
                "repayMargin": true
            },
            "urls": {
                "logo": "https://user-images.githubusercontent.com/1294454/147792121-38ed5e36-c229-48d6-b49a-48d05fc19ed4.jpeg",
                "api": {
                    "spot": "https://api.crypto.com/v2",
                    "derivatives": "https://deriv-api.crypto.com/v1"
                },
                "www": "https://crypto.com/",
                "doc": "https://exchange-docs.crypto.com/",
                "fees": "https://crypto.com/exchange/document/fees-limits",
                "test": "https://uat-api.3ona.co/v2",
                "referral": "https://crypto.com/exch/5835vstech"
            },
            "api": {
                "spot": {
                    "public": {
                        "get": {
                            "public/auth": 1,
                            "public/get-instruments": 1,
                            "public/get-book": 1,
                            "public/get-candlestick": 1,
                            "public/get-ticker": 1,
                            "public/get-trades": 1,
                            "public/margin/get-transfer-currencies": 1,
                            "public/margin/get-load-currenices": 1,
                            "public/respond-heartbeat": 1
                        }
                    },
                    "private": {
                        "post": {
                            "private/set-cancel-on-disconnect": 3.3333333333333335,
                            "private/get-cancel-on-disconnect": 3.3333333333333335,
                            "private/create-withdrawal": 3.3333333333333335,
                            "private/get-withdrawal-history": 3.3333333333333335,
                            "private/get-currency-networks": 3.3333333333333335,
                            "private/get-deposit-history": 3.3333333333333335,
                            "private/get-deposit-address": 3.3333333333333335,
                            "private/get-account-summary": 3.3333333333333335,
                            "private/create-order": 0.6666666666666666,
                            "private/cancel-order": 0.6666666666666666,
                            "private/cancel-all-orders": 0.6666666666666666,
                            "private/get-order-history": 3.3333333333333335,
                            "private/get-open-orders": 3.3333333333333335,
                            "private/get-order-detail": 0.3333333333333333,
                            "private/get-trades": 100,
                            "private/margin/get-user-config": 3.3333333333333335,
                            "private/margin/get-account-summary": 3.3333333333333335,
                            "private/margin/transfer": 3.3333333333333335,
                            "private/margin/borrow": 3.3333333333333335,
                            "private/margin/repay": 3.3333333333333335,
                            "private/margin/get-transfer-history": 3.3333333333333335,
                            "private/margin/get-borrow-history": 3.3333333333333335,
                            "private/margin/get-interest-history": 3.3333333333333335,
                            "private/margin/get-repay-history": 3.3333333333333335,
                            "private/margin/get-liquidation-history": 3.3333333333333335,
                            "private/margin/get-liquidation-orders": 3.3333333333333335,
                            "private/margin/create-order": 0.6666666666666666,
                            "private/margin/cancel-order": 0.6666666666666666,
                            "private/margin/cancel-all-orders": 0.6666666666666666,
                            "private/margin/get-order-history": 3.3333333333333335,
                            "private/margin/get-open-orders": 3.3333333333333335,
                            "private/margin/get-order-detail": 0.3333333333333333,
                            "private/margin/get-trades": 100,
                            "private/deriv/transfer": 3.3333333333333335,
                            "private/deriv/get-transfer-history": 3.3333333333333335,
                            "private/subaccount/get-sub-accounts": 3.3333333333333335,
                            "private/subaccount/get-transfer-history": 3.3333333333333335,
                            "private/subaccount/transfer": 3.3333333333333335,
                            "private/otc/get-otc-user": 3.3333333333333335,
                            "private/otc/get-instruments": 3.3333333333333335,
                            "private/otc/request-quote": 100,
                            "private/otc/accept-quote": 100,
                            "private/otc/get-quote-history": 3.3333333333333335,
                            "private/otc/get-trade-history": 3.3333333333333335
                        }
                    }
                },
                "derivatives": {
                    "public": {
                        "get": {
                            "public/auth": 3.3333333333333335,
                            "public/get-instruments": 3.3333333333333335,
                            "public/get-book": 1,
                            "public/get-candlestick": 1,
                            "public/get-trades": 1,
                            "public/get-tickers": 1,
                            "public/get-valuations": 1,
                            "public/get-expired-settlement-price": 3.3333333333333335,
                            "public/get-insurance": 1
                        }
                    },
                    "private": {
                        "post": {
                            "private/set-cancel-on-disconnect": 3.3333333333333335,
                            "private/get-cancel-on-disconnect": 3.3333333333333335,
                            "private/user-balance": 3.3333333333333335,
                            "private/user-balance-history": 3.3333333333333335,
                            "private/get-positions": 3.3333333333333335,
                            "private/create-order": 0.6666666666666666,
                            "private/cancel-order": 0.6666666666666666,
                            "private/cancel-all-orders": 0.6666666666666666,
                            "private/close-position": 3.3333333333333335,
                            "private/convert-collateral": 3.3333333333333335,
                            "private/get-order-history": 100,
                            "private/get-open-orders": 3.3333333333333335,
                            "private/get-order-detail": 0.3333333333333333,
                            "private/get-trades": 100,
                            "private/change-account-leverage": 3.3333333333333335,
                            "private/get-transactions": 3.3333333333333335
                        }
                    }
                }
            },
            "requiredCredentials": {
                "apiKey": true,
                "secret": true,
                "uid": false,
                "login": false,
                "password": false,
                "twofa": false,
                "privateKey": false,
                "walletAddress": false,
                "token": false
            },
            "currencies": {},
            "timeframes": {
                "1m": "1m",
                "5m": "5m",
                "15m": "15m",
                "30m": "30m",
                "1h": "1h",
                "4h": "4h",
                "6h": "6h",
                "12h": "12h",
                "1d": "1D",
                "1w": "7D",
                "2w": "14D",
                "1M": "1M"
            },
            "fees": {
                "trading": {
                    "taker": 0.004,
                    "maker": 0.004,
                    "tiers": {
                        "maker": [
                            [
                                0,
                                0.004
                            ],
                            [
                                25000,
                                0.0035
                            ],
                            [
                                50000,
                                0.0015
                            ],
                            [
                                100000,
                                0.001
                            ],
                            [
                                250000,
                                0.0009
                            ],
                            [
                                1000000,
                                0.0008
                            ],
                            [
                                20000000,
                                0.0007
                            ],
                            [
                                100000000,
                                0.0006
                            ],
                            [
                                200000000,
                                0.0004
                            ]
                        ],
                        "taker": [
                            [
                                0,
                                0.004
                            ],
                            [
                                25000,
                                0.0035
                            ],
                            [
                                50000,
                                0.0025
                            ],
                            [
                                100000,
                                0.0016
                            ],
                            [
                                250000,
                                0.00015
                            ],
                            [
                                1000000,
                                0.00014
                            ],
                            [
                                20000000,
                                0.00013
                            ],
                            [
                                100000000,
                                0.00012
                            ],
                            [
                                200000000,
                                0.0001
                            ]
                        ]
                    }
                },
                "funding": {
                    "withdraw": {},
                    "deposit": {}
                }
            },
            "status": {
                "status": "ok"
            },
            "exceptions": {
                "exact": {}
            },
            "httpExceptions": {},
            "commonCurrencies": {
                "XBT": "BTC",
                "BCC": "BCH",
                "BCHABC": "BCH",
                "BCHSV": "BSV",
                "USD_STABLE_COIN": "USDC"
            },
            "precisionMode": 2,
            "paddingMode": 0,
            "limits": {
                "leverage": {},
                "amount": {},
                "price": {},
                "cost": {}
            },
            "version": "v2",
            "options": {
                "defaultType": "spot",
                "accountsById": {
                    "funding": "SPOT",
                    "spot": "SPOT",
                    "margin": "MARGIN",
                    "derivatives": "DERIVATIVES",
                    "swap": "DERIVATIVES",
                    "future": "DERIVATIVES"
                }
            }
        }"###).unwrap())
    }

    /// Returns an array of objects representing market data
    ///
    /// Retrieves data on all markets for cryptocom
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    async fn fetch_markets(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        //
        //    {
        //        id: 11,
        //        method: 'public/get-instruments',
        //        code: 0,
        //        result: {
        //            'instruments': [
        //                {
        //                    instrument_name: 'NEAR_BTC',
        //                    quote_currency: 'BTC',
        //                    base_currency: 'NEAR',
        //                    price_decimals: '8',
        //                    quantity_decimals: '2',
        //                    margin_trading_enabled: true,
        //                    margin_trading_enabled_5x: true,
        //                    margin_trading_enabled_10x: true,
        //                    max_quantity: '100000000',
        //                    min_quantity: '0.01'
        //               },
        //            ]
        //        }
        //    }
        //
        let mut response: Value = Cryptocom::dispatch(self, "spotPublicGetPublicGetInstruments".into(), params.clone(), Value::Undefined).await;
        let mut result_response: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut markets: Value = self.safe_value(result_response.clone(), Value::from("instruments"), Value::new_array());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < markets.len() {
            let mut market: Value = markets.get(i.into());
            let mut id: Value = self.safe_string(market.clone(), Value::from("instrument_name"), Value::Undefined);
            let mut base_id: Value = self.safe_string(market.clone(), Value::from("base_currency"), Value::Undefined);
            let mut quote_id: Value = self.safe_string(market.clone(), Value::from("quote_currency"), Value::Undefined);
            let mut base: Value = Cryptocom::safe_currency_code(self, base_id.clone(), Value::Undefined);
            let mut quote: Value = Cryptocom::safe_currency_code(self, quote_id.clone(), Value::Undefined);
            let mut price_decimals: Value = self.safe_string(market.clone(), Value::from("price_decimals"), Value::Undefined);
            let mut min_price: Value = Cryptocom::parse_precision(self, price_decimals.clone());
            let mut min_quantity: Value = self.safe_string(market.clone(), Value::from("min_quantity"), Value::Undefined);
            let mut max_leverage: Value = self.parse_number(Value::from("1"), Value::Undefined);
            let mut margin_trading_enabled_5x: Value = self.safe_value(market.clone(), Value::from("margin_trading_enabled_5x"), Value::Undefined);
            if margin_trading_enabled_5x.is_truthy() {
                max_leverage = self.parse_number(Value::from("5"), Value::Undefined);
            };
            let mut margin_trading_enabled_10x: Value = self.safe_value(market.clone(), Value::from("margin_trading_enabled_10x"), Value::Undefined);
            if margin_trading_enabled_10x.is_truthy() {
                max_leverage = self.parse_number(Value::from("10"), Value::Undefined);
            };
            result.push(Value::Json(normalize(&Value::Json(json!({
                "id": id,
                "symbol": base.clone() + Value::from("/") + quote.clone(),
                "base": base,
                "quote": quote,
                "settle": Value::Undefined,
                "baseId": base_id,
                "quoteId": quote_id,
                "settleId": Value::Undefined,
                "type": "spot",
                "spot": true,
                "margin": self.safe_value(market.clone(), Value::from("margin_trading_enabled"), Value::Undefined),
                "swap": false,
                "future": false,
                "option": false,
                "active": Value::Undefined,
                "contract": false,
                "linear": Value::Undefined,
                "inverse": Value::Undefined,
                "contractSize": Value::Undefined,
                "expiry": Value::Undefined,
                "expiryDatetime": Value::Undefined,
                "strike": Value::Undefined,
                "optionType": Value::Undefined,
                "precision": Value::Json(normalize(&Value::Json(json!({
                    "amount": self.parse_number(Cryptocom::parse_precision(self, self.safe_string(market.clone(), Value::from("quantity_decimals"), Value::Undefined)), Value::Undefined),
                    "price": self.parse_number(Cryptocom::parse_precision(self, price_decimals.clone()), Value::Undefined)
                }))).unwrap()),
                "limits": Value::Json(normalize(&Value::Json(json!({
                    "leverage": Value::Json(normalize(&Value::Json(json!({
                        "min": self.parse_number(Value::from("1"), Value::Undefined),
                        "max": max_leverage
                    }))).unwrap()),
                    "amount": Value::Json(normalize(&Value::Json(json!({
                        "min": self.parse_number(min_quantity.clone(), Value::Undefined),
                        "max": Cryptocom::safe_number(self, market.clone(), Value::from("max_quantity"), Value::Undefined)
                    }))).unwrap()),
                    "price": Value::Json(normalize(&Value::Json(json!({
                        "min": self.parse_number(min_price.clone(), Value::Undefined),
                        "max": Value::Undefined
                    }))).unwrap()),
                    "cost": Value::Json(normalize(&Value::Json(json!({
                        "min": self.parse_number(Precise::string_mul(min_quantity.clone(), min_price.clone()), Value::Undefined),
                        "max": Value::Undefined
                    }))).unwrap())
                }))).unwrap()),
                "info": market
            }))).unwrap()));
            i += 1;
        };
        let mut futures_response: Value = Cryptocom::dispatch(self, "derivativesPublicGetPublicGetInstruments".into(), Value::Undefined, Value::Undefined).await;
        //
        //     {
        //       id: -1,
        //       method: 'public/get-instruments',
        //       code: 0,
        //       result: {
        //         data: [
        //           {
        //             symbol: '1INCHUSD-PERP',
        //             inst_type: 'PERPETUAL_SWAP',
        //             display_name: '1INCHUSD Perpetual',
        //             base_ccy: '1INCH',
        //             quote_ccy: 'USD_Stable_Coin',
        //             quote_decimals: 4,
        //             quantity_decimals: 0,
        //             price_tick_size: '0.0001',
        //             qty_tick_size: '1',
        //             max_leverage: '50',
        //             tradable: true,
        //             expiry_timestamp_ms: 0,
        //             beta_product: false,
        //             underlying_symbol: '1INCHUSD-INDEX',
        //             put_call: 'UNDEFINED',
        //             strike: '0',
        //             contract_size: '1'
        //           },
        //         ]
        //       }
        //     }
        //
        let mut futures_result: Value = self.safe_value(futures_response.clone(), Value::from("result"), Value::new_object());
        let mut data: Value = self.safe_value(futures_result.clone(), Value::from("data"), Value::new_array());
        let mut i: usize = 0;
        while i < data.len() {
            let mut market: Value = data.get(i.into());
            let mut inst_type: Value = self.safe_string(market.clone(), Value::from("inst_type"), Value::Undefined);
            let mut swap: Value = (inst_type.clone() == Value::from("PERPETUAL_SWAP")).into();
            let mut future: Value = (inst_type.clone() == Value::from("FUTURE")).into();
            let mut base_id: Value = self.safe_string(market.clone(), Value::from("base_ccy"), Value::Undefined);
            let mut quote_id: Value = self.safe_string(market.clone(), Value::from("quote_ccy"), Value::Undefined);
            let mut base: Value = Cryptocom::safe_currency_code(self, base_id.clone(), Value::Undefined);
            let mut quote: Value = Cryptocom::safe_currency_code(self, quote_id.clone(), Value::Undefined);
            let mut symbol: Value = base.clone() + Value::from("/") + quote.clone() + Value::from(":") + quote.clone();
            let mut expiry: Value = self.safe_integer(market.clone(), Value::from("expiry_timestamp_ms"), Value::Undefined);
            if expiry.clone() == Value::from(0) {
                expiry = Value::Undefined;
            };
            let mut r#type: Value = Value::from("swap");
            if future.is_truthy() {
                r#type = Value::from("future");
                symbol = symbol.clone() + Value::from("-") + self.yymmdd(expiry.clone(), Value::Undefined);
            };
            let mut contract_size: Value = Cryptocom::safe_number(self, market.clone(), Value::from("contract_size"), Value::Undefined);
            result.push(Value::Json(normalize(&Value::Json(json!({
                "id": self.safe_string(market.clone(), Value::from("symbol"), Value::Undefined),
                "symbol": symbol,
                "base": base,
                "quote": quote,
                "settle": quote,
                "baseId": base_id,
                "quoteId": quote_id,
                "settleId": quote_id,
                "type": r#type,
                "spot": false,
                "margin": false,
                "swap": swap,
                "future": future,
                "option": false,
                "active": self.safe_value(market.clone(), Value::from("tradable"), Value::Undefined),
                "contract": true,
                "linear": true,
                "inverse": false,
                "contractSize": contract_size,
                "expiry": expiry,
                "expiryDatetime": self.iso8601(expiry.clone()),
                "strike": Value::Undefined,
                "optionType": Value::Undefined,
                "precision": Value::Json(normalize(&Value::Json(json!({
                    "price": self.parse_number(Cryptocom::parse_precision(self, self.safe_string(market.clone(), Value::from("quote_decimals"), Value::Undefined)), Value::Undefined),
                    "amount": self.parse_number(Cryptocom::parse_precision(self, self.safe_string(market.clone(), Value::from("quantity_decimals"), Value::Undefined)), Value::Undefined)
                }))).unwrap()),
                "limits": Value::Json(normalize(&Value::Json(json!({
                    "leverage": Value::Json(normalize(&Value::Json(json!({
                        "min": self.parse_number(Value::from("1"), Value::Undefined),
                        "max": Cryptocom::safe_number(self, market.clone(), Value::from("max_leverage"), Value::Undefined)
                    }))).unwrap()),
                    "amount": Value::Json(normalize(&Value::Json(json!({
                        "min": self.parse_number(contract_size.clone(), Value::Undefined),
                        "max": Value::Undefined
                    }))).unwrap()),
                    "price": Value::Json(normalize(&Value::Json(json!({
                        "min": Value::Undefined,
                        "max": Value::Undefined
                    }))).unwrap()),
                    "cost": Value::Json(normalize(&Value::Json(json!({
                        "min": Value::Undefined,
                        "max": Value::Undefined
                    }))).unwrap())
                }))).unwrap()),
                "info": market
            }))).unwrap()));
            i += 1;
        };
        return result.clone();
    }

    /// Returns an array of [ticker structures](https://docs.ccxt.com/en/latest/manual.html#ticker-structure)
    ///
    /// Fetches price tickers for multiple markets, statistical calculations with the information calculated over the past 24 hours each market
    ///
    /// # Arguments
    ///
    /// * `symbols` {[string]|undefined} - unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_tickers(&mut self, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        symbols = Cryptocom::market_symbols(self, symbols.clone());
        let (mut market_type, mut query) = shift_2(Cryptocom::handle_market_type_and_params(self, Value::from("fetchTickers"), Value::Undefined, params.clone()));
        let mut method: Value = Cryptocom::get_supported_mapping(self, market_type.clone(), Value::Json(normalize(&Value::Json(json!({
            "spot": "spotPublicGetPublicGetTicker",
            "future": "derivativesPublicGetPublicGetTickers",
            "swap": "derivativesPublicGetPublicGetTickers"
        }))).unwrap()));
        let mut response: Value = Cryptocom::dispatch(self, method, query.clone(), Value::Undefined).await;
        //
        //     {
        //         "code":0,
        //         "method":"public/get-ticker",
        //         "result":{
        //         "data": [
        //             {"i":"CRO_BTC","b":0.00000890,"k":0.00001179,"a":0.00001042,"t":1591770793901,"v":14905879.59,"h":0.00,"l":0.00,"c":0.00},
        //             {"i":"EOS_USDT","b":2.7676,"k":2.7776,"a":2.7693,"t":1591770798500,"v":774.51,"h":0.05,"l":0.05,"c":0.00},
        //             {"i":"BCH_USDT","b":247.49,"k":251.73,"a":251.67,"t":1591770797601,"v":1.01693,"h":0.01292,"l":0.01231,"c":-0.00047},
        //             {"i":"ETH_USDT","b":239.92,"k":242.59,"a":240.30,"t":1591770798701,"v":0.97575,"h":0.01236,"l":0.01199,"c":-0.00018},
        //             {"i":"ETH_CRO","b":2693.11,"k":2699.84,"a":2699.55,"t":1591770795053,"v":95.680,"h":8.218,"l":7.853,"c":-0.050}
        //         ]
        //         }
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut data: Value = self.safe_value(result.clone(), Value::from("data"), Value::new_array());
        return Cryptocom::parse_tickers(self, data.clone(), symbols.clone(), Value::Undefined);
    }

    /// Returns a [ticker structure](https://docs.ccxt.com/en/latest/manual.html#ticker-structure)
    ///
    /// Fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch the ticker for
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_ticker(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Cryptocom::market(self, symbol.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "instrument_name": market.get(Value::from("id"))
        }))).unwrap());
        let (mut market_type, mut query) = shift_2(Cryptocom::handle_market_type_and_params(self, Value::from("fetchTicker"), market.clone(), params.clone()));
        if market_type.clone() != Value::from("spot") {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTicker() only supports spot markets"))"###);
        };
        let mut response: Value = Cryptocom::dispatch(self, "spotPublicGetPublicGetTicker".into(), extend_2(request.clone(), query.clone()), Value::Undefined).await;
        // {
        //     "code":0,
        //     "method":"public/get-ticker",
        //     "result":{
        //       "data": {"i":"CRO_BTC","b":0.00000890,"k":0.00001179,"a":0.00001042,"t":1591770793901,"v":14905879.59,"h":0.00,"l":0.00,"c":0.00}
        //     }
        // }
        let mut result_response: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut data: Value = self.safe_value(result_response.clone(), Value::from("data"), Value::new_object());
        return Cryptocom::parse_ticker(self, data.clone(), market.clone());
    }

    /// Returns a list of [order structures](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Fetches information on multiple orders made by the user
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified market symbol of the market orders were made in
    /// * `since` {int|undefined} - the earliest time in ms to fetch orders for
    /// * `limit` {int|undefined} - the maximum number of  orde structures to retrieve
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_orders(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if symbol.clone().is_nullish() {
            panic!(r###"ArgumentsRequired::new(self.get("id".into()) + Value::from(" fetchOrders() requires a symbol argument"))"###);
        };
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Cryptocom::market(self, symbol.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "instrument_name": market.get(Value::from("id"))
        }))).unwrap());
        if since.clone().is_nonnullish() {
            // maximum date range is one day
            request.set("start_ts".into(), since.clone());
        };
        if limit.clone().is_nonnullish() {
            request.set("page_size".into(), limit.clone());
        };
        let (mut market_type, mut query) = shift_2(Cryptocom::handle_market_type_and_params(self, Value::from("fetchOrders"), market.clone(), params.clone()));
        let mut method: Value = Cryptocom::get_supported_mapping(self, market_type.clone(), Value::Json(normalize(&Value::Json(json!({
            "spot": "spotPrivatePostPrivateGetOrderHistory",
            "margin": "spotPrivatePostPrivateMarginGetOrderHistory",
            "future": "derivativesPrivatePostPrivateGetOrderHistory",
            "swap": "derivativesPrivatePostPrivateGetOrderHistory"
        }))).unwrap()));
        let mut response: Value = Cryptocom::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        //
        // spot and margin
        //     {
        //       id: 1641026542065,
        //       method: 'private/get-order-history',
        //       code: 0,
        //       result: {
        //         order_list: [
        //           {
        //             status: 'FILLED',
        //             side: 'BUY',
        //             price: 0,
        //             quantity: 110,
        //             order_id: '2120246337927715937',
        //             client_oid: '',
        //             create_time: 1641025064904,
        //             update_time: 1641025064958,
        //             type: 'MARKET',
        //             instrument_name: 'USDC_USDT',
        //             avg_price: 1.0001,
        //             cumulative_quantity: 110,
        //             cumulative_value: 110.011,
        //             fee_currency: 'USDC',
        //             exec_inst: '',
        //             time_in_force: 'GOOD_TILL_CANCEL'
        //           }
        //         ]
        //       }
        //     }
        //
        // swap
        //     {
        //       id: 1641026373106,
        //       method: 'private/get-order-history',
        //       code: 0,
        //       result: {
        //         data: [
        //           {
        //             account_id: '85ff689a-7508-4b96-aa79-dc0545d6e637',
        //             order_id: 13191401932,
        //             client_oid: '1641025941461',
        //             order_type: 'LIMIT',
        //             time_in_force: 'GOOD_TILL_CANCEL',
        //             side: 'BUY',
        //             exec_inst: [],
        //             quantity: '0.0001',
        //             limit_price: '48000.0',
        //             order_value: '4.80000000',
        //             maker_fee_rate: '0.00050',
        //             taker_fee_rate: '0.00070',
        //             avg_price: '47253.5',
        //             trigger_price: '0.0',
        //             ref_price_type: 'NULL_VAL',
        //             cumulative_quantity: '0.0001',
        //             cumulative_value: '4.72535000',
        //             cumulative_fee: '0.00330775',
        //             status: 'FILLED',
        //             update_user_id: 'ce075bef-b600-4277-bd6e-ff9007251e63',
        //             order_date: '2022-01-01',
        //             instrument_name: 'BTCUSD-PERP',
        //             fee_instrument_name: 'USD_Stable_Coin',
        //             create_time: 1641025941827,
        //             create_time_ns: '1641025941827994756',
        //             update_time: 1641025941827
        //           }
        //         ]
        //       }
        //     }
        //
        let mut data: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut order_list: Value = self.safe_value_2(data.clone(), Value::from("order_list"), Value::from("data"), Value::new_array());
        return Cryptocom::parse_orders(self, order_list.clone(), market.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    /// Returns a list of [trade structures](https://docs.ccxt.com/en/latest/manual.html?#public-trades)
    ///
    /// Get the list of most recent trades for a particular symbol
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch trades for
    /// * `since` {int|undefined} - timestamp in ms of the earliest trade to fetch
    /// * `limit` {int|undefined} - the maximum amount of trades to fetch
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_trades(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Cryptocom::market(self, symbol.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "instrument_name": market.get(Value::from("id"))
        }))).unwrap());
        if since.clone().is_nonnullish() {
            // maximum date range is one day
            request.set("start_ts".into(), since.clone());
        };
        if limit.clone().is_nonnullish() {
            request.set("page_size".into(), limit.clone());
        };
        let (mut market_type, mut query) = shift_2(Cryptocom::handle_market_type_and_params(self, Value::from("fetchTrades"), market.clone(), params.clone()));
        let mut method: Value = Cryptocom::get_supported_mapping(self, market_type.clone(), Value::Json(normalize(&Value::Json(json!({
            "spot": "spotPublicGetPublicGetTrades",
            "future": "derivativesPublicGetPublicGetTrades",
            "swap": "derivativesPublicGetPublicGetTrades"
        }))).unwrap()));
        let mut response: Value = Cryptocom::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        // {
        //     "code":0,
        //     "method":"public/get-trades",
        //     "result": {
        //          "instrument_name": "BTC_USDT",
        //          "data:": [
        //              {"dataTime":1591710781947,"d":465533583799589409,"s":"BUY","p":2.96,"q":16.0,"t":1591710781946,"i":"ICX_CRO"},
        //              {"dataTime":1591707701899,"d":465430234542863152,"s":"BUY","p":0.007749,"q":115.0,"t":1591707701898,"i":"VET_USDT"},
        //              {"dataTime":1591710786155,"d":465533724976458209,"s":"SELL","p":25.676,"q":0.55,"t":1591710786154,"i":"XTZ_CRO"},
        //              {"dataTime":1591710783300,"d":465533629172286576,"s":"SELL","p":2.9016,"q":0.6,"t":1591710783298,"i":"XTZ_USDT"},
        //              {"dataTime":1591710784499,"d":465533669425626384,"s":"SELL","p":2.7662,"q":0.58,"t":1591710784498,"i":"EOS_USDT"},
        //              {"dataTime":1591710784700,"d":465533676120104336,"s":"SELL","p":243.21,"q":0.01647,"t":1591710784698,"i":"ETH_USDT"},
        //              {"dataTime":1591710786600,"d":465533739878620208,"s":"SELL","p":253.06,"q":0.00516,"t":1591710786598,"i":"BCH_USDT"},
        //              {"dataTime":1591710786900,"d":465533749959572464,"s":"BUY","p":0.9999,"q":0.2,"t":1591710786898,"i":"USDC_USDT"},
        //              {"dataTime":1591710787500,"d":465533770081010000,"s":"BUY","p":3.159,"q":1.65,"t":1591710787498,"i":"ATOM_USDT"},
        //            ]
        //      }
        // }
        let mut result_response: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut data: Value = self.safe_value(result_response.clone(), Value::from("data"), Value::new_array());
        return Cryptocom::parse_trades(self, data.clone(), market.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    /// Returns a list of candles ordered as timestamp, open, high, low, close, volume
    ///
    /// Fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch OHLCV data for
    /// * `timeframe` {string} - the length of time each candle represents
    /// * `since` {int|undefined} - timestamp in ms of the earliest candle to fetch
    /// * `limit` {int|undefined} - the maximum amount of candles to fetch
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Cryptocom::market(self, symbol.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "instrument_name": market.get(Value::from("id")),
            "timeframe": self.get("timeframes".into()).get(timeframe.clone())
        }))).unwrap());
        let (mut market_type, mut query) = shift_2(Cryptocom::handle_market_type_and_params(self, Value::from("fetchOHLCV"), market.clone(), params.clone()));
        let mut method: Value = Cryptocom::get_supported_mapping(self, market_type.clone(), Value::Json(normalize(&Value::Json(json!({
            "spot": "spotPublicGetPublicGetCandlestick",
            "future": "derivativesPublicGetPublicGetCandlestick",
            "swap": "derivativesPublicGetPublicGetCandlestick"
        }))).unwrap()));
        let mut response: Value = Cryptocom::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        // {
        //     "code":0,
        //     "method":"public/get-candlestick",
        //     "result":{
        //       "instrument_name":"BTC_USDT",
        //       "interval":"5m",
        //       "data":[
        //         {"t":1596944700000,"o":11752.38,"h":11754.77,"l":11746.65,"c":11753.64,"v":3.694583},
        //         {"t":1596945000000,"o":11753.63,"h":11754.77,"l":11739.83,"c":11746.17,"v":2.073019},
        //         {"t":1596945300000,"o":11746.16,"h":11753.24,"l":11738.1,"c":11740.65,"v":0.867247},
        //         ...
        //       ]
        //     }
        // }
        let mut result_response: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut data: Value = self.safe_value(result_response.clone(), Value::from("data"), Value::new_array());
        return Cryptocom::parse_ohlcvs(self, data.clone(), market.clone(), timeframe.clone(), since.clone(), limit.clone());
    }

    /// Returns a dictionary of [order book structures](https://docs.ccxt.com/en/latest/manual.html#order-book-structure) indexed by market symbols
    ///
    /// Fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch the order book for
    /// * `limit` {int|undefined} - the maximum amount of order book entries to return
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_order_book(&mut self, mut symbol: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Cryptocom::market(self, symbol.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "instrument_name": market.get(Value::from("id"))
        }))).unwrap());
        if limit.is_truthy() {
            request.set("depth".into(), limit.clone());
        };
        let (mut market_type, mut query) = shift_2(Cryptocom::handle_market_type_and_params(self, Value::from("fetchOrderBook"), market.clone(), params.clone()));
        let mut method: Value = Cryptocom::get_supported_mapping(self, market_type.clone(), Value::Json(normalize(&Value::Json(json!({
            "spot": "spotPublicGetPublicGetBook",
            "future": "derivativesPublicGetPublicGetBook",
            "swap": "derivativesPublicGetPublicGetBook"
        }))).unwrap()));
        let mut response: Value = Cryptocom::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        // {
        //     "code":0,
        //     "method":"public/get-book",
        //     "result":{
        //       "bids":[[9668.44,0.006325,1.0],[9659.75,0.006776,1.0],[9653.14,0.011795,1.0],[9647.13,0.019434,1.0],[9634.62,0.013765,1.0],[9633.81,0.021395,1.0],[9628.46,0.037834,1.0],[9627.6,0.020909,1.0],[9621.51,0.026235,1.0],[9620.83,0.026701,1.0]],
        //       "asks":[[9697.0,0.68251,1.0],[9697.6,1.722864,2.0],[9699.2,1.664177,2.0],[9700.8,1.824953,2.0],[9702.4,0.85778,1.0],[9704.0,0.935792,1.0],[9713.32,0.002926,1.0],[9716.42,0.78923,1.0],[9732.19,0.00645,1.0],[9737.88,0.020216,1.0]],
        //       "t":1591704180270
        //     }
        // }
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::Undefined);
        let mut data: Value = self.safe_value(result.clone(), Value::from("data"), Value::Undefined);
        let mut order_book: Value = self.safe_value(data.clone(), Value::from(0), Value::Undefined);
        let mut timestamp: Value = self.safe_integer(order_book.clone(), Value::from("t"), Value::Undefined);
        return Cryptocom::parse_order_book(self, order_book.clone(), symbol.clone(), timestamp.clone(), Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined);
    }

    fn parse_swap_balance(&self, mut response: Value) -> Value {
        let mut response_result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut data: Value = self.safe_value(response_result.clone(), Value::from("data"), Value::new_array());
        let mut result: Value = Value::Json(normalize(&Value::Json(json!({
            "info": response
        }))).unwrap());
        let mut i: usize = 0;
        while i < data.len() {
            let mut balance: Value = data.get(i.into());
            let mut currency_id: Value = self.safe_string(balance.clone(), Value::from("instrument_name"), Value::Undefined);
            let mut code: Value = Cryptocom::safe_currency_code(self, currency_id.clone(), Value::Undefined);
            let mut account: Value = Cryptocom::account(self);
            account.set("total".into(), self.safe_string(balance.clone(), Value::from("total_cash_balance"), Value::Undefined));
            account.set("free".into(), self.safe_string(balance.clone(), Value::from("total_available_balance"), Value::Undefined));
            result.set(code.clone(), account.clone());
            i += 1;
        };
        return Cryptocom::safe_balance(self, result.clone());
    }

    fn parse_spot_balance(&self, mut response: Value) -> Value {
        let mut data: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut coin_list: Value = self.safe_value(data.clone(), Value::from("accounts"), Value::new_array());
        let mut result: Value = Value::Json(normalize(&Value::Json(json!({
            "info": response
        }))).unwrap());
        let mut i: usize = 0;
        while i < coin_list.len() {
            let mut balance: Value = coin_list.get(i.into());
            let mut currency_id: Value = self.safe_string(balance.clone(), Value::from("currency"), Value::Undefined);
            let mut code: Value = Cryptocom::safe_currency_code(self, currency_id.clone(), Value::Undefined);
            let mut account: Value = Cryptocom::account(self);
            account.set("total".into(), self.safe_string(balance.clone(), Value::from("balance"), Value::Undefined));
            account.set("free".into(), self.safe_string(balance.clone(), Value::from("available"), Value::Undefined));
            account.set("used".into(), self.safe_string(balance.clone(), Value::from("order"), Value::Undefined));
            result.set(code.clone(), account.clone());
            i += 1;
        };
        return Cryptocom::safe_balance(self, result.clone());
    }

    /// Returns a [balance structure](https://docs.ccxt.com/en/latest/manual.html?#balance-structure)
    ///
    /// Query for balance and get the amount of funds available for trading or funds locked in orders
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let (mut market_type, mut query) = shift_2(Cryptocom::handle_market_type_and_params(self, Value::from("fetchBalance"), Value::Undefined, params.clone()));
        let mut method: Value = Cryptocom::get_supported_mapping(self, market_type.clone(), Value::Json(normalize(&Value::Json(json!({
            "spot": "spotPrivatePostPrivateGetAccountSummary",
            "margin": "spotPrivatePostPrivateMarginGetAccountSummary",
            "future": "derivativesPrivatePostPrivateUserBalance",
            "swap": "derivativesPrivatePostPrivateUserBalance"
        }))).unwrap()));
        let mut response: Value = Cryptocom::dispatch(self, method, query.clone(), Value::Undefined).await;
        // spot
        //     {
        //         "id": 11,
        //         "method": "private/get-account-summary",
        //         "code": 0,
        //         "result": {
        //             "accounts": [
        //                 {
        //                     "balance": 99999999.905000000000000000,
        //                     "available": 99999996.905000000000000000,
        //                     "order": 3.000000000000000000,
        //                     "stake": 0,
        //                     "currency": "CRO"
        //                 }
        //             ]
        //         }
        //     }
        //
        // margin
        //     {
        //         "id": 1656529728178,
        //         "method": "private/margin/get-account-summary",
        //         "code": 0,
        //         "result": {
        //             "accounts": [
        //                 {
        //                     "balance": 0,
        //                     "available": 0,
        //                     "order": 0,
        //                     "borrowed": 0,
        //                     "position": 0,
        //                     "positionHomeCurrency": 0,
        //                     "positionBtc": 0,
        //                     "lastPriceHomeCurrency": 20111.38,
        //                     "lastPriceBtc": 1,
        //                     "currency": "BTC",
        //                     "accrued_interest": 0,
        //                     "liquidation_price": 0
        //                 },
        //             ],
        //             "is_liquidating": false,
        //             "total_balance": 16,
        //             "total_balance_btc": 0.00079556,
        //             "equity_value": 16,
        //             "equity_value_btc": 0.00079556,
        //             "total_borrowed": 0,
        //             "total_borrowed_btc": 0,
        //             "total_accrued_interest": 0,
        //             "total_accrued_interest_btc": 0,
        //             "margin_score": "GOOD",
        //             "currency": "USDT"
        //         }
        //     }
        //
        // swap
        //     {
        //       "id" : 1641025392400,
        //       "method" : "private/user-balance",
        //       "code" : 0,
        //       "result" : {
        //         "data" : [ {
        //           "total_available_balance" : "109.56000000",
        //           "total_margin_balance" : "109.56000000",
        //           "total_initial_margin" : "0.00000000",
        //           "total_maintenance_margin" : "0.00000000",
        //           "total_position_cost" : "0.00000000",
        //           "total_cash_balance" : "109.56000000",
        //           "total_collateral_value" : "109.56000000",
        //           "total_session_unrealized_pnl" : "0.00000000",
        //           "instrument_name" : "USD_Stable_Coin",
        //           "total_session_realized_pnl" : "0.00000000",
        //           "position_balances" : [ {
        //             "quantity" : "109.56000000",
        //             "collateral_weight" : "1.000000",
        //             "collateral_amount" : "109.56000000",
        //             "market_value" : "109.56000000",
        //             "max_withdrawal_balance" : "109.56000000",
        //             "instrument_name" : "USD_Stable_Coin"
        //           } ],
        //           "total_effective_leverage" : "0.000000",
        //           "position_limit" : "3000000.00000000",
        //           "used_position_limit" : "0.00000000",
        //           "is_liquidating" : false
        //         } ]
        //       }
        //     }
        //
        let mut parser: Value = Cryptocom::get_supported_mapping(self, market_type.clone(), Value::Json(normalize(&Value::Json(json!({
            "spot": "parseSpotBalance",
            "margin": "parseSpotBalance",
            "future": "parseSwapBalance",
            "swap": "parseSwapBalance"
        }))).unwrap()));
        return self.parser(response.clone());
    }

    /// Returns an [order structure](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Fetches information on an order made by the user
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - unified symbol of the market the order was made in
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_order(&mut self, mut id: Value, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Value::Undefined;
        if symbol.clone().is_nonnullish() {
            market = Cryptocom::market(self, symbol.clone());
        };
        let mut request: Value = Value::new_object();
        let (mut market_type, mut query) = shift_2(Cryptocom::handle_market_type_and_params(self, Value::from("fetchOrder"), market.clone(), params.clone()));
        if market_type.clone() == Value::from("spot") || market_type.clone() == Value::from("margin") {
            request.set("order_id".into(), id.to_string());
        } else {
            request.set("order_id".into(), parse_int(id.clone()));
        };
        let mut method: Value = Cryptocom::get_supported_mapping(self, market_type.clone(), Value::Json(normalize(&Value::Json(json!({
            "spot": "spotPrivatePostPrivateGetOrderDetail",
            "margin": "spotPrivatePostPrivateMarginGetOrderDetail",
            "future": "derivativesPrivatePostPrivateGetOrderDetail",
            "swap": "derivativesPrivatePostPrivateGetOrderDetail"
        }))).unwrap()));
        let mut response: Value = Cryptocom::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        // {
        //     "id": 11,
        //     "method": "private/get-order-detail",
        //     "code": 0,
        //     "result": {
        //       "trade_list": [
        //         {
        //           "side": "BUY",
        //           "instrument_name": "ETH_CRO",
        //           "fee": 0.007,
        //           "trade_id": "371303044218155296",
        //           "create_time": 1588902493045,
        //           "traded_price": 7,
        //           "traded_quantity": 7,
        //           "fee_currency": "CRO",
        //           "order_id": "371302913889488619"
        //         }
        //       ],
        //       "order_info": {
        //         "status": "FILLED",
        //         "side": "BUY",
        //         "order_id": "371302913889488619",
        //         "client_oid": "9_yMYJDNEeqHxLqtD_2j3g",
        //         "create_time": 1588902489144,
        //         "update_time": 1588902493024,
        //         "type": "LIMIT",
        //         "instrument_name": "ETH_CRO",
        //         "cumulative_quantity": 7,
        //         "cumulative_value": 7,
        //         "avg_price": 7,
        //         "fee_currency": "CRO",
        //         "time_in_force": "GOOD_TILL_CANCEL",
        //         "exec_inst": "POST_ONLY"
        //       }
        //     }
        // }
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut order: Value = self.safe_value(result.clone(), Value::from("order_info"), result.clone());
        return Cryptocom::parse_order(self, order.clone(), market.clone());
    }

    /// Returns an [order structure](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Create a trade order
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to create an order in
    /// * `type` {string} - 'market' or 'limit'
    /// * `side` {string} - 'buy' or 'sell'
    /// * `amount` {float} - how much of currency you want to trade in units of base currency
    /// * `price` {float|undefined} - the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn create_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Cryptocom::market(self, symbol.clone());
        let mut uppercase_type: Value = r#type.to_upper_case();
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "instrument_name": market.get(Value::from("id")),
            "side": side.to_upper_case(),
            "type": uppercase_type,
            "quantity": Cryptocom::amount_to_precision(self, symbol.clone(), amount.clone())
        }))).unwrap());
        if uppercase_type.clone() == Value::from("LIMIT") || uppercase_type.clone() == Value::from("STOP_LIMIT") {
            request.set("price".into(), Cryptocom::price_to_precision(self, symbol.clone(), price.clone()));
        };
        let mut post_only: Value = self.safe_value(params.clone(), Value::from("postOnly"), false.into());
        if post_only.is_truthy() {
            request.set("exec_inst".into(), Value::from("POST_ONLY"));
            params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("postOnly").into()])));
        };
        let (mut market_type, mut query) = shift_2(Cryptocom::handle_market_type_and_params(self, Value::from("createOrder"), market.clone(), params.clone()));
        let mut method: Value = Cryptocom::get_supported_mapping(self, market_type.clone(), Value::Json(normalize(&Value::Json(json!({
            "spot": "spotPrivatePostPrivateCreateOrder",
            "margin": "spotPrivatePostPrivateMarginCreateOrder",
            "future": "derivativesPrivatePostPrivateCreateOrder",
            "swap": "derivativesPrivatePostPrivateCreateOrder"
        }))).unwrap()));
        let mut response: Value = Cryptocom::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        // {
        //     "id": 11,
        //     "method": "private/create-order",
        //     "result": {
        //       "order_id": "337843775021233500",
        //       "client_oid": "my_order_0002"
        //     }
        // }
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        return Cryptocom::parse_order(self, result.clone(), market.clone());
    }

    /// Returns a list of [order structures](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Cancel all open orders
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - unified market symbol, only orders in the market of this symbol are cancelled when symbol is not undefined
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn cancel_all_orders(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Value::Undefined;
        if symbol.clone().is_nonnullish() {
            market = Cryptocom::market(self, symbol.clone());
        };
        let mut request: Value = Value::new_object();
        let (mut market_type, mut query) = shift_2(Cryptocom::handle_market_type_and_params(self, Value::from("cancelAllOrders"), market.clone(), params.clone()));
        if market_type.clone() == Value::from("spot") || market_type.clone() == Value::from("margin") {
            if symbol.clone().is_nullish() {
                panic!(r###"ArgumentsRequired::new(self.get("id".into()) + Value::from(" cancelAllOrders() requires a symbol argument for ") + market_type.clone() + Value::from(" orders"))"###);
            };
            request.set("instrument_name".into(), market.get(Value::from("id")));
        };
        let mut method: Value = Cryptocom::get_supported_mapping(self, market_type.clone(), Value::Json(normalize(&Value::Json(json!({
            "spot": "spotPrivatePostPrivateCancelAllOrders",
            "margin": "spotPrivatePostPrivateMarginCancelAllOrders",
            "future": "derivativesPrivatePostPrivateCancelAllOrders",
            "swap": "derivativesPrivatePostPrivateCancelAllOrders"
        }))).unwrap()));
        return Cryptocom::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
    }

    /// Returns an [order structure](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Cancels an open order
    ///
    /// # Arguments
    ///
    /// * `id` {string} - order id
    /// * `symbol` {string|undefined} - unified symbol of the market the order was made in
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn cancel_order(&mut self, mut id: Value, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Value::Undefined;
        if symbol.clone().is_nonnullish() {
            market = Cryptocom::market(self, symbol.clone());
        };
        let mut request: Value = Value::new_object();
        let (mut market_type, mut query) = shift_2(Cryptocom::handle_market_type_and_params(self, Value::from("cancelOrder"), market.clone(), params.clone()));
        if market_type.clone() == Value::from("spot") || market_type.clone() == Value::from("margin") {
            if symbol.clone().is_nullish() {
                panic!(r###"ArgumentsRequired::new(self.get("id".into()) + Value::from(" cancelOrder() requires a symbol argument for ") + market_type.clone() + Value::from(" orders"))"###);
            };
            request.set("instrument_name".into(), market.get(Value::from("id")));
            request.set("order_id".into(), id.to_string());
        } else {
            request.set("order_id".into(), parse_int(id.clone()));
        };
        let mut method: Value = Cryptocom::get_supported_mapping(self, market_type.clone(), Value::Json(normalize(&Value::Json(json!({
            "spot": "spotPrivatePostPrivateCancelOrder",
            "margin": "spotPrivatePostPrivateMarginCancelOrder",
            "future": "derivativesPrivatePostPrivateCancelOrder",
            "swap": "derivativesPrivatePostPrivateCancelOrder"
        }))).unwrap()));
        let mut response: Value = Cryptocom::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), response.clone());
        return Cryptocom::parse_order(self, result.clone(), Value::Undefined);
    }

    /// Returns a list of [order structures](https://docs.ccxt.com/en/latest/manual.html#order-structure)
    ///
    /// Fetch all unfilled currently open orders
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - unified market symbol
    /// * `since` {int|undefined} - the earliest time in ms to fetch open orders for
    /// * `limit` {int|undefined} - the maximum number of  open orders structures to retrieve
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_open_orders(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut market: Value = Value::Undefined;
        let mut request: Value = Value::new_object();
        if symbol.clone().is_nonnullish() {
            market = Cryptocom::market(self, symbol.clone());
            request.set("instrument_name".into(), market.get(Value::from("id")));
        };
        if limit.clone().is_nonnullish() {
            request.set("page_size".into(), limit.clone());
        };
        let (mut market_type, mut query) = shift_2(Cryptocom::handle_market_type_and_params(self, Value::from("fetchOpenOrders"), market.clone(), params.clone()));
        let mut method: Value = Cryptocom::get_supported_mapping(self, market_type.clone(), Value::Json(normalize(&Value::Json(json!({
            "spot": "spotPrivatePostPrivateGetOpenOrders",
            "margin": "spotPrivatePostPrivateMarginGetOpenOrders",
            "future": "derivativesPrivatePostPrivateGetOpenOrders",
            "swap": "derivativesPrivatePostPrivateGetOpenOrders"
        }))).unwrap()));
        let mut response: Value = Cryptocom::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        // {
        //     "id": 11,
        //     "method": "private/get-open-orders",
        //     "code": 0,
        //     "result": {
        //       "count": 1177,
        //       "order_list": [
        //         {
        //           "status": "ACTIVE",
        //           "side": "BUY",
        //           "price": 1,
        //           "quantity": 1,
        //           "order_id": "366543374673423753",
        //           "client_oid": "my_order_0002",
        //           "create_time": 1588760643829,
        //           "update_time": 1588760644292,
        //           "type": "LIMIT",
        //           "instrument_name": "ETH_CRO",
        //           "cumulative_quantity": 0,
        //           "cumulative_value": 0,
        //           "avg_price": 0,
        //           "fee_currency": "CRO",
        //           "time_in_force": "GOOD_TILL_CANCEL"
        //         },
        //         {
        //           "status": "ACTIVE",
        //           "side": "BUY",
        //           "price": 1,
        //           "quantity": 1,
        //           "order_id": "366455245775097673",
        //           "client_oid": "my_order_0002",
        //           "create_time": 1588758017375,
        //           "update_time": 1588758017411,
        //           "type": "LIMIT",
        //           "instrument_name": "ETH_CRO",
        //           "cumulative_quantity": 0,
        //           "cumulative_value": 0,
        //           "avg_price": 0,
        //           "fee_currency": "CRO",
        //           "time_in_force": "GOOD_TILL_CANCEL"
        //         }
        //       ]
        //     }
        // }
        let mut data: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut result_list: Value = self.safe_value_2(data.clone(), Value::from("order_list"), Value::from("data"), Value::new_array());
        return Cryptocom::parse_orders(self, result_list.clone(), market.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    /// Returns a list of [trade structures](https://docs.ccxt.com/en/latest/manual.html#trade-structure)
    ///
    /// Fetch all trades made by the user
    ///
    /// # Arguments
    ///
    /// * `symbol` {string|undefined} - unified market symbol
    /// * `since` {int|undefined} - the earliest time in ms to fetch trades for
    /// * `limit` {int|undefined} - the maximum number of trades structures to retrieve
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_my_trades(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::new_object();
        let mut market: Value = Value::Undefined;
        if symbol.clone().is_nonnullish() {
            market = Cryptocom::market(self, symbol.clone());
            request.set("instrument_name".into(), market.get(Value::from("id")));
        };
        if since.clone().is_nonnullish() {
            // maximum date range is one day
            request.set("start_ts".into(), since.clone());
            let mut end_timestamp: Value = self.sum(since.clone(), Value::from(24) * Value::from(60) * Value::from(60) * Value::from(1000));
            request.set("end_ts".into(), end_timestamp.clone());
        };
        if limit.clone().is_nonnullish() {
            request.set("page_size".into(), limit.clone());
        };
        let (mut market_type, mut query) = shift_2(Cryptocom::handle_market_type_and_params(self, Value::from("fetchMyTrades"), market.clone(), params.clone()));
        let mut method: Value = Cryptocom::get_supported_mapping(self, market_type.clone(), Value::Json(normalize(&Value::Json(json!({
            "spot": "spotPrivatePostPrivateGetTrades",
            "margin": "spotPrivatePostPrivateMarginGetTrades",
            "future": "derivativesPrivatePostPrivateGetTrades",
            "swap": "derivativesPrivatePostPrivateGetTrades"
        }))).unwrap()));
        let mut response: Value = Cryptocom::dispatch(self, method, extend_2(request.clone(), query.clone()), Value::Undefined).await;
        // {
        //     "id": 11,
        //     "method": "private/get-trades",
        //     "code": 0,
        //     "result": {
        //       "trade_list": [
        //         {
        //           "side": "SELL",
        //           "instrument_name": "ETH_CRO",
        //           "fee": 0.014,
        //           "trade_id": "367107655537806900",
        //           "create_time": 1588777459755,
        //           "traded_price": 7,
        //           "traded_quantity": 1,
        //           "fee_currency": "CRO",
        //           "order_id": "367107623521528450"
        //         }
        //       ]
        //     }
        // }
        let mut data: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut result_list: Value = self.safe_value_2(data.clone(), Value::from("trade_list"), Value::from("data"), Value::new_array());
        return Cryptocom::parse_trades(self, result_list.clone(), market.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    fn parse_address(&self, mut address_string: Value) -> Value {
        let mut address: Value = Value::Undefined;
        let mut tag: Value = Value::Undefined;
        let mut raw_tag: Value = Value::Undefined;
        if address_string.index_of(Value::from("?")) > Value::from(0) {
            (address, raw_tag) = shift_2(address_string.split(Value::from("?")));
            let mut splitted: Value = raw_tag.split(Value::from("="));
            tag = splitted.get(Value::from(1));
        } else {
            address = address_string.clone();
        };
        return Value::Json(serde_json::Value::Array(vec![address.clone().into(), tag.clone().into()]));
    }

    /// Returns a [transaction structure](https://docs.ccxt.com/en/latest/manual.html#transaction-structure)
    ///
    /// Make a withdrawal
    ///
    /// # Arguments
    ///
    /// * `code` {string} - unified currency code
    /// * `amount` {float} - the amount to withdraw
    /// * `address` {string} - the address to withdraw to
    /// * `tag` {string|undefined} - 
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn withdraw(&mut self, mut code: Value, mut amount: Value, mut address: Value, mut tag: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        (tag, params) = shift_2(Cryptocom::handle_withdraw_tag_and_params(self, tag.clone(), params.clone()));
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut currency: Value = Cryptocom::currency(self, code.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "currency": currency.get(Value::from("id")),
            "amount": amount,
            "address": address
        }))).unwrap());
        if tag.clone().is_nonnullish() {
            request.set("address_tag".into(), tag.clone());
        };
        let mut response: Value = Cryptocom::dispatch(self, "spotPrivatePostPrivateCreateWithdrawal".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //    {
        //        "id":-1,
        //        "method":"private/create-withdrawal",
        //        "code":0,
        //        "result": {
        //            "id": 2220,
        //            "amount": 1,
        //            "fee": 0.0004,
        //            "symbol": "BTC",
        //            "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBf",
        //            "client_wid": "my_withdrawal_002",
        //            "create_time":1607063412000
        //        }
        //     }
        //
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::Undefined);
        return Cryptocom::parse_transaction(self, result.clone(), currency.clone());
    }

    /// Returns a dictionary of [address structures](https://docs.ccxt.com/en/latest/manual.html#address-structure) indexed by the network
    ///
    /// Fetch a dictionary of addresses for a currency, indexed by network
    ///
    /// # Arguments
    ///
    /// * `code` {string} - unified currency code of the currency for the deposit address
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_deposit_addresses_by_network(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut currency: Value = Cryptocom::currency(self, code.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "currency": currency.get(Value::from("id"))
        }))).unwrap());
        let mut response: Value = Cryptocom::dispatch(self, "spotPrivatePostPrivateGetDepositAddress".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        // {
        //     "id": 11,
        //     "method": "private/get-deposit-address",
        //     "code": 0,
        //     "result": {
        //          "deposit_address_list": [
        //              {
        //                  "currency": "CRO",
        //                  "create_time": 1615886328000,
        //                  "id": "12345",
        //                  "address": "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
        //                  "status": "1",
        //                  "network": "CRO"
        //              },
        //              {
        //                  "currency": "CRO",
        //                  "create_time": 1615886332000,
        //                  "id": "12346",
        //                  "address": "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy",
        //                  "status": "1",
        //                  "network": "ETH"
        //              }
        //          ]
        //    }
        // }
        let mut data: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut addresses: Value = self.safe_value(data.clone(), Value::from("deposit_address_list"), Value::new_array());
        if addresses.len() == 0 {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" fetchDepositAddressesByNetwork() generating address..."))"###);
        };
        let mut result: Value = Value::new_object();
        let mut i: usize = 0;
        while i < addresses.len() {
            let mut value: Value = self.safe_value(addresses.clone(), Value::from(i), Value::Undefined);
            let mut address_string: Value = self.safe_string(value.clone(), Value::from("address"), Value::Undefined);
            let mut currency_id: Value = self.safe_string(value.clone(), Value::from("currency"), Value::Undefined);
            let mut response_code: Value = Cryptocom::safe_currency_code(self, currency_id.clone(), Value::Undefined);
            let (mut address, mut tag) = shift_2(Cryptocom::parse_address(self, address_string.clone()));
            self.check_address(address.clone());
            let mut network_id: Value = self.safe_string(value.clone(), Value::from("network"), Value::Undefined);
            let mut network: Value = Cryptocom::safe_network(self, network_id.clone());
            result.set(network.clone(), Value::Json(normalize(&Value::Json(json!({
                "info": value,
                "currency": response_code,
                "address": address,
                "tag": tag,
                "network": network
            }))).unwrap()));
            i += 1;
        };
        return result.clone();
    }

    /// Returns an [address structure](https://docs.ccxt.com/en/latest/manual.html#address-structure)
    ///
    /// Fetch the deposit address for a currency associated with this account
    ///
    /// # Arguments
    ///
    /// * `code` {string} - unified currency code
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_deposit_address(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut network: Value = self.safe_string_upper(params.clone(), Value::from("network"), Value::Undefined);
        params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("network").into()])));
        let mut deposit_addresses: Value = Cryptocom::fetch_deposit_addresses_by_network(self, code.clone(), params.clone()).await;
        if deposit_addresses.contains_key(network.clone()) {
            return deposit_addresses.get(network.clone());
        } else {
            let mut keys: Value = Object::keys(deposit_addresses.clone());
            return deposit_addresses.get(keys.get(Value::from(0)).clone());
        };
        Value::Undefined
    }

    fn safe_network(&self, mut network_id: Value) -> Value {
        let mut networks_by_id: Value = Value::Json(normalize(&Value::Json(json!({
            "BTC": "BTC",
            "ETH": "ETH",
            "SOL": "SOL",
            "BNB": "BNB",
            "CRONOS": "CRONOS",
            "MATIC": "MATIC",
            "OP": "OP"
        }))).unwrap());
        return self.safe_string(networks_by_id.clone(), network_id.clone(), network_id.clone());
    }

    /// Returns a list of [transaction structures](https://docs.ccxt.com/en/latest/manual.html#transaction-structure)
    ///
    /// Fetch all deposits made to an account
    ///
    /// # Arguments
    ///
    /// * `code` {string|undefined} - unified currency code
    /// * `since` {int|undefined} - the earliest time in ms to fetch deposits for
    /// * `limit` {int|undefined} - the maximum number of deposits structures to retrieve
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_deposits(&mut self, mut code: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut currency: Value = Value::Undefined;
        let mut request: Value = Value::new_object();
        if code.clone().is_nonnullish() {
            currency = Cryptocom::currency(self, code.clone());
            request.set("currency".into(), currency.get(Value::from("id")));
        };
        if since.clone().is_nonnullish() {
            // 90 days date range
            request.set("start_ts".into(), since.clone());
        };
        if limit.clone().is_nonnullish() {
            request.set("page_size".into(), limit.clone());
        };
        let mut response: Value = Cryptocom::dispatch(self, "spotPrivatePostPrivateGetDepositHistory".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        // {
        //     "id": 11,
        //     "method": "private/get-deposit-history",
        //     "code": 0,
        //     "result": {
        //       "deposit_list": [
        //         {
        //           "currency": "XRP",
        //           "fee": 1.0,
        //           "create_time": 1607063412000,
        //           "id": "2220",
        //           "update_time": 1607063460000,
        //           "amount": 100,
        //           "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBf?1234567890",
        //           "status": "1"
        //         }
        //       ]
        //     }
        // }
        let mut data: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut deposit_list: Value = self.safe_value(data.clone(), Value::from("deposit_list"), Value::new_array());
        return Cryptocom::parse_transactions(self, deposit_list.clone(), currency.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    /// Returns a list of [transaction structures](https://docs.ccxt.com/en/latest/manual.html#transaction-structure)
    ///
    /// Fetch all withdrawals made from an account
    ///
    /// # Arguments
    ///
    /// * `code` {string|undefined} - unified currency code
    /// * `since` {int|undefined} - the earliest time in ms to fetch withdrawals for
    /// * `limit` {int|undefined} - the maximum number of withdrawals structures to retrieve
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_withdrawals(&mut self, mut code: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut currency: Value = Value::Undefined;
        let mut request: Value = Value::new_object();
        if code.clone().is_nonnullish() {
            currency = Cryptocom::currency(self, code.clone());
            request.set("currency".into(), currency.get(Value::from("id")));
        };
        if since.clone().is_nonnullish() {
            // 90 days date range
            request.set("start_ts".into(), since.clone());
        };
        if limit.clone().is_nonnullish() {
            request.set("page_size".into(), limit.clone());
        };
        let mut response: Value = Cryptocom::dispatch(self, "spotPrivatePostPrivateGetWithdrawalHistory".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //       id: 1640704829096,
        //       method: 'private/get-withdrawal-history',
        //       code: 0,
        //       result: {
        //         withdrawal_list: [
        //           {
        //             currency: 'DOGE',
        //             client_wid: '',
        //             fee: 50,
        //             create_time: 1640425168000,
        //             id: '3180557',
        //             update_time: 1640425168000,
        //             amount: 1102.64092,
        //             address: 'DDrGGqmp5Ddo1QH9tUvDfoL4u4rqys5975',
        //             status: '5',
        //             txid: 'ce23e9e21b6c38eef953070a05110e6dca2fd2bcc76d3381000547b9ff5290b2/0'
        //           }
        //         ]
        //       }
        //     }
        //
        let mut data: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut withdrawal_list: Value = self.safe_value(data.clone(), Value::from("withdrawal_list"), Value::new_array());
        return Cryptocom::parse_transactions(self, withdrawal_list.clone(), currency.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    /// Returns a [transfer structure](https://docs.ccxt.com/en/latest/manual.html#transfer-structure)
    ///
    /// Transfer currency internally between wallets on the same account
    ///
    /// # Arguments
    ///
    /// * `code` {string} - unified currency code
    /// * `amount` {float} - amount to transfer
    /// * `fromAccount` {string} - account to transfer from
    /// * `toAccount` {string} - account to transfer to
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn transfer(&mut self, mut code: Value, mut amount: Value, mut from_account: Value, mut to_account: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut currency: Value = Cryptocom::currency(self, code.clone());
        from_account = from_account.to_lower_case();
        to_account = to_account.to_lower_case();
        let mut accounts_by_id: Value = self.safe_value(self.get("options".into()), Value::from("accountsById"), Value::new_object());
        let mut from_id: Value = self.safe_string(accounts_by_id.clone(), from_account.clone(), from_account.clone());
        let mut to_id: Value = self.safe_string(accounts_by_id.clone(), to_account.clone(), to_account.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "currency": currency.get(Value::from("id")),
            "amount": parse_float(amount.clone()),
            "from": from_id,
            "to": to_id
        }))).unwrap());
        let mut method: Value = Value::from("spotPrivatePostPrivateDerivTransfer");
        if from_account.clone() == Value::from("margin") || to_account.clone() == Value::from("margin") {
            method = Value::from("spotPrivatePostPrivateMarginTransfer");
        };
        let mut response: Value = Cryptocom::dispatch(self, method, extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "id": 11,
        //         "method": "private/deriv/transfer",
        //         "code": 0
        //     }
        //
        return Cryptocom::parse_transfer(self, response.clone(), currency.clone());
    }

    /// Returns a list of [transfer structures](https://docs.ccxt.com/en/latest/manual.html#transfer-structure)
    ///
    /// Fetch a history of internal transfers made on an account
    ///
    /// # Arguments
    ///
    /// * `code` {string|undefined} - unified currency code of the currency transferred
    /// * `since` {int|undefined} - the earliest time in ms to fetch transfers for
    /// * `limit` {int|undefined} - the maximum number of  transfers structures to retrieve
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_transfers(&mut self, mut code: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !params.contains_key(Value::from("direction")) {
            panic!(r###"ArgumentsRequired::new(self.get("id".into()) + Value::from(r#" fetchTransfers() requires a direction param to be either "IN" or "OUT""#))"###);
        };
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut currency: Value = Value::Undefined;
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "direction": "OUT"
        }))).unwrap());
        if code.clone().is_nonnullish() {
            currency = Cryptocom::currency(self, code.clone());
            request.set("currency".into(), currency.get(Value::from("id")));
        };
        if since.clone().is_nonnullish() {
            request.set("start_ts".into(), since.clone());
        };
        if limit.clone().is_nonnullish() {
            request.set("page_size".into(), limit.clone());
        };
        let mut method: Value = Value::from("spotPrivatePostPrivateDerivGetTransferHistory");
        let mut default_type: Value = self.safe_string(self.get("options".into()), Value::from("defaultType"), Value::Undefined);
        if default_type.clone() == Value::from("margin") {
            method = Value::from("spotPrivatePostPrivateMarginGetTransferHistory");
        };
        let mut response: Value = Cryptocom::dispatch(self, method, extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //       id: '1641032709328',
        //       method: 'private/deriv/get-transfer-history',
        //       code: '0',
        //       result: {
        //         transfer_list: [
        //           {
        //             direction: 'IN',
        //             time: '1641025185223',
        //             amount: '109.56',
        //             status: 'COMPLETED',
        //             information: 'From Spot Wallet',
        //             currency: 'USDC'
        //           }
        //         ]
        //       }
        //     }
        //
        let mut transfer: Value = Value::new_array();
        transfer.push(Value::Json(normalize(&Value::Json(json!({
            "response": response
        }))).unwrap()));
        return Cryptocom::parse_transfers(self, transfer.clone(), currency.clone(), since.clone(), limit.clone(), params.clone());
    }

    fn parse_transfer_status(&self, mut status: Value) -> Value {
        let mut statuses: Value = Value::Json(normalize(&Value::Json(json!({
            "COMPLETED": "ok",
            "PROCESSING": "pending"
        }))).unwrap());
        return self.safe_string(statuses.clone(), status.clone(), status.clone());
    }

    fn parse_transfer(&self, mut transfer: Value, mut currency: Value) -> Value {
        //
        //   {
        //     response: {
        //       id: '1641032709328',
        //       method: 'private/deriv/get-transfer-history',
        //       code: '0',
        //       result: {
        //         transfer_list: [
        //           {
        //             direction: 'IN',
        //             time: '1641025185223',
        //             amount: '109.56',
        //             status: 'COMPLETED',
        //             information: 'From Spot Wallet',
        //             currency: 'USDC'
        //           }
        //         ]
        //       }
        //     }
        //   }
        //
        let mut response: Value = self.safe_value(transfer.clone(), Value::from("response"), Value::new_object());
        let mut result: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut transfer_list: Value = self.safe_value(result.clone(), Value::from("transfer_list"), Value::new_array());
        let mut timestamp: Value = Value::Undefined;
        let mut amount: Value = Value::Undefined;
        let mut code: Value = Value::Undefined;
        let mut information: Value = Value::Undefined;
        let mut status: Value = Value::Undefined;
        let mut i: usize = 0;
        while i < transfer_list.len() {
            let mut entry: Value = transfer_list.get(i.into());
            timestamp = self.safe_integer(entry.clone(), Value::from("time"), Value::Undefined);
            amount = Cryptocom::safe_number(self, entry.clone(), Value::from("amount"), Value::Undefined);
            let mut currency_id: Value = self.safe_string(entry.clone(), Value::from("currency"), Value::Undefined);
            code = Cryptocom::safe_currency_code(self, currency_id.clone(), Value::Undefined);
            information = self.safe_string(entry.clone(), Value::from("information"), Value::Undefined);
            let mut raw_status: Value = self.safe_string(entry.clone(), Value::from("status"), Value::Undefined);
            status = Cryptocom::parse_transfer_status(self, raw_status.clone());
            i += 1;
        };
        let mut from_account: Value = Value::Undefined;
        let mut to_account: Value = Value::Undefined;
        if information.clone().is_nonnullish() {
            let mut parts: Value = information.split(Value::from(" "));
            let mut direction: Value = self.safe_string_lower(parts.clone(), Value::from(0), Value::Undefined);
            let mut method: Value = self.safe_string(response.clone(), Value::from("method"), Value::Undefined);
            if direction.clone() == Value::from("from") {
                from_account = self.safe_string_lower(parts.clone(), Value::from(1), Value::Undefined);
                if method.clone() == Value::from("private/margin/get-transfer-history") {
                    to_account = Value::from("margin");
                } else {
                    to_account = Value::from("derivative");
                };
            } else if direction.clone() == Value::from("to") {
                to_account = self.safe_string_lower(parts.clone(), Value::from(1), Value::Undefined);
                if method.clone() == Value::from("private/margin/get-transfer-history") {
                    from_account = Value::from("margin");
                } else {
                    from_account = Value::from("derivative");
                };
            };
        };
        return Value::Json(normalize(&Value::Json(json!({
            "info": transfer_list,
            "id": self.safe_string(response.clone(), Value::from("id"), Value::Undefined),
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "currency": code,
            "amount": amount,
            "fromAccount": from_account,
            "toAccount": to_account,
            "status": status
        }))).unwrap());
    }

    fn parse_ticker(&self, mut ticker: Value, mut market: Value) -> Value {
        // {
        //     "i":"CRO_BTC",
        //     "b":0.00000890,
        //     "k":0.00001179,
        //     "a":0.00001042,
        //     "t":1591770793901,
        //     "v":14905879.59,
        //     "h":0.00,
        //     "l":0.00,
        //     "c":0.00
        // }
        let mut timestamp: Value = self.safe_integer(ticker.clone(), Value::from("t"), Value::Undefined);
        let mut market_id: Value = self.safe_string(ticker.clone(), Value::from("i"), Value::Undefined);
        market = Cryptocom::safe_market(self, market_id.clone(), market.clone(), Value::from("_"));
        let mut symbol: Value = market.get(Value::from("symbol"));
        let mut last: Value = self.safe_string(ticker.clone(), Value::from("a"), Value::Undefined);
        let mut relative_change: Value = self.safe_string(ticker.clone(), Value::from("c"), Value::Undefined);
        return Cryptocom::safe_ticker(self, Value::Json(normalize(&Value::Json(json!({
            "symbol": symbol,
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "high": self.safe_string(ticker.clone(), Value::from("h"), Value::Undefined),
            "low": self.safe_string(ticker.clone(), Value::from("l"), Value::Undefined),
            "bid": self.safe_string(ticker.clone(), Value::from("b"), Value::Undefined),
            "bidVolume": Value::Undefined,
            "ask": self.safe_string(ticker.clone(), Value::from("k"), Value::Undefined),
            "askVolume": Value::Undefined,
            "vwap": Value::Undefined,
            "open": Value::Undefined,
            "close": last,
            "last": last,
            "previousClose": Value::Undefined,
            "change": relative_change,
            "percentage": Value::Undefined,
            "average": Value::Undefined,
            "baseVolume": self.safe_string(ticker.clone(), Value::from("v"), Value::Undefined),
            "quoteVolume": Value::Undefined,
            "info": ticker
        }))).unwrap()), market.clone());
    }

    fn parse_trade(&mut self, mut trade: Value, mut market: Value) -> Value {
        //
        // public/get-trades
        //
        // {"dataTime":1591710781947,"d":465533583799589409,"s":"BUY","p":2.96,"q":16.0,"t":1591710781946,"i":"ICX_CRO"},
        //
        // private/get-trades
        //
        // {
        //     "side": "SELL",
        //     "instrument_name": "ETH_CRO",
        //     "fee": 0.014,
        //     "trade_id": "367107655537806900",
        //     "create_time": 1588777459755,
        //     "traded_price": 7,
        //     "traded_quantity": 1,
        //     "fee_currency": "CRO",
        //     "order_id": "367107623521528450"
        // }
        let mut timestamp: Value = self.safe_integer_2(trade.clone(), Value::from("t"), Value::from("create_time"), Value::Undefined);
        let mut market_id: Value = self.safe_string_2(trade.clone(), Value::from("i"), Value::from("instrument_name"), Value::Undefined);
        market = Cryptocom::safe_market(self, market_id.clone(), market.clone(), Value::from("_"));
        let mut symbol: Value = market.get(Value::from("symbol"));
        let mut price: Value = self.safe_string_2(trade.clone(), Value::from("p"), Value::from("traded_price"), Value::Undefined);
        let mut amount: Value = self.safe_string_2(trade.clone(), Value::from("q"), Value::from("traded_quantity"), Value::Undefined);
        let mut side: Value = self.safe_string_2(trade.clone(), Value::from("s"), Value::from("side"), Value::Undefined);
        if side.clone().is_nonnullish() {
            side = side.to_lower_case();
        };
        let mut id: Value = self.safe_string_2(trade.clone(), Value::from("d"), Value::from("trade_id"), Value::Undefined);
        let mut taker_or_maker: Value = self.safe_string_lower_2(trade.clone(), Value::from("liquidity_indicator"), Value::from("taker_side"), Value::Undefined);
        let mut order: Value = self.safe_string(trade.clone(), Value::from("order_id"), Value::Undefined);
        let mut fee: Value = Value::Undefined;
        let mut fee_cost: Value = self.safe_string_2(trade.clone(), Value::from("fee"), Value::from("fees"), Value::Undefined);
        if fee_cost.clone().is_nonnullish() {
            let mut contract: Value = self.safe_value(market.clone(), Value::from("contract"), false.into());
            if contract.is_truthy() {
                fee_cost = Precise::string_neg(fee_cost.clone());
            };
            let mut fee_currency: Value = Value::Undefined;
            if market.get(Value::from("spot")).is_truthy() {
                fee_currency = self.safe_string(trade.clone(), Value::from("fee_currency"), Value::Undefined);
            } else if market.get(Value::from("linear")).is_truthy() {
                fee_currency = market.get(Value::from("quote"));
            };
            fee = Value::Json(normalize(&Value::Json(json!({
                "currency": fee_currency,
                "cost": fee_cost
            }))).unwrap());
        };
        return Cryptocom::safe_trade(self, Value::Json(normalize(&Value::Json(json!({
            "info": trade,
            "id": id,
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "symbol": symbol,
            "side": side,
            "price": price,
            "amount": amount,
            "cost": Value::Undefined,
            "order": order,
            "takerOrMaker": taker_or_maker,
            "type": Value::Undefined,
            "fee": fee
        }))).unwrap()), market.clone());
    }

    fn parse_ohlcv(&self, mut ohlcv: Value, mut market: Value) -> Value {
        //      {"t":1596944700000,"o":11752.38,"h":11754.77,"l":11746.65,"c":11753.64,"v":3.694583}
        return Value::Json(serde_json::Value::Array(vec![self.safe_integer(ohlcv.clone(), Value::from("t"), Value::Undefined).into(), Cryptocom::safe_number(self, ohlcv.clone(), Value::from("o"), Value::Undefined).into(), Cryptocom::safe_number(self, ohlcv.clone(), Value::from("h"), Value::Undefined).into(), Cryptocom::safe_number(self, ohlcv.clone(), Value::from("l"), Value::Undefined).into(), Cryptocom::safe_number(self, ohlcv.clone(), Value::from("c"), Value::Undefined).into(), Cryptocom::safe_number(self, ohlcv.clone(), Value::from("v"), Value::Undefined).into()]));
    }

    fn parse_order_status(&self, mut status: Value) -> Value {
        let mut statuses: Value = Value::Json(normalize(&Value::Json(json!({
            "ACTIVE": "open",
            "CANCELED": "canceled",
            "FILLED": "closed",
            "REJECTED": "rejected",
            "EXPIRED": "expired"
        }))).unwrap());
        return self.safe_string(statuses.clone(), status.clone(), status.clone());
    }

    fn parse_time_in_force(&self, mut time_in_force: Value) -> Value {
        let mut time_in_forces: Value = Value::Json(normalize(&Value::Json(json!({
            "GOOD_TILL_CANCEL": "GTC",
            "IMMEDIATE_OR_CANCEL": "IOC",
            "FILL_OR_KILL": "FOK"
        }))).unwrap());
        return self.safe_string(time_in_forces.clone(), time_in_force.clone(), time_in_force.clone());
    }

    fn parse_order(&mut self, mut order: Value, mut market: Value) -> Value {
        //       {
        //         "status": "FILLED",
        //         "side": "BUY",
        //         "order_id": "371302913889488619",
        //         "client_oid": "9_yMYJDNEeqHxLqtD_2j3g",
        //         "create_time": 1588902489144,
        //         "update_time": 1588902493024,
        //         "type": "LIMIT",
        //         "instrument_name": "ETH_CRO",
        //         "cumulative_quantity": 7,
        //         "cumulative_value": 7,
        //         "avg_price": 7,
        //         "fee_currency": "CRO",
        //         "time_in_force": "GOOD_TILL_CANCEL",
        //         "exec_inst": "POST_ONLY"
        //       }
        //
        //     {
        //       id: 1641026373106,
        //       method: 'private/get-order-history',
        //       code: 0,
        //       result: {
        //         data: [
        //           {
        //             account_id: '85ff689a-7508-4b96-aa79-dc0545d6e637',
        //             order_id: 13191401932,
        //             client_oid: '1641025941461',
        //             order_type: 'LIMIT',
        //             time_in_force: 'GOOD_TILL_CANCEL',
        //             side: 'BUY',
        //             exec_inst: [],
        //             quantity: '0.0001',
        //             limit_price: '48000.0',
        //             order_value: '4.80000000',
        //             maker_fee_rate: '0.00050',
        //             taker_fee_rate: '0.00070',
        //             avg_price: '47253.5',
        //             trigger_price: '0.0',
        //             ref_price_type: 'NULL_VAL',
        //             cumulative_quantity: '0.0001',
        //             cumulative_value: '4.72535000',
        //             cumulative_fee: '0.00330775',
        //             status: 'FILLED',
        //             update_user_id: 'ce075bef-b600-4277-bd6e-ff9007251e63',
        //             order_date: '2022-01-01',
        //             instrument_name: 'BTCUSD-PERP',
        //             fee_instrument_name: 'USD_Stable_Coin',
        //             create_time: 1641025941827,
        //             create_time_ns: '1641025941827994756',
        //             update_time: 1641025941827
        //           }
        //         ]
        //       }
        //     }
        //
        let mut created: Value = self.safe_integer(order.clone(), Value::from("create_time"), Value::Undefined);
        let mut updated: Value = self.safe_integer(order.clone(), Value::from("update_time"), Value::Undefined);
        let mut market_id: Value = self.safe_string(order.clone(), Value::from("instrument_name"), Value::Undefined);
        let mut symbol: Value = Cryptocom::safe_symbol(self, market_id.clone(), market.clone(), Value::Undefined);
        let mut amount: Value = self.safe_string(order.clone(), Value::from("quantity"), Value::Undefined);
        let mut filled: Value = self.safe_string(order.clone(), Value::from("cumulative_quantity"), Value::Undefined);
        let mut status: Value = Cryptocom::parse_order_status(self, self.safe_string(order.clone(), Value::from("status"), Value::Undefined));
        let mut id: Value = self.safe_string(order.clone(), Value::from("order_id"), Value::Undefined);
        let mut client_order_id: Value = self.safe_string(order.clone(), Value::from("client_oid"), Value::Undefined);
        let mut price: Value = self.safe_string_2(order.clone(), Value::from("price"), Value::from("limit_price"), Value::Undefined);
        let mut average: Value = self.safe_string(order.clone(), Value::from("avg_price"), Value::Undefined);
        let mut r#type: Value = self.safe_string_lower_2(order.clone(), Value::from("type"), Value::from("order_type"), Value::Undefined);
        let mut side: Value = self.safe_string_lower(order.clone(), Value::from("side"), Value::Undefined);
        let mut time_in_force: Value = Cryptocom::parse_time_in_force(self, self.safe_string(order.clone(), Value::from("time_in_force"), Value::Undefined));
        let mut exec_inst: Value = self.safe_string(order.clone(), Value::from("exec_inst"), Value::Undefined);
        let mut post_only: Value = Value::Undefined;
        if exec_inst.clone().is_nonnullish() {
            post_only = (exec_inst.clone() == Value::from("POST_ONLY")).into();
        };
        let mut cost: Value = self.safe_string(order.clone(), Value::from("cumulative_value"), Value::Undefined);
        let mut fee_cost: Value = self.safe_string(order.clone(), Value::from("cumulative_fee"), Value::Undefined);
        let mut fee: Value = Value::Undefined;
        if fee_cost.clone().is_nonnullish() {
            let mut fee_currency: Value = self.safe_string(order.clone(), Value::from("fee_instrument_name"), Value::Undefined);
            fee = Value::Json(normalize(&Value::Json(json!({
                "cost": fee_cost,
                "currency": Cryptocom::safe_currency_code(self, fee_currency.clone(), Value::Undefined)
            }))).unwrap());
        };
        return Cryptocom::safe_order(self, Value::Json(normalize(&Value::Json(json!({
            "info": order,
            "id": id,
            "clientOrderId": client_order_id,
            "timestamp": created,
            "datetime": self.iso8601(created.clone()),
            "lastTradeTimestamp": updated,
            "status": status,
            "symbol": symbol,
            "type": r#type,
            "timeInForce": time_in_force,
            "postOnly": post_only,
            "side": side,
            "price": price,
            "amount": amount,
            "filled": filled,
            "remaining": Value::Undefined,
            "cost": cost,
            "fee": fee,
            "average": average,
            "trades": Value::new_array()
        }))).unwrap()), market.clone());
    }

    fn parse_deposit_status(&self, mut status: Value) -> Value {
        let mut statuses: Value = Value::Json(normalize(&Value::Json(json!({
            "0": "pending",
            "1": "ok",
            "2": "failed",
            "3": "pending"
        }))).unwrap());
        return self.safe_string(statuses.clone(), status.clone(), status.clone());
    }

    fn parse_withdrawal_status(&self, mut status: Value) -> Value {
        let mut statuses: Value = Value::Json(normalize(&Value::Json(json!({
            "0": "pending",
            "1": "pending",
            "2": "failed",
            "3": "pending",
            "4": "failed",
            "5": "ok",
            "6": "canceled"
        }))).unwrap());
        return self.safe_string(statuses.clone(), status.clone(), status.clone());
    }

    fn parse_transaction(&self, mut transaction: Value, mut currency: Value) -> Value {
        //
        // fetchDeposits
        //
        //     {
        //         "currency": "XRP",
        //         "fee": 1.0,
        //         "create_time": 1607063412000,
        //         "id": "2220",
        //         "update_time": 1607063460000,
        //         "amount": 100,
        //         "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBf?1234567890",
        //         "status": "1"
        //     }
        //
        // fetchWithdrawals
        //
        //     {
        //         "currency": "XRP",
        //         "client_wid": "my_withdrawal_002",
        //         "fee": 1.0,
        //         "create_time": 1607063412000,
        //         "id": "2220",
        //         "update_time": 1607063460000,
        //         "amount": 100,
        //         "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBf?1234567890",
        //         "status": "1"
        //     }
        //
        // withdraw
        //
        //     {
        //         "id": 2220,
        //         "amount": 1,
        //         "fee": 0.0004,
        //         "symbol": "BTC",
        //         "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBf",
        //         "client_wid": "my_withdrawal_002",
        //         "create_time":1607063412000
        //     }
        //
        let mut r#type: Value = Value::Undefined;
        let mut raw_status: Value = self.safe_string(transaction.clone(), Value::from("status"), Value::Undefined);
        let mut status: Value = Value::Undefined;
        if transaction.contains_key(Value::from("client_wid")) {
            r#type = Value::from("withdrawal");
            status = Cryptocom::parse_withdrawal_status(self, raw_status.clone());
        } else {
            r#type = Value::from("deposit");
            status = Cryptocom::parse_deposit_status(self, raw_status.clone());
        };
        let mut id: Value = self.safe_string(transaction.clone(), Value::from("id"), Value::Undefined);
        let mut address_string: Value = self.safe_string(transaction.clone(), Value::from("address"), Value::Undefined);
        let (mut address, mut tag) = shift_2(Cryptocom::parse_address(self, address_string.clone()));
        let mut currency_id: Value = self.safe_string(transaction.clone(), Value::from("currency"), Value::Undefined);
        let mut code: Value = Cryptocom::safe_currency_code(self, currency_id.clone(), currency.clone());
        let mut timestamp: Value = self.safe_integer(transaction.clone(), Value::from("create_time"), Value::Undefined);
        let mut amount: Value = Cryptocom::safe_number(self, transaction.clone(), Value::from("amount"), Value::Undefined);
        let mut tx_id: Value = self.safe_string(transaction.clone(), Value::from("txid"), Value::Undefined);
        let mut fee_cost: Value = Cryptocom::safe_number(self, transaction.clone(), Value::from("fee"), Value::Undefined);
        let mut fee: Value = Value::Undefined;
        if fee_cost.clone().is_nonnullish() {
            fee = Value::Json(normalize(&Value::Json(json!({
                "currency": code,
                "cost": fee_cost
            }))).unwrap());
        };
        let mut updated: Value = self.safe_integer(transaction.clone(), Value::from("update_time"), Value::Undefined);
        return Value::Json(normalize(&Value::Json(json!({
            "info": transaction,
            "id": id,
            "txid": tx_id,
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "network": Value::Undefined,
            "address": address,
            "addressTo": address,
            "addressFrom": Value::Undefined,
            "tag": tag,
            "tagTo": tag,
            "tagFrom": Value::Undefined,
            "type": r#type,
            "amount": amount,
            "currency": code,
            "status": status,
            "updated": updated,
            "internal": Value::Undefined,
            "fee": fee
        }))).unwrap());
    }

    /// Returns a [margin loan structure](https://docs.ccxt.com/en/latest/manual.html#margin-loan-structure)
    ///
    /// Repay borrowed margin and interest
    /// @see https://exchange-docs.crypto.com/spot/index.html#private-margin-repay
    ///
    /// # Arguments
    ///
    /// * `code` {string} - unified currency code of the currency to repay
    /// * `amount` {float} - the amount to repay
    /// * `symbol` {string|undefined} - unified market symbol, not used by cryptocom.repayMargin ()
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn repay_margin(&mut self, mut code: Value, mut amount: Value, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut currency: Value = Cryptocom::currency(self, code.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "currency": currency.get(Value::from("id")),
            "amount": Cryptocom::currency_to_precision(self, code.clone(), amount.clone(), Value::Undefined)
        }))).unwrap());
        let mut response: Value = Cryptocom::dispatch(self, "spotPrivatePostPrivateMarginRepay".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "id": 1656620104211,
        //         "method": "private/margin/repay",
        //         "code": 0,
        //         "result": {
        //             "badDebt": 0
        //         }
        //     }
        //
        let mut transaction: Value = Cryptocom::parse_margin_loan(self, response.clone(), currency.clone());
        return extend_2(transaction.clone(), Value::Json(normalize(&Value::Json(json!({
            "amount": amount
        }))).unwrap()));
    }

    /// Returns a [margin loan structure](https://docs.ccxt.com/en/latest/manual.html#margin-loan-structure)
    ///
    /// Create a loan to borrow margin
    /// @see https://exchange-docs.crypto.com/spot/index.html#private-margin-borrow
    ///
    /// # Arguments
    ///
    /// * `code` {string} - unified currency code of the currency to borrow
    /// * `amount` {float} - the amount to borrow
    /// * `symbol` {string|undefined} - unified market symbol, not used by cryptocom.repayMargin ()
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn borrow_margin(&mut self, mut code: Value, mut amount: Value, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut currency: Value = Cryptocom::currency(self, code.clone());
        let mut request: Value = Value::Json(normalize(&Value::Json(json!({
            "currency": currency.get(Value::from("id")),
            "amount": Cryptocom::currency_to_precision(self, code.clone(), amount.clone(), Value::Undefined)
        }))).unwrap());
        let mut response: Value = Cryptocom::dispatch(self, "spotPrivatePostPrivateMarginBorrow".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "id": 1656619578559,
        //         "method": "private/margin/borrow",
        //         "code": 0
        //     }
        //
        let mut transaction: Value = Cryptocom::parse_margin_loan(self, response.clone(), currency.clone());
        return extend_2(transaction.clone(), Value::Json(normalize(&Value::Json(json!({
            "amount": amount
        }))).unwrap()));
    }

    fn parse_margin_loan(&self, mut info: Value, mut currency: Value) -> Value {
        //
        // borrowMargin
        //
        //     {
        //         "id": 1656619578559,
        //         "method": "private/margin/borrow",
        //         "code": 0
        //     }
        //
        // repayMargin
        //
        //     {
        //         "id": 1656620104211,
        //         "method": "private/margin/repay",
        //         "code": 0,
        //         "result": {
        //             "badDebt": 0
        //         }
        //     }
        //
        return Value::Json(normalize(&Value::Json(json!({
            "id": self.safe_integer(info.clone(), Value::from("id"), Value::Undefined),
            "currency": Cryptocom::safe_currency_code(self, Value::Undefined, currency.clone()),
            "amount": Value::Undefined,
            "symbol": Value::Undefined,
            "timestamp": Value::Undefined,
            "datetime": Value::Undefined,
            "info": info
        }))).unwrap());
    }

    async fn fetch_borrow_interest(&mut self, mut code: Value, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut request: Value = Value::new_object();
        let mut market: Value = Value::Undefined;
        let mut currency: Value = Value::Undefined;
        if symbol.clone().is_nonnullish() {
            market = Cryptocom::market(self, symbol.clone());
        };
        if code.clone().is_nonnullish() {
            currency = Cryptocom::currency(self, code.clone());
            request.set("currency".into(), currency.get(Value::from("id")));
        };
        if since.clone().is_nonnullish() {
            request.set("start_ts".into(), since.clone());
        };
        if limit.clone().is_nonnullish() {
            request.set("page_size".into(), limit.clone());
        };
        let mut response: Value = Cryptocom::dispatch(self, "spotPrivatePostPrivateMarginGetInterestHistory".into(), extend_2(request.clone(), params.clone()), Value::Undefined).await;
        //
        //     {
        //         "id": 1656705829020,
        //         "method": "private/margin/get-interest-history",
        //         "code": 0,
        //         "result": {
        //             "list": [
        //                 {
        //                     "loan_id": "2643528867803765921",
        //                     "currency": "USDT",
        //                     "interest": 0.00000004,
        //                     "time": 1656702899559,
        //                     "stake_amount": 6,
        //                     "interest_rate": 0.000025
        //                 },
        //             ]
        //         }
        //     }
        //
        let mut data: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut rows: Value = self.safe_value(data.clone(), Value::from("list"), Value::new_array());
        let mut interest: Value = Value::Undefined;
        let mut i: usize = 0;
        while i < rows.len() {
            interest = Cryptocom::parse_borrow_interests(self, rows.clone(), market.clone());
            i += 1;
        };
        return Cryptocom::filter_by_currency_since_limit(self, interest.clone(), code.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    fn parse_borrow_interest(&self, mut info: Value, mut market: Value) -> Value {
        //
        //     {
        //         "loan_id": "2643528867803765921",
        //         "currency": "USDT",
        //         "interest": 0.00000004,
        //         "time": 1656702899559,
        //         "stake_amount": 6,
        //         "interest_rate": 0.000025
        //     },
        //
        let mut timestamp: Value = self.safe_integer(info.clone(), Value::from("time"), Value::Undefined);
        let mut symbol: Value = Value::Undefined;
        if market.clone().is_nonnullish() {
            symbol = market.get(Value::from("symbol"));
        };
        return Value::Json(normalize(&Value::Json(json!({
            "symbol": symbol,
            "marginMode": Value::Undefined,
            "currency": Cryptocom::safe_currency_code(self, self.safe_string(info.clone(), Value::from("currency"), Value::Undefined), Value::Undefined),
            "interest": Cryptocom::safe_number(self, info.clone(), Value::from("interest"), Value::Undefined),
            "interestRate": Cryptocom::safe_number(self, info.clone(), Value::from("interest_rate"), Value::Undefined),
            "amountBorrowed": Value::Undefined,
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "info": info
        }))).unwrap());
    }

    /// Returns a list of [borrow rate structures](https://docs.ccxt.com/en/latest/manual.html#borrow-rate-structure)
    ///
    /// Fetch the borrow interest rates of all currencies
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the cryptocom api endpoint
    async fn fetch_borrow_rates(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut response: Value = Cryptocom::dispatch(self, "spotPrivatePostPrivateMarginGetUserConfig".into(), params.clone(), Value::Undefined).await;
        //
        //     {
        //         "id": 1656707947456,
        //         "method": "private/margin/get-user-config",
        //         "code": 0,
        //         "result": {
        //             "stake_amount": 6,
        //             "currency_configs": [
        //                 {
        //                     "currency": "AGLD",
        //                     "hourly_rate": 0.00003334,
        //                     "max_borrow_limit": 342.4032393,
        //                     "min_borrow_limit": 30
        //                 },
        //             ]
        //         }
        //     }
        //
        let mut data: Value = self.safe_value(response.clone(), Value::from("result"), Value::new_object());
        let mut rates: Value = self.safe_value(data.clone(), Value::from("currency_configs"), Value::new_array());
        return Cryptocom::parse_borrow_rates(self, rates.clone(), Value::from("currency"));
    }

    fn parse_borrow_rates(&self, mut info: Value, mut code_key: Value) -> Value {
        //
        //     {
        //         "currency": "AGLD",
        //         "hourly_rate": 0.00003334,
        //         "max_borrow_limit": 342.4032393,
        //         "min_borrow_limit": 30
        //     },
        //
        let mut timestamp: Value = self.milliseconds();
        let mut rates: Value = Value::new_array();
        let mut i: usize = 0;
        while i < info.len() {
            let mut entry: Value = info.get(i.into());
            rates.push(Value::Json(normalize(&Value::Json(json!({
                "currency": Cryptocom::safe_currency_code(self, self.safe_string(entry.clone(), Value::from("currency"), Value::Undefined), Value::Undefined),
                "rate": Cryptocom::safe_number(self, entry.clone(), Value::from("hourly_rate"), Value::Undefined),
                "period": 3600000,
                "timestamp": timestamp,
                "datetime": self.iso8601(timestamp.clone()),
                "info": entry
            }))).unwrap()));
            i += 1;
        };
        // 1-Hour
        return rates.clone();
    }

    fn nonce(&self) -> Value {
        return self.milliseconds();
    }

    fn sign(&mut self, mut path: Value, mut api: Value, mut method: Value, mut params: Value, mut headers: Value, mut body: Value) -> Value {
        api = api.or_default(Value::from("public"));
        method = method.or_default(Value::from("GET"));
        params = params.or_default(Value::new_object());
        let (mut r#type, mut access) = shift_2(api.clone());
        let mut url: Value = self.get("urls".into()).get(Value::from("api")).get(r#type.clone()) + Value::from("/") + path.clone();
        let mut query: Value = self.omit(params.clone(), self.extract_params(path.clone()));
        if access.clone() == Value::from("public") {
            if Object::keys(query.clone()).len() > 0 {
                url = url +  Value::from("?") + self.urlencode(query.clone());
            };
        } else {
            Cryptocom::check_required_credentials(self, Value::Undefined);
            let mut nonce: Value = Cryptocom::nonce(self).to_string();
            let mut request_params: Value = extend_2(Value::new_object(), params.clone());
            let mut keysorted: Value = self.keysort(request_params.clone(), Value::Undefined);
            let mut params_keys: Value = Object::keys(keysorted.clone());
            let mut str_sort_key: Value = Value::from("");
            let mut i: usize = 0;
            while i < params_keys.len() {
                str_sort_key = str_sort_key.clone() + params_keys.get(i.into()).to_string() + request_params.get(params_keys.get(i.into()).clone()).to_string();
                i += 1;
            };
            let mut payload: Value = path.clone() + nonce.clone() + self.get("apiKey".into()) + str_sort_key.clone() + nonce.clone();
            let mut signature: Value = self.hmac(self.encode(payload.clone()), self.encode(self.get("secret".into())), Value::Undefined, Value::Undefined);
            let mut params_keys_length: Value = params_keys.len().into();
            body = self.json(Value::Json(normalize(&Value::Json(json!({
                "id": nonce,
                "method": path,
                "params": params,
                "api_key": self.get("apiKey".into()),
                "sig": signature,
                "nonce": nonce
            }))).unwrap()), Value::Undefined);
            // fix issue https://github.com/ccxt/ccxt/issues/11179
            // php always encodes dictionaries as arrays
            // if an array is empty, php will put it in square brackets
            // python and js will put it in curly brackets
            // the code below checks and replaces those brackets in empty requests
            if params_keys_length.clone() == Value::from(0) {
                let mut params_string: Value = Value::from("{}");
                let mut array_string: Value = Value::from("[]");
                body = body.replace(array_string.clone(), params_string.clone());
            };
            headers = Value::Json(normalize(&Value::Json(json!({
                "Content-Type": "application/json"
            }))).unwrap());
        };
        return Value::Json(normalize(&Value::Json(json!({
            "url": url,
            "method": method,
            "body": body,
            "headers": headers
        }))).unwrap());
    }

    fn handle_errors(&mut self, mut code: Value, mut reason: Value, mut url: Value, mut method: Value, mut headers: Value, mut body: Value, mut response: Value, mut request_headers: Value, mut request_body: Value) -> Value {
        let mut error_code: Value = self.safe_string(response.clone(), Value::from("code"), Value::Undefined);
        if error_code.clone() != Value::from("0") {
            let mut feedback: Value = self.get("id".into()) + Value::from(" ") + body.clone();
            Cryptocom::throw_exactly_matched_exception(self, self.get("exceptions".into()).get(Value::from("exact")), error_code.clone(), feedback.clone());
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" ") + body.clone())"###);
        };
        Value::Undefined
    }

    fn safe_ledger_entry(&self, mut entry: Value, mut currency: Value) -> Value {
        currency = Cryptocom::safe_currency(self, Value::Undefined, currency.clone());
        let mut direction: Value = self.safe_string(entry.clone(), Value::from("direction"), Value::Undefined);
        let mut before: Value = self.safe_string(entry.clone(), Value::from("before"), Value::Undefined);
        let mut after: Value = self.safe_string(entry.clone(), Value::from("after"), Value::Undefined);
        let mut amount: Value = self.safe_string(entry.clone(), Value::from("amount"), Value::Undefined);
        if amount.clone().is_nonnullish() {
            if before.clone().is_nullish() && after.clone().is_nonnullish() {
                before = Precise::string_sub(after.clone(), amount.clone());
            } else if before.clone().is_nonnullish() && after.clone().is_nullish() {
                after = Precise::string_add(before.clone(), amount.clone());
            };
        };
        if before.clone().is_nonnullish() && after.clone().is_nonnullish() {
            if direction.clone().is_nullish() {
                if Precise::string_gt(before.clone(), after.clone()) {
                    direction = Value::from("out");
                };
                if Precise::string_gt(after.clone(), before.clone()) {
                    direction = Value::from("in");
                };
            };
        };
        let mut fee: Value = self.safe_value(entry.clone(), Value::from("fee"), Value::Undefined);
        if fee.clone().is_nonnullish() {
            fee.set("cost".into(), Cryptocom::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
        };
        let mut timestamp: Value = self.safe_integer(entry.clone(), Value::from("timestamp"), Value::Undefined);
        return Value::Json(normalize(&Value::Json(json!({
            "id": self.safe_string(entry.clone(), Value::from("id"), Value::Undefined),
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "direction": direction,
            "account": self.safe_string(entry.clone(), Value::from("account"), Value::Undefined),
            "referenceId": self.safe_string(entry.clone(), Value::from("referenceId"), Value::Undefined),
            "referenceAccount": self.safe_string(entry.clone(), Value::from("referenceAccount"), Value::Undefined),
            "type": self.safe_string(entry.clone(), Value::from("type"), Value::Undefined),
            "currency": currency.get(Value::from("code")),
            "amount": self.parse_number(amount.clone(), Value::Undefined),
            "before": self.parse_number(before.clone(), Value::Undefined),
            "after": self.parse_number(after.clone(), Value::Undefined),
            "status": self.safe_string(entry.clone(), Value::from("status"), Value::Undefined),
            "fee": fee,
            "info": entry
        }))).unwrap());
    }

    fn set_markets(&mut self, mut markets: Value, mut currencies: Value) -> Value {
        let mut values: Value = Value::new_array();
        let mut market_values: Value = self.to_array(markets.clone());
        let mut i: usize = 0;
        while i < market_values.len() {
            let mut market: Value = self.deep_extend_4(Cryptocom::safe_market(self, Value::Undefined, Value::Undefined, Value::Undefined), Value::Json(normalize(&Value::Json(json!({
                "precision": self.get("precision".into()),
                "limits": self.get("limits".into())
            }))).unwrap()), self.get("fees".into()).get(Value::from("trading")), market_values.get(i.into()));
            values.push(market.clone());
            i += 1;
        };
        self.set("markets".into(), self.index_by(values.clone(), Value::from("symbol"), Value::Undefined));
        self.set("markets_by_id".into(), self.index_by(markets.clone(), Value::from("id"), Value::Undefined));
        let mut markets_sorted_by_symbol: Value = self.keysort(self.get("markets".into()), Value::Undefined);
        let mut markets_sorted_by_id: Value = self.keysort(self.get("markets_by_id".into()), Value::Undefined);
        self.set("symbols".into(), Object::keys(markets_sorted_by_symbol.clone()));
        self.set("ids".into(), Object::keys(markets_sorted_by_id.clone()));
        if currencies.clone().is_nonnullish() {
            self.set("currencies".into(), self.deep_extend_2(self.get("currencies".into()), currencies.clone()));
        } else {
            let mut base_currencies: Value = Value::new_array();
            let mut quote_currencies: Value = Value::new_array();
            let mut i: usize = 0;
            while i < values.len() {
                let mut market: Value = values.get(i.into());
                let mut default_currency_precision: Value = if self.get("precision_mode".into()) == DECIMAL_PLACES.into() { Value::from(8) } else { self.parse_number(Value::from("0.00000001"), Value::Undefined) };
                let mut market_precision: Value = self.safe_value(market.clone(), Value::from("precision"), Value::new_object());
                if market.contains_key(Value::from("base")) {
                    let mut currency_precision: Value = self.safe_value_2(market_precision.clone(), Value::from("base"), Value::from("amount"), default_currency_precision.clone());
                    let mut currency: Value = Value::Json(normalize(&Value::Json(json!({
                        "id": self.safe_string_2(market.clone(), Value::from("baseId"), Value::from("base"), Value::Undefined),
                        "numericId": self.safe_string(market.clone(), Value::from("baseNumericId"), Value::Undefined),
                        "code": self.safe_string(market.clone(), Value::from("base"), Value::Undefined),
                        "precision": currency_precision
                    }))).unwrap());
                    base_currencies.push(currency.clone());
                };
                if market.contains_key(Value::from("quote")) {
                    let mut currency_precision: Value = self.safe_value_2(market_precision.clone(), Value::from("quote"), Value::from("amount"), default_currency_precision.clone());
                    let mut currency: Value = Value::Json(normalize(&Value::Json(json!({
                        "id": self.safe_string_2(market.clone(), Value::from("quoteId"), Value::from("quote"), Value::Undefined),
                        "numericId": self.safe_string(market.clone(), Value::from("quoteNumericId"), Value::Undefined),
                        "code": self.safe_string(market.clone(), Value::from("quote"), Value::Undefined),
                        "precision": currency_precision
                    }))).unwrap());
                    quote_currencies.push(currency.clone());
                };
                i += 1;
            };
            base_currencies = self.sort_by(base_currencies.clone(), Value::from("code"), Value::Undefined, Value::Undefined);
            quote_currencies = self.sort_by(quote_currencies.clone(), Value::from("code"), Value::Undefined, Value::Undefined);
            self.set("base_currencies".into(), self.index_by(base_currencies.clone(), Value::from("code"), Value::Undefined));
            self.set("quote_currencies".into(), self.index_by(quote_currencies.clone(), Value::from("code"), Value::Undefined));
            let mut all_currencies: Value = self.array_concat(base_currencies.clone(), quote_currencies.clone());
            let mut grouped_currencies: Value = self.group_by(all_currencies.clone(), Value::from("code"), Value::Undefined);
            let mut codes: Value = Object::keys(grouped_currencies.clone());
            let mut resulting_currencies: Value = Value::new_array();
            let mut i: usize = 0;
            while i < codes.len() {
                let mut code: Value = codes.get(i.into());
                let mut grouped_currencies_code: Value = self.safe_value(grouped_currencies.clone(), code.clone(), Value::new_array());
                let mut highest_precision_currency: Value = self.safe_value(grouped_currencies_code.clone(), Value::from(0), Value::Undefined);
                let mut j: usize = 1;
                while j < grouped_currencies_code.len() {
                    let mut current_currency: Value = grouped_currencies_code.get(j.into());
                    if self.get("precision_mode".into()) == TICK_SIZE.into() {
                        highest_precision_currency = if current_currency.get(Value::from("precision")) < highest_precision_currency.get(Value::from("precision")) { current_currency.clone() } else { highest_precision_currency.clone() };
                    } else {
                        highest_precision_currency = if current_currency.get(Value::from("precision")) > highest_precision_currency.get(Value::from("precision")) { current_currency.clone() } else { highest_precision_currency.clone() };
                    };
                    j += 1;
                };
                resulting_currencies.push(highest_precision_currency.clone());
                i += 1;
            };
            let mut sorted_currencies: Value = self.sort_by(resulting_currencies.clone(), Value::from("code"), Value::Undefined, Value::Undefined);
            self.set("currencies".into(), self.deep_extend_2(self.get("currencies".into()), self.index_by(sorted_currencies.clone(), Value::from("code"), Value::Undefined)));
        };
        self.set("currencies_by_id".into(), self.index_by(self.get("currencies".into()), Value::from("id"), Value::Undefined));
        let mut currencies_sorted_by_code: Value = self.keysort(self.get("currencies".into()), Value::Undefined);
        self.set("codes".into(), Object::keys(currencies_sorted_by_code.clone()));
        return self.get("markets".into());
    }

    fn safe_balance(&self, mut balance: Value) -> Value {
        let mut balances: Value = self.omit(balance.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("info").into(), Value::from("timestamp").into(), Value::from("datetime").into(), Value::from("free").into(), Value::from("used").into(), Value::from("total").into()])));
        let mut codes: Value = Object::keys(balances.clone());
        balance.set("free".into(), Value::new_object());
        balance.set("used".into(), Value::new_object());
        balance.set("total".into(), Value::new_object());
        let mut i: usize = 0;
        while i < codes.len() {
            let mut code: Value = codes.get(i.into());
            let mut total: Value = self.safe_string(balance.get(code.clone()), Value::from("total"), Value::Undefined);
            let mut free: Value = self.safe_string(balance.get(code.clone()), Value::from("free"), Value::Undefined);
            let mut used: Value = self.safe_string(balance.get(code.clone()), Value::from("used"), Value::Undefined);
            if total.clone().is_nullish() && free.clone().is_nonnullish() && used.clone().is_nonnullish() {
                total = Precise::string_add(free.clone(), used.clone());
            };
            if free.clone().is_nullish() && total.clone().is_nonnullish() && used.clone().is_nonnullish() {
                free = Precise::string_sub(total.clone(), used.clone());
            };
            if used.clone().is_nullish() && total.clone().is_nonnullish() && free.clone().is_nonnullish() {
                used = Precise::string_sub(total.clone(), free.clone());
            };
            balance.get(code.clone()).set("free".into(), self.parse_number(free.clone(), Value::Undefined));
            balance.get(code.clone()).set("used".into(), self.parse_number(used.clone(), Value::Undefined));
            balance.get(code.clone()).set("total".into(), self.parse_number(total.clone(), Value::Undefined));
            balance.get(Value::from("free")).set(code.clone(), balance.get(code.clone()).get(Value::from("free")));
            balance.get(Value::from("used")).set(code.clone(), balance.get(code.clone()).get(Value::from("used")));
            balance.get(Value::from("total")).set(code.clone(), balance.get(code.clone()).get(Value::from("total")));
            i += 1;
        };
        return balance.clone();
    }

    fn safe_order(&mut self, mut order: Value, mut market: Value) -> Value {
        // parses numbers as strings
        // it is important pass the trades as unparsed rawTrades
        let mut amount: Value = self.omit_zero(self.safe_string(order.clone(), Value::from("amount"), Value::Undefined));
        let mut remaining: Value = self.safe_string(order.clone(), Value::from("remaining"), Value::Undefined);
        let mut filled: Value = self.safe_string(order.clone(), Value::from("filled"), Value::Undefined);
        let mut cost: Value = self.safe_string(order.clone(), Value::from("cost"), Value::Undefined);
        let mut average: Value = self.omit_zero(self.safe_string(order.clone(), Value::from("average"), Value::Undefined));
        let mut price: Value = self.omit_zero(self.safe_string(order.clone(), Value::from("price"), Value::Undefined));
        let mut last_trade_time_timestamp: Value = self.safe_integer(order.clone(), Value::from("lastTradeTimestamp"), Value::Undefined);
        let mut parse_filled: Value = (filled.clone().is_nullish()).into();
        let mut parse_cost: Value = (cost.clone().is_nullish()).into();
        let mut parse_last_trade_time_timestamp: Value = (last_trade_time_timestamp.clone().is_nullish()).into();
        let mut fee: Value = self.safe_value(order.clone(), Value::from("fee"), Value::Undefined);
        let mut parse_fee: Value = (fee.clone().is_nullish()).into();
        let mut parse_fees: Value = (self.safe_value(order.clone(), Value::from("fees"), Value::Undefined).is_nullish()).into();
        let mut should_parse_fees: Value = (parse_fee.is_truthy() || parse_fees.is_truthy()).into();
        let mut fees: Value = self.safe_value(order.clone(), Value::from("fees"), Value::new_array());
        let mut trades: Value = Value::new_array();
        if parse_filled.is_truthy() || parse_cost.is_truthy() || should_parse_fees.is_truthy() {
            let mut raw_trades: Value = self.safe_value(order.clone(), Value::from("trades"), trades.clone());
            let mut old_number: Value = self.get("number".into());
            // we parse trades as strings here!
            self.set_number_mode("String".into());
            trades = Cryptocom::parse_trades(self, raw_trades.clone(), market.clone(), Value::Undefined, Value::Undefined, Value::Json(normalize(&Value::Json(json!({
                "symbol": order.get(Value::from("symbol")),
                "side": order.get(Value::from("side")),
                "type": order.get(Value::from("type")),
                "order": order.get(Value::from("id"))
            }))).unwrap()));
            self.set("number".into(), old_number.clone());
            let mut trades_length: Value = Value::from(0);
            let mut is_array: Value = Array::is_array(trades.clone());
            if is_array.is_truthy() {
                trades_length = trades.len().into();
            };
            if is_array.is_truthy() && trades_length.clone() > Value::from(0) {
                // move properties that are defined in trades up into the order
                if order.get(Value::from("symbol")).is_nullish() {
                    order.set("symbol".into(), trades.get(Value::from(0)).get(Value::from("symbol")));
                };
                if order.get(Value::from("side")).is_nullish() {
                    order.set("side".into(), trades.get(Value::from(0)).get(Value::from("side")));
                };
                if order.get(Value::from("type")).is_nullish() {
                    order.set("type".into(), trades.get(Value::from(0)).get(Value::from("type")));
                };
                if order.get(Value::from("id")).is_nullish() {
                    order.set("id".into(), trades.get(Value::from(0)).get(Value::from("order")));
                };
                if parse_filled.is_truthy() {
                    filled = Value::from("0");
                };
                if parse_cost.is_truthy() {
                    cost = Value::from("0");
                };
                let mut i: usize = 0;
                while i < trades.len() {
                    let mut trade: Value = trades.get(i.into());
                    let mut trade_amount: Value = self.safe_string(trade.clone(), Value::from("amount"), Value::Undefined);
                    if parse_filled.is_truthy() && trade_amount.clone().is_nonnullish() {
                        filled = Precise::string_add(filled.clone(), trade_amount.clone());
                    };
                    let mut trade_cost: Value = self.safe_string(trade.clone(), Value::from("cost"), Value::Undefined);
                    if parse_cost.is_truthy() && trade_cost.clone().is_nonnullish() {
                        cost = Precise::string_add(cost.clone(), trade_cost.clone());
                    };
                    let mut trade_timestamp: Value = self.safe_value(trade.clone(), Value::from("timestamp"), Value::Undefined);
                    if parse_last_trade_time_timestamp.is_truthy() && trade_timestamp.clone().is_nonnullish() {
                        if last_trade_time_timestamp.clone().is_nullish() {
                            last_trade_time_timestamp = trade_timestamp.clone();
                        } else {
                            last_trade_time_timestamp = Math::max(last_trade_time_timestamp.clone(), trade_timestamp.clone());
                        };
                    };
                    if should_parse_fees.is_truthy() {
                        let mut trade_fees: Value = self.safe_value(trade.clone(), Value::from("fees"), Value::Undefined);
                        if trade_fees.clone().is_nonnullish() {
                            let mut j: usize = 0;
                            while j < trade_fees.len() {
                                let mut trade_fee: Value = trade_fees.get(j.into());
                                fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                                j += 1;
                            };
                        } else {
                            let mut trade_fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
                            if trade_fee.clone().is_nonnullish() {
                                fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                            };
                        };
                    };
                    i += 1;
                };
            };
        };
        if should_parse_fees.is_truthy() {
            let mut reduced_fees: Value = if self.get("reduce_fees".into()).is_truthy() { Cryptocom::reduce_fees_by_currency(self, fees.clone()) } else { fees.clone() };
            let mut reduced_length: Value = reduced_fees.len().into();
            let mut i: usize = 0;
            while i < reduced_length.clone().into() {
                reduced_fees.get(i.into()).set("cost".into(), Cryptocom::safe_number(self, reduced_fees.get(i.into()), Value::from("cost"), Value::Undefined));
                if reduced_fees.get(i.into()).contains_key(Value::from("rate")) {
                    reduced_fees.get(i.into()).set("rate".into(), Cryptocom::safe_number(self, reduced_fees.get(i.into()), Value::from("rate"), Value::Undefined));
                };
                i += 1;
            };
            if !parse_fee.is_truthy() && reduced_length.clone() == Value::from(0) {
                fee.set("cost".into(), Cryptocom::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
                if fee.contains_key(Value::from("rate")) {
                    fee.set("rate".into(), Cryptocom::safe_number(self, fee.clone(), Value::from("rate"), Value::Undefined));
                };
                reduced_fees.push(fee.clone());
            };
            order.set("fees".into(), reduced_fees.clone());
            if parse_fee.is_truthy() && reduced_length.clone() == Value::from(1) {
                order.set("fee".into(), reduced_fees.get(Value::from(0)));
            };
        };
        if amount.clone().is_nullish() {
            // ensure amount = filled + remaining
            if filled.clone().is_nonnullish() && remaining.clone().is_nonnullish() {
                amount = Precise::string_add(filled.clone(), remaining.clone());
            } else if self.safe_string(order.clone(), Value::from("status"), Value::Undefined) == Value::from("closed") {
                amount = filled.clone();
            };
        };
        if filled.clone().is_nullish() {
            if amount.clone().is_nonnullish() && remaining.clone().is_nonnullish() {
                filled = Precise::string_sub(amount.clone(), remaining.clone());
            };
        };
        if remaining.clone().is_nullish() {
            if amount.clone().is_nonnullish() && filled.clone().is_nonnullish() {
                remaining = Precise::string_sub(amount.clone(), filled.clone());
            };
        };
        // ensure that the average field is calculated correctly
        if average.clone().is_nullish() {
            if filled.clone().is_nonnullish() && cost.clone().is_nonnullish() && Precise::string_gt(filled.clone(), Value::from("0")) {
                average = Precise::string_div(cost.clone(), filled.clone(), Value::Undefined);
            };
        };
        // also ensure the cost field is calculated correctly
        let mut cost_price_exists: Value = (average.clone().is_nonnullish() || price.clone().is_nonnullish()).into();
        if parse_cost.is_truthy() && filled.clone().is_nonnullish() && cost_price_exists.is_truthy() {
            let mut multiply_price: Value = Value::Undefined;
            if average.clone().is_nullish() {
                multiply_price = price.clone();
            } else {
                multiply_price = average.clone();
            };
            // contract trading
            let mut contract_size: Value = self.safe_string(market.clone(), Value::from("contractSize"), Value::Undefined);
            if contract_size.clone().is_nonnullish() {
                let mut inverse: Value = self.safe_value(market.clone(), Value::from("inverse"), false.into());
                if inverse.is_truthy() {
                    multiply_price = Precise::string_div(Value::from("1"), multiply_price.clone(), Value::Undefined);
                };
                multiply_price = Precise::string_mul(multiply_price.clone(), contract_size.clone());
            };
            cost = Precise::string_mul(multiply_price.clone(), filled.clone());
        };
        // support for market orders
        let mut order_type: Value = self.safe_value(order.clone(), Value::from("type"), Value::Undefined);
        let mut empty_price: Value = (price.clone().is_nullish() || Precise::string_equals(price.clone(), Value::from("0"))).into();
        if empty_price.is_truthy() && order_type.clone() == Value::from("market") {
            price = average.clone();
        };
        // we have trades with string values at this point so we will mutate them
        let mut i: usize = 0;
        while i < trades.len() {
            let mut entry: Value = trades.get(i.into());
            entry.set("amount".into(), Cryptocom::safe_number(self, entry.clone(), Value::from("amount"), Value::Undefined));
            entry.set("price".into(), Cryptocom::safe_number(self, entry.clone(), Value::from("price"), Value::Undefined));
            entry.set("cost".into(), Cryptocom::safe_number(self, entry.clone(), Value::from("cost"), Value::Undefined));
            let mut fee: Value = self.safe_value(entry.clone(), Value::from("fee"), Value::new_object());
            fee.set("cost".into(), Cryptocom::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
            if fee.contains_key(Value::from("rate")) {
                fee.set("rate".into(), Cryptocom::safe_number(self, fee.clone(), Value::from("rate"), Value::Undefined));
            };
            entry.set("fee".into(), fee.clone());
            i += 1;
        };
        // timeInForceHandling
        let mut time_in_force: Value = self.safe_string(order.clone(), Value::from("timeInForce"), Value::Undefined);
        if time_in_force.clone().is_nullish() {
            if self.safe_string(order.clone(), Value::from("type"), Value::Undefined) == Value::from("market") {
                time_in_force = Value::from("IOC");
            };
            // allow postOnly override
            if self.safe_value(order.clone(), Value::from("postOnly"), false.into()).is_truthy() {
                time_in_force = Value::from("PO");
            };
        };
        return extend_2(order.clone(), Value::Json(normalize(&Value::Json(json!({
            "lastTradeTimestamp": last_trade_time_timestamp,
            "price": self.parse_number(price.clone(), Value::Undefined),
            "amount": self.parse_number(amount.clone(), Value::Undefined),
            "cost": self.parse_number(cost.clone(), Value::Undefined),
            "average": self.parse_number(average.clone(), Value::Undefined),
            "filled": self.parse_number(filled.clone(), Value::Undefined),
            "remaining": self.parse_number(remaining.clone(), Value::Undefined),
            "timeInForce": time_in_force,
            "trades": trades
        }))).unwrap()));
    }

    fn parse_orders(&mut self, mut orders: Value, mut market: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        //
        // the value of orders is either a dict or a list
        //
        // dict
        //
        //     {
        //         'id1': { ... },
        //         'id2': { ... },
        //         'id3': { ... },
        //         ...
        //     }
        //
        // list
        //
        //     [
        //         { 'id': 'id1', ... },
        //         { 'id': 'id2', ... },
        //         { 'id': 'id3', ... },
        //         ...
        //     ]
        //
        let mut results: Value = Value::new_array();
        if Array::is_array(orders.clone()).is_truthy() {
            let mut i: usize = 0;
            while i < orders.len() {
                let mut order: Value = extend_2(Cryptocom::parse_order(self, orders.get(i.into()), market.clone()), params.clone());
                results.push(order.clone());
                i += 1;
            };
        } else {
            let mut ids: Value = Object::keys(orders.clone());
            let mut i: usize = 0;
            while i < ids.len() {
                let mut id: Value = ids.get(i.into());
                let mut order: Value = extend_2(Cryptocom::parse_order(self, extend_2(Value::Json(normalize(&Value::Json(json!({
                    "id": id
                }))).unwrap()), orders.get(id.clone())), market.clone()), params.clone());
                results.push(order.clone());
                i += 1;
            };
        };
        results = self.sort_by(results.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut symbol: Value = if market.clone().is_nonnullish() { market.get(Value::from("symbol")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Cryptocom::filter_by_symbol_since_limit(self, results.clone(), symbol.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn calculate_fee(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut taker_or_maker: Value, mut params: Value) -> Value {
        taker_or_maker = taker_or_maker.or_default(Value::from("taker"));
        params = params.or_default(Value::new_object());
        let mut market: Value = self.get("markets".into()).get(symbol.clone());
        let mut fee_side: Value = self.safe_string(market.clone(), Value::from("feeSide"), Value::from("quote"));
        let mut key: Value = Value::from("quote");
        let mut cost: Value = Value::Undefined;
        if fee_side.clone() == Value::from("quote") {
            // the fee is always in quote currency
            cost = amount.clone() * price.clone();
        } else if fee_side.clone() == Value::from("base") {
            // the fee is always in base currency
            cost = amount.clone();
        } else if fee_side.clone() == Value::from("get") {
            // the fee is always in the currency you get
            cost = amount.clone();
            if side.clone() == Value::from("sell") {
                cost = cost *  price.clone();
            } else {
                key = Value::from("base");
            };
        } else if fee_side.clone() == Value::from("give") {
            // the fee is always in the currency you give
            cost = amount.clone();
            if side.clone() == Value::from("buy") {
                cost = cost *  price.clone();
            } else {
                key = Value::from("base");
            };
        };
        let mut rate: Value = market.get(taker_or_maker.clone());
        if cost.clone().is_nonnullish() {
            cost = cost *  rate.clone();
        };
        return Value::Json(normalize(&Value::Json(json!({
            "type": taker_or_maker,
            "currency": market.get(key.clone()),
            "rate": rate,
            "cost": cost
        }))).unwrap());
    }

    fn safe_trade(&mut self, mut trade: Value, mut market: Value) -> Value {
        let mut amount: Value = self.safe_string(trade.clone(), Value::from("amount"), Value::Undefined);
        let mut price: Value = self.safe_string(trade.clone(), Value::from("price"), Value::Undefined);
        let mut cost: Value = self.safe_string(trade.clone(), Value::from("cost"), Value::Undefined);
        if cost.clone().is_nullish() {
            // contract trading
            let mut contract_size: Value = self.safe_string(market.clone(), Value::from("contractSize"), Value::Undefined);
            let mut multiply_price: Value = price.clone();
            if contract_size.clone().is_nonnullish() {
                let mut inverse: Value = self.safe_value(market.clone(), Value::from("inverse"), false.into());
                if inverse.is_truthy() {
                    multiply_price = Precise::string_div(Value::from("1"), price.clone(), Value::Undefined);
                };
                multiply_price = Precise::string_mul(multiply_price.clone(), contract_size.clone());
            };
            cost = Precise::string_mul(multiply_price.clone(), amount.clone());
        };
        let mut parse_fee: Value = (self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined).is_nullish()).into();
        let mut parse_fees: Value = (self.safe_value(trade.clone(), Value::from("fees"), Value::Undefined).is_nullish()).into();
        let mut should_parse_fees: Value = (parse_fee.is_truthy() || parse_fees.is_truthy()).into();
        let mut fees: Value = Value::new_array();
        if should_parse_fees.is_truthy() {
            let mut trade_fees: Value = self.safe_value(trade.clone(), Value::from("fees"), Value::Undefined);
            if trade_fees.clone().is_nonnullish() {
                let mut j: usize = 0;
                while j < trade_fees.len() {
                    let mut trade_fee: Value = trade_fees.get(j.into());
                    fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                    j += 1;
                };
            } else {
                let mut trade_fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
                if trade_fee.clone().is_nonnullish() {
                    fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                };
            };
        };
        let mut fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
        if should_parse_fees.is_truthy() {
            let mut reduced_fees: Value = if self.get("reduce_fees".into()).is_truthy() { Cryptocom::reduce_fees_by_currency(self, fees.clone()) } else { fees.clone() };
            let mut reduced_length: Value = reduced_fees.len().into();
            let mut i: usize = 0;
            while i < reduced_length.clone().into() {
                reduced_fees.get(i.into()).set("cost".into(), Cryptocom::safe_number(self, reduced_fees.get(i.into()), Value::from("cost"), Value::Undefined));
                if reduced_fees.get(i.into()).contains_key(Value::from("rate")) {
                    reduced_fees.get(i.into()).set("rate".into(), Cryptocom::safe_number(self, reduced_fees.get(i.into()), Value::from("rate"), Value::Undefined));
                };
                i += 1;
            };
            if !parse_fee.is_truthy() && reduced_length.clone() == Value::from(0) {
                fee.set("cost".into(), Cryptocom::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
                if fee.contains_key(Value::from("rate")) {
                    fee.set("rate".into(), Cryptocom::safe_number(self, fee.clone(), Value::from("rate"), Value::Undefined));
                };
                reduced_fees.push(fee.clone());
            };
            if parse_fees.is_truthy() {
                trade.set("fees".into(), reduced_fees.clone());
            };
            if parse_fee.is_truthy() && reduced_length.clone() == Value::from(1) {
                trade.set("fee".into(), reduced_fees.get(Value::from(0)));
            };
            let mut trade_fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
            if trade_fee.clone().is_nonnullish() {
                trade_fee.set("cost".into(), Cryptocom::safe_number(self, trade_fee.clone(), Value::from("cost"), Value::Undefined));
                if trade_fee.contains_key(Value::from("rate")) {
                    trade_fee.set("rate".into(), Cryptocom::safe_number(self, trade_fee.clone(), Value::from("rate"), Value::Undefined));
                };
                trade.set("fee".into(), trade_fee.clone());
            };
        };
        trade.set("amount".into(), self.parse_number(amount.clone(), Value::Undefined));
        trade.set("price".into(), self.parse_number(price.clone(), Value::Undefined));
        trade.set("cost".into(), self.parse_number(cost.clone(), Value::Undefined));
        return trade.clone();
    }

    fn reduce_fees_by_currency(&mut self, mut fees: Value) -> Value {
        //
        // this function takes a list of fee structures having the following format
        //
        //     string = true
        //
        //     [
        //         { 'currency': 'BTC', 'cost': '0.1' },
        //         { 'currency': 'BTC', 'cost': '0.2'  },
        //         { 'currency': 'BTC', 'cost': '0.2', 'rate': '0.00123' },
        //         { 'currency': 'BTC', 'cost': '0.4', 'rate': '0.00123' },
        //         { 'currency': 'BTC', 'cost': '0.5', 'rate': '0.00456' },
        //         { 'currency': 'USDT', 'cost': '12.3456' },
        //     ]
        //
        //     string = false
        //
        //     [
        //         { 'currency': 'BTC', 'cost': 0.1 },
        //         { 'currency': 'BTC', 'cost': 0.2 },
        //         { 'currency': 'BTC', 'cost': 0.2, 'rate': 0.00123 },
        //         { 'currency': 'BTC', 'cost': 0.4, 'rate': 0.00123 },
        //         { 'currency': 'BTC', 'cost': 0.5, 'rate': 0.00456 },
        //         { 'currency': 'USDT', 'cost': 12.3456 },
        //     ]
        //
        // and returns a reduced fee list, where fees are summed per currency and rate (if any)
        //
        //     string = true
        //
        //     [
        //         { 'currency': 'BTC', 'cost': '0.3'  },
        //         { 'currency': 'BTC', 'cost': '0.6', 'rate': '0.00123' },
        //         { 'currency': 'BTC', 'cost': '0.5', 'rate': '0.00456' },
        //         { 'currency': 'USDT', 'cost': '12.3456' },
        //     ]
        //
        //     string  = false
        //
        //     [
        //         { 'currency': 'BTC', 'cost': 0.3  },
        //         { 'currency': 'BTC', 'cost': 0.6, 'rate': 0.00123 },
        //         { 'currency': 'BTC', 'cost': 0.5, 'rate': 0.00456 },
        //         { 'currency': 'USDT', 'cost': 12.3456 },
        //     ]
        //
        let mut reduced: Value = Value::new_object();
        let mut i: usize = 0;
        while i < fees.len() {
            let mut fee: Value = fees.get(i.into());
            let mut fee_currency_code: Value = self.safe_string(fee.clone(), Value::from("currency"), Value::Undefined);
            if fee_currency_code.clone().is_nonnullish() {
                let mut rate: Value = self.safe_string(fee.clone(), Value::from("rate"), Value::Undefined);
                let mut cost: Value = self.safe_value(fee.clone(), Value::from("cost"), Value::Undefined);
                if Precise::string_eq(cost.clone(), Value::from("0")) {
                    // omit zero cost fees
                    continue;
                };
                if !reduced.contains_key(fee_currency_code.clone()) {
                    reduced.set(fee_currency_code.clone(), Value::new_object());
                };
                let mut rate_key: Value = if rate.clone().is_nullish() { Value::from("") } else { rate.clone() };
                if reduced.get(fee_currency_code.clone()).contains_key(rate_key.clone()) {
                    reduced.get(fee_currency_code.clone()).get(rate_key.clone()).set("cost".into(), Precise::string_add(reduced.get(fee_currency_code.clone()).get(rate_key.clone()).get(Value::from("cost")), cost.clone()));
                } else {
                    reduced.get(fee_currency_code.clone()).set(rate_key.clone(), Value::Json(normalize(&Value::Json(json!({
                        "currency": fee_currency_code,
                        "cost": cost
                    }))).unwrap()));
                    if rate.clone().is_nonnullish() {
                        reduced.get(fee_currency_code.clone()).get(rate_key.clone()).set("rate".into(), rate.clone());
                    };
                };
            };
            i += 1;
        };
        let mut result: Value = Value::new_array();
        let mut fee_values: Value = Object::values(reduced.clone());
        let mut i: usize = 0;
        while i < fee_values.len() {
            let mut reduced_fee_values: Value = Object::values(fee_values.get(i.into()));
            result = self.array_concat(result.clone(), reduced_fee_values.clone());
            i += 1;
        };
        return result.clone();
    }

    fn safe_ticker(&self, mut ticker: Value, mut market: Value) -> Value {
        let mut open: Value = self.safe_value(ticker.clone(), Value::from("open"), Value::Undefined);
        let mut close: Value = self.safe_value(ticker.clone(), Value::from("close"), Value::Undefined);
        let mut last: Value = self.safe_value(ticker.clone(), Value::from("last"), Value::Undefined);
        let mut change: Value = self.safe_value(ticker.clone(), Value::from("change"), Value::Undefined);
        let mut percentage: Value = self.safe_value(ticker.clone(), Value::from("percentage"), Value::Undefined);
        let mut average: Value = self.safe_value(ticker.clone(), Value::from("average"), Value::Undefined);
        let mut vwap: Value = self.safe_value(ticker.clone(), Value::from("vwap"), Value::Undefined);
        let mut base_volume: Value = self.safe_value(ticker.clone(), Value::from("baseVolume"), Value::Undefined);
        let mut quote_volume: Value = self.safe_value(ticker.clone(), Value::from("quoteVolume"), Value::Undefined);
        if vwap.clone().is_nullish() {
            vwap = Precise::string_div(quote_volume.clone(), base_volume.clone(), Value::Undefined);
        };
        if last.clone().is_nonnullish() && close.clone().is_nullish() {
            close = last.clone();
        } else if last.clone().is_nullish() && close.clone().is_nonnullish() {
            last = close.clone();
        };
        if last.clone().is_nonnullish() && open.clone().is_nonnullish() {
            if change.clone().is_nullish() {
                change = Precise::string_sub(last.clone(), open.clone());
            };
            if average.clone().is_nullish() {
                average = Precise::string_div(Precise::string_add(last.clone(), open.clone()), Value::from("2"), Value::Undefined);
            };
        };
        if percentage.clone().is_nullish() && change.clone().is_nonnullish() && open.clone().is_nonnullish() && Precise::string_gt(open.clone(), Value::from("0")) {
            percentage = Precise::string_mul(Precise::string_div(change.clone(), open.clone(), Value::Undefined), Value::from("100"));
        };
        if change.clone().is_nullish() && percentage.clone().is_nonnullish() && open.clone().is_nonnullish() {
            change = Precise::string_div(Precise::string_mul(percentage.clone(), open.clone()), Value::from("100"), Value::Undefined);
        };
        if open.clone().is_nullish() && last.clone().is_nonnullish() && change.clone().is_nonnullish() {
            open = Precise::string_sub(last.clone(), change.clone());
        };
        // timestamp and symbol operations don't belong in safeTicker
        // they should be done in the derived classes
        return extend_2(ticker.clone(), Value::Json(normalize(&Value::Json(json!({
            "bid": Cryptocom::safe_number(self, ticker.clone(), Value::from("bid"), Value::Undefined),
            "bidVolume": Cryptocom::safe_number(self, ticker.clone(), Value::from("bidVolume"), Value::Undefined),
            "ask": Cryptocom::safe_number(self, ticker.clone(), Value::from("ask"), Value::Undefined),
            "askVolume": Cryptocom::safe_number(self, ticker.clone(), Value::from("askVolume"), Value::Undefined),
            "high": Cryptocom::safe_number(self, ticker.clone(), Value::from("high"), Value::Undefined),
            "low": Cryptocom::safe_number(self, ticker.clone(), Value::from("low"), Value::Undefined),
            "open": self.parse_number(open.clone(), Value::Undefined),
            "close": self.parse_number(close.clone(), Value::Undefined),
            "last": self.parse_number(last.clone(), Value::Undefined),
            "change": self.parse_number(change.clone(), Value::Undefined),
            "percentage": self.parse_number(percentage.clone(), Value::Undefined),
            "average": self.parse_number(average.clone(), Value::Undefined),
            "vwap": self.parse_number(vwap.clone(), Value::Undefined),
            "baseVolume": self.parse_number(base_volume.clone(), Value::Undefined),
            "quoteVolume": self.parse_number(quote_volume.clone(), Value::Undefined),
            "previousClose": Cryptocom::safe_number(self, ticker.clone(), Value::from("previousClose"), Value::Undefined)
        }))).unwrap()));
    }

    fn convert_trading_view_to_ohlcv(&self, mut ohlcvs: Value, mut timestamp: Value, mut open: Value, mut high: Value, mut low: Value, mut close: Value, mut volume: Value, mut ms: Value) -> Value {
        timestamp = timestamp.or_default(Value::from("t"));
        open = open.or_default(Value::from("o"));
        high = high.or_default(Value::from("h"));
        low = low.or_default(Value::from("l"));
        close = close.or_default(Value::from("c"));
        volume = volume.or_default(Value::from("v"));
        ms = ms.or_default(false.into());
        let mut result: Value = Value::new_array();
        let mut timestamps: Value = self.safe_value(ohlcvs.clone(), timestamp.clone(), Value::new_array());
        let mut opens: Value = self.safe_value(ohlcvs.clone(), open.clone(), Value::new_array());
        let mut highs: Value = self.safe_value(ohlcvs.clone(), high.clone(), Value::new_array());
        let mut lows: Value = self.safe_value(ohlcvs.clone(), low.clone(), Value::new_array());
        let mut closes: Value = self.safe_value(ohlcvs.clone(), close.clone(), Value::new_array());
        let mut volumes: Value = self.safe_value(ohlcvs.clone(), volume.clone(), Value::new_array());
        let mut i: usize = 0;
        while i < timestamps.len() {
            result.push(Value::Json(serde_json::Value::Array(vec![if ms.is_truthy() { self.safe_integer(timestamps.clone(), Value::from(i), Value::Undefined) } else { self.safe_timestamp(timestamps.clone(), Value::from(i), Value::Undefined) }.into(), self.safe_value(opens.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(highs.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(lows.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(closes.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(volumes.clone(), Value::from(i), Value::Undefined).into()])));
            i += 1;
        };
        return result.clone();
    }

    fn convert_ohlcv_to_trading_view(&self, mut ohlcvs: Value, mut timestamp: Value, mut open: Value, mut high: Value, mut low: Value, mut close: Value, mut volume: Value, mut ms: Value) -> Value {
        timestamp = timestamp.or_default(Value::from("t"));
        open = open.or_default(Value::from("o"));
        high = high.or_default(Value::from("h"));
        low = low.or_default(Value::from("l"));
        close = close.or_default(Value::from("c"));
        volume = volume.or_default(Value::from("v"));
        ms = ms.or_default(false.into());
        let mut result: Value = Value::new_object();
        result.set(timestamp.clone(), Value::new_array());
        result.set(open.clone(), Value::new_array());
        result.set(high.clone(), Value::new_array());
        result.set(low.clone(), Value::new_array());
        result.set(close.clone(), Value::new_array());
        result.set(volume.clone(), Value::new_array());
        let mut i: usize = 0;
        while i < ohlcvs.len() {
            let mut ts: Value = if ms.is_truthy() { ohlcvs.get(i.into()).get(Value::from(0)) } else { parse_int(ohlcvs.get(i.into()).get(Value::from(0)) / Value::from(1000)) };
            result.get(timestamp.clone()).push(ts.clone());
            result.get(open.clone()).push(ohlcvs.get(i.into()).get(Value::from(1)));
            result.get(high.clone()).push(ohlcvs.get(i.into()).get(Value::from(2)));
            result.get(low.clone()).push(ohlcvs.get(i.into()).get(Value::from(3)));
            result.get(close.clone()).push(ohlcvs.get(i.into()).get(Value::from(4)));
            result.get(volume.clone()).push(ohlcvs.get(i.into()).get(Value::from(5)));
            i += 1;
        };
        return result.clone();
    }

    fn market_ids(&mut self, mut symbols: Value) -> Value {
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < symbols.len() {
            result.push(Cryptocom::market_id(self, symbols.get(i.into())));
            i += 1;
        };
        return result.clone();
    }

    fn market_symbols(&self, mut symbols: Value) -> Value {
        if symbols.clone().is_nullish() {
            return symbols.clone();
        };
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < symbols.len() {
            result.push(Cryptocom::symbol(self, symbols.get(i.into())));
            i += 1;
        };
        return result.clone();
    }

    fn parse_bids_asks(&self, mut bidasks: Value, mut price_key: Value, mut amount_key: Value) -> Value {
        price_key = price_key.or_default(Value::from(0));
        amount_key = amount_key.or_default(Value::from(1));
        bidasks = self.to_array(bidasks.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < bidasks.len() {
            result.push(Cryptocom::parse_bid_ask(self, bidasks.get(i.into()), price_key.clone(), amount_key.clone()));
            i += 1;
        };
        return result.clone();
    }

    async fn fetch_l2_order_book(&mut self, mut symbol: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut orderbook: Value = Cryptocom::fetch_order_book(self, symbol.clone(), limit.clone(), params.clone()).await;
        return extend_2(orderbook.clone(), Value::Json(normalize(&Value::Json(json!({
            "asks": self.sort_by(self.aggregate(orderbook.get(Value::from("asks"))), Value::from(0), Value::Undefined, Value::Undefined),
            "bids": self.sort_by(self.aggregate(orderbook.get(Value::from("bids"))), Value::from(0), true.into(), Value::Undefined)
        }))).unwrap()));
    }

    fn filter_by_symbol(&self, mut objects: Value, mut symbol: Value) -> Value {
        if symbol.clone().is_nullish() {
            return objects.clone();
        };
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < objects.len() {
            let mut object_symbol: Value = self.safe_string(objects.get(i.into()), Value::from("symbol"), Value::Undefined);
            if object_symbol.clone() == symbol.clone() {
                result.push(objects.get(i.into()));
            };
            i += 1;
        };
        return result.clone();
    }

    fn get_network(&mut self, mut network: Value, mut code: Value) -> Value {
        network = network.to_upper_case();
        let mut aliases: Value = Value::Json(normalize(&Value::Json(json!({
            "ETHEREUM": "ETH",
            "ETHER": "ETH",
            "ERC20": "ETH",
            "ETH": "ETH",
            "TRC20": "TRX",
            "TRON": "TRX",
            "TRX": "TRX",
            "BEP20": "BSC",
            "BSC": "BSC",
            "HRC20": "HT",
            "HECO": "HT",
            "SPL": "SOL",
            "SOL": "SOL",
            "TERRA": "LUNA",
            "LUNA": "LUNA",
            "POLYGON": "MATIC",
            "MATIC": "MATIC",
            "EOS": "EOS",
            "WAVES": "WAVES",
            "AVALANCHE": "AVAX",
            "AVAX": "AVAX",
            "QTUM": "QTUM",
            "CHZ": "CHZ",
            "NEO": "NEO",
            "ONT": "ONT",
            "RON": "RON"
        }))).unwrap());
        if network.clone() == code.clone() {
            return network.clone();
        } else if aliases.contains_key(network.clone()) {
            return aliases.get(network.clone());
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" network ") + network.clone() + Value::from(" is not yet supported"))"###);
        };
        Value::Undefined
    }

    fn safe_number_2(&self, mut dictionary: Value, mut key1: Value, mut key2: Value, mut d: Value) -> Value {
        let mut value: Value = self.safe_string_2(dictionary.clone(), key1.clone(), key2.clone(), Value::Undefined);
        return self.parse_number(value.clone(), d.clone());
    }

    fn parse_order_book(&self, mut orderbook: Value, mut symbol: Value, mut timestamp: Value, mut bids_key: Value, mut asks_key: Value, mut price_key: Value, mut amount_key: Value) -> Value {
        bids_key = bids_key.or_default(Value::from("bids"));
        asks_key = asks_key.or_default(Value::from("asks"));
        price_key = price_key.or_default(Value::from(0));
        amount_key = amount_key.or_default(Value::from(1));
        let mut bids: Value = Cryptocom::parse_bids_asks(self, self.safe_value(orderbook.clone(), bids_key.clone(), Value::new_array()), price_key.clone(), amount_key.clone());
        let mut asks: Value = Cryptocom::parse_bids_asks(self, self.safe_value(orderbook.clone(), asks_key.clone(), Value::new_array()), price_key.clone(), amount_key.clone());
        return Value::Json(normalize(&Value::Json(json!({
            "symbol": symbol,
            "bids": self.sort_by(bids.clone(), Value::from(0), true.into(), Value::Undefined),
            "asks": self.sort_by(asks.clone(), Value::from(0), Value::Undefined, Value::Undefined),
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "nonce": Value::Undefined
        }))).unwrap());
    }

    fn parse_ohlcvs(&self, mut ohlcvs: Value, mut market: Value, mut timeframe: Value, mut since: Value, mut limit: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        let mut results: Value = Value::new_array();
        let mut i: usize = 0;
        while i < ohlcvs.len() {
            results.push(Cryptocom::parse_ohlcv(self, ohlcvs.get(i.into()), market.clone()));
            i += 1;
        };
        let mut sorted: Value = self.sort_by(results.clone(), Value::from(0), Value::Undefined, Value::Undefined);
        let mut tail: Value = (since.clone().is_nullish()).into();
        return self.filter_by_since_limit(sorted.clone(), since.clone(), limit.clone(), Value::from(0), tail.clone());
    }

    fn parse_leverage_tiers(&self, mut response: Value, mut symbols: Value, mut market_id_key: Value) -> Value {
        // marketIdKey should only be undefined when response is a dictionary
        symbols = Cryptocom::market_symbols(self, symbols.clone());
        let mut tiers: Value = Value::new_object();
        let mut i: usize = 0;
        while i < response.len() {
            let mut item: Value = response.get(i.into());
            let mut id: Value = self.safe_string(item.clone(), market_id_key.clone(), Value::Undefined);
            let mut market: Value = Cryptocom::safe_market(self, id.clone(), Value::Undefined, Value::Undefined);
            let mut symbol: Value = market.get(Value::from("symbol"));
            let mut contract: Value = self.safe_value(market.clone(), Value::from("contract"), false.into());
            if contract.is_truthy() && symbols.clone().is_nullish() || self.in_array(symbol.clone(), symbols.clone()).is_truthy() {
                tiers.set(symbol.clone(), self.parse_market_leverage_tiers(item.clone(), market.clone()));
            };
            i += 1;
        };
        return tiers.clone();
    }

    async fn load_trading_limits(&mut self, mut symbols: Value, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchTradingLimits")).is_truthy() {
            if reload.is_truthy() || !self.get("options".into()).contains_key(Value::from("limitsLoaded")) {
                let mut response: Value = self.fetch_trading_limits(symbols.clone(), Value::Undefined).await;
                let mut i: usize = 0;
                while i < symbols.len() {
                    let mut symbol: Value = symbols.get(i.into());
                    self.get("markets".into()).set(symbol.clone(), self.deep_extend_2(self.get("markets".into()).get(symbol.clone()), response.get(symbol.clone())));
                    i += 1;
                };
                self.get("options".into()).set("limitsLoaded".into(), self.milliseconds());
            };
        };
        return self.get("markets".into());
    }

    fn parse_positions(&self, mut positions: Value, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        symbols = Cryptocom::market_symbols(self, symbols.clone());
        positions = self.to_array(positions.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < positions.len() {
            let mut position: Value = extend_2(self.parse_position(positions.get(i.into()), Value::Undefined), params.clone());
            result.push(position.clone());
            i += 1;
        };
        return Cryptocom::filter_by_array(self, result.clone(), Value::from("symbol"), symbols.clone(), false.into());
    }

    fn parse_accounts(&self, mut accounts: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        accounts = self.to_array(accounts.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < accounts.len() {
            let mut account: Value = extend_2(Cryptocom::parse_account(self, accounts.get(i.into())), params.clone());
            result.push(account.clone());
            i += 1;
        };
        return result.clone();
    }

    fn parse_trades(&mut self, mut trades: Value, mut market: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        trades = self.to_array(trades.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < trades.len() {
            let mut trade: Value = extend_2(Cryptocom::parse_trade(self, trades.get(i.into()), market.clone()), params.clone());
            result.push(trade.clone());
            i += 1;
        };
        result = self.sort_by_2(result.clone(), Value::from("timestamp"), Value::from("id"), Value::Undefined, Value::Undefined);
        let mut symbol: Value = if market.clone().is_nonnullish() { market.get(Value::from("symbol")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Cryptocom::filter_by_symbol_since_limit(self, result.clone(), symbol.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn parse_transactions(&self, mut transactions: Value, mut currency: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        transactions = self.to_array(transactions.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < transactions.len() {
            let mut transaction: Value = extend_2(Cryptocom::parse_transaction(self, transactions.get(i.into()), currency.clone()), params.clone());
            result.push(transaction.clone());
            i += 1;
        };
        result = self.sort_by(result.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut code: Value = if currency.clone().is_nonnullish() { currency.get(Value::from("code")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Cryptocom::filter_by_currency_since_limit(self, result.clone(), code.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn parse_transfers(&self, mut transfers: Value, mut currency: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        transfers = self.to_array(transfers.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < transfers.len() {
            let mut transfer: Value = extend_2(Cryptocom::parse_transfer(self, transfers.get(i.into()), currency.clone()), params.clone());
            result.push(transfer.clone());
            i += 1;
        };
        result = self.sort_by(result.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut code: Value = if currency.clone().is_nonnullish() { currency.get(Value::from("code")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Cryptocom::filter_by_currency_since_limit(self, result.clone(), code.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn parse_ledger(&self, mut data: Value, mut currency: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut result: Value = Value::new_array();
        let mut array_data: Value = self.to_array(data.clone());
        let mut i: usize = 0;
        while i < array_data.len() {
            let mut item_or_items: Value = self.parse_ledger_entry(array_data.get(i.into()), currency.clone());
            if Array::is_array(item_or_items.clone()).is_truthy() {
                let mut j: usize = 0;
                while j < item_or_items.len() {
                    result.push(extend_2(item_or_items.get(j.into()), params.clone()));
                    j += 1;
                };
            } else {
                result.push(extend_2(item_or_items.clone(), params.clone()));
            };
            i += 1;
        };
        result = self.sort_by(result.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut code: Value = if currency.clone().is_nonnullish() { currency.get(Value::from("code")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Cryptocom::filter_by_currency_since_limit(self, result.clone(), code.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn set_headers(&mut self, mut headers: Value) -> Value {
        return headers.clone();
    }

    fn market_id(&mut self, mut symbol: Value) -> Value {
        let mut market: Value = Cryptocom::market(self, symbol.clone());
        if market.clone().is_nonnullish() {
            return market.get(Value::from("id"));
        };
        return symbol.clone();
    }

    fn symbol(&self, mut symbol: Value) -> Value {
        let mut market: Value = Cryptocom::market(self, symbol.clone());
        return self.safe_string(market.clone(), Value::from("symbol"), symbol.clone());
    }

    fn resolve_path(&mut self, mut path: Value, mut params: Value) -> Value {
        return Value::Json(serde_json::Value::Array(vec![self.implode_params(path.clone(), params.clone()).into(), self.omit(params.clone(), self.extract_params(path.clone())).into()]));
    }

    fn filter_by_array(&self, mut objects: Value, mut key: Value, mut values: Value, mut indexed: Value) -> Value {
        indexed = indexed.or_default(true.into());
        objects = self.to_array(objects.clone());
        // return all of them if no values were passed
        if values.clone().is_nullish() || !values.is_truthy() {
            return if indexed.is_truthy() { self.index_by(objects.clone(), key.clone(), Value::Undefined) } else { objects.clone() };
        };
        let mut results: Value = Value::new_array();
        let mut i: usize = 0;
        while i < objects.len() {
            if self.in_array(objects.get(i.into()).get(key.clone()), values.clone()).is_truthy() {
                results.push(objects.get(i.into()));
            };
            i += 1;
        };
        return if indexed.is_truthy() { self.index_by(results.clone(), key.clone(), Value::Undefined) } else { results.clone() };
    }

    async fn fetch2(&mut self, mut path: Value, mut api: Value, mut method: Value, mut params: Value, mut headers: Value, mut body: Value, mut config: Value, mut context: Value) -> Value {
        api = api.or_default(Value::from("public"));
        method = method.or_default(Value::from("GET"));
        params = params.or_default(Value::new_object());
        config = config.or_default(Value::new_object());
        context = context.or_default(Value::new_object());
        if self.get("enable_rate_limit".into()).is_truthy() {
            let mut cost: Value = Cryptocom::calculate_rate_limiter_cost(self, api.clone(), method.clone(), path.clone(), params.clone(), config.clone(), context.clone());
            self.throttle(cost.clone()).await;
        };
        self.set("last_rest_request_timestamp".into(), self.milliseconds());
        let mut request: Value = Cryptocom::sign(self, path.clone(), api.clone(), method.clone(), params.clone(), headers.clone(), body.clone());
        return self.fetch(request.get(Value::from("url")), request.get(Value::from("method")), request.get(Value::from("headers")), request.get(Value::from("body"))).await;
    }

    async fn request(&mut self, mut path: Value, mut api: Value, mut method: Value, mut params: Value, mut headers: Value, mut body: Value, mut config: Value, mut context: Value) -> Value {
        api = api.or_default(Value::from("public"));
        method = method.or_default(Value::from("GET"));
        params = params.or_default(Value::new_object());
        config = config.or_default(Value::new_object());
        context = context.or_default(Value::new_object());
        return Cryptocom::fetch2(self, path.clone(), api.clone(), method.clone(), params.clone(), headers.clone(), body.clone(), config.clone(), context.clone()).await;
    }

    async fn load_accounts(&mut self, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        if reload.is_truthy() {
            self.set("accounts".into(), self.fetch_accounts(params.clone()).await);
        } else {
            if self.get("accounts".into()).is_truthy() {
                return self.get("accounts".into());
            } else {
                self.set("accounts".into(), self.fetch_accounts(params.clone()).await);
            };
        };
        self.set("accounts_by_id".into(), self.index_by(self.get("accounts".into()), Value::from("id"), Value::Undefined));
        return self.get("accounts".into());
    }

    async fn fetch_ohlcvc(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("fetchTrades")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchOHLCV() is not supported yet"))"###);
        };
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut trades: Value = Cryptocom::fetch_trades(self, symbol.clone(), since.clone(), limit.clone(), params.clone()).await;
        return self.build_ohlcvc(trades.clone(), timeframe.clone(), since.clone(), limit.clone());
    }

    fn parse_trading_view_ohlcv(&self, mut ohlcvs: Value, mut market: Value, mut timeframe: Value, mut since: Value, mut limit: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        let mut result: Value = Cryptocom::convert_trading_view_to_ohlcv(self, ohlcvs.clone(), Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined);
        return Cryptocom::parse_ohlcvs(self, result.clone(), market.clone(), timeframe.clone(), since.clone(), limit.clone());
    }

    async fn edit_limit_buy_order(&mut self, mut id: Value, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Cryptocom::edit_limit_order(self, id.clone(), symbol.clone(), Value::from("buy"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn edit_limit_sell_order(&mut self, mut id: Value, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Cryptocom::edit_limit_order(self, id.clone(), symbol.clone(), Value::from("sell"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn edit_limit_order(&mut self, mut id: Value, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Cryptocom::edit_order(self, id.clone(), symbol.clone(), Value::from("limit"), side.clone(), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn edit_order(&mut self, mut id: Value, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::cancel_order(self, id.clone(), symbol.clone(), Value::Undefined).await;
        return Cryptocom::create_order(self, symbol.clone(), r#type.clone(), side.clone(), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn fetch_permissions(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchPermissions() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_bids_asks(&mut self, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchBidsAsks() is not supported yet"))"###);
        Value::Undefined
    }

    fn parse_bid_ask(&self, mut bidask: Value, mut price_key: Value, mut amount_key: Value) -> Value {
        price_key = price_key.or_default(Value::from(0));
        amount_key = amount_key.or_default(Value::from(1));
        let mut price: Value = Cryptocom::safe_number(self, bidask.clone(), price_key.clone(), Value::Undefined);
        let mut amount: Value = Cryptocom::safe_number(self, bidask.clone(), amount_key.clone(), Value::Undefined);
        return Value::Json(serde_json::Value::Array(vec![price.clone().into(), amount.clone().into()]));
    }

    fn safe_currency(&self, mut currency_id: Value, mut currency: Value) -> Value {
        if currency_id.clone().is_nullish() && currency.clone().is_nonnullish() {
            return currency.clone();
        };
        if self.get("currencies_by_id".into()).is_nonnullish() && self.get("currencies_by_id".into()).contains_key(currency_id.clone()) {
            return self.get("currencies_by_id".into()).get(currency_id.clone());
        };
        let mut code: Value = currency_id.clone();
        if currency_id.clone().is_nonnullish() {
            code = Cryptocom::common_currency_code(self, currency_id.to_upper_case());
        };
        return Value::Json(normalize(&Value::Json(json!({
            "id": currency_id,
            "code": code
        }))).unwrap());
    }

    fn safe_market(&self, mut market_id: Value, mut market: Value, mut delimiter: Value) -> Value {
        let mut result: Value = Value::Json(normalize(&Value::Json(json!({
            "id": market_id,
            "symbol": market_id,
            "base": Value::Undefined,
            "quote": Value::Undefined,
            "baseId": Value::Undefined,
            "quoteId": Value::Undefined,
            "active": Value::Undefined,
            "type": Value::Undefined,
            "linear": Value::Undefined,
            "inverse": Value::Undefined,
            "spot": false,
            "swap": false,
            "future": false,
            "option": false,
            "margin": false,
            "contract": false,
            "contractSize": Value::Undefined,
            "expiry": Value::Undefined,
            "expiryDatetime": Value::Undefined,
            "optionType": Value::Undefined,
            "strike": Value::Undefined,
            "settle": Value::Undefined,
            "settleId": Value::Undefined,
            "precision": Value::Json(normalize(&Value::Json(json!({
                "amount": Value::Undefined,
                "price": Value::Undefined
            }))).unwrap()),
            "limits": Value::Json(normalize(&Value::Json(json!({
                "amount": Value::Json(normalize(&Value::Json(json!({
                    "min": Value::Undefined,
                    "max": Value::Undefined
                }))).unwrap()),
                "price": Value::Json(normalize(&Value::Json(json!({
                    "min": Value::Undefined,
                    "max": Value::Undefined
                }))).unwrap()),
                "cost": Value::Json(normalize(&Value::Json(json!({
                    "min": Value::Undefined,
                    "max": Value::Undefined
                }))).unwrap())
            }))).unwrap()),
            "info": Value::Undefined
        }))).unwrap());
        if market_id.clone().is_nonnullish() {
            if self.get("markets_by_id".into()).is_nonnullish() && self.get("markets_by_id".into()).contains_key(market_id.clone()) {
                market = self.get("markets_by_id".into()).get(market_id.clone());
            } else if delimiter.clone().is_nonnullish() {
                let mut parts: Value = market_id.split(delimiter.clone());
                let mut parts_length: Value = parts.len().into();
                if parts_length.clone() == Value::from(2) {
                    result.set("baseId".into(), self.safe_string(parts.clone(), Value::from(0), Value::Undefined));
                    result.set("quoteId".into(), self.safe_string(parts.clone(), Value::from(1), Value::Undefined));
                    result.set("base".into(), Cryptocom::safe_currency_code(self, result.get(Value::from("baseId")), Value::Undefined));
                    result.set("quote".into(), Cryptocom::safe_currency_code(self, result.get(Value::from("quoteId")), Value::Undefined));
                    result.set("symbol".into(), result.get(Value::from("base")) + Value::from("/") + result.get(Value::from("quote")));
                    return result.clone();
                } else {
                    return result.clone();
                };
            };
        };
        if market.clone().is_nonnullish() {
            return market.clone();
        };
        return result.clone();
    }

    fn check_required_credentials(&mut self, mut error: Value) -> Value {
        error = error.or_default(true.into());
        let mut keys: Value = Object::keys(self.get("required_credentials".into()));
        let mut i: usize = 0;
        while i < keys.len() {
            let mut key: Value = keys.get(i.into());
            if self.get("required_credentials".into()).get(key.clone()).is_truthy() && !self.get(key.clone()).is_truthy() {
                if error.is_truthy() {
                    panic!(r###"AuthenticationError::new(self.get("id".into()) + Value::from(r#" requires ""#) + key.clone() + Value::from(r#"" credential"#))"###);
                } else {
                    return error.clone();
                };
            };
            i += 1;
        };
        return true.into();
    }

    fn oath(&mut self) -> Value {
        if self.get("twofa".into()).is_nonnullish() {
            return self.totp(self.get("twofa".into()));
        } else {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" exchange.twofa has not been set for 2FA Two-Factor Authentication"))"###);
        };
        Value::Undefined
    }

    async fn fetch_partial_balance(&mut self, mut part: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut balance: Value = Cryptocom::fetch_balance(self, params.clone()).await;
        return balance.get(part.clone());
    }

    async fn fetch_free_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Cryptocom::fetch_partial_balance(self, Value::from("free"), params.clone()).await;
    }

    async fn fetch_used_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Cryptocom::fetch_partial_balance(self, Value::from("used"), params.clone()).await;
    }

    async fn fetch_total_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Cryptocom::fetch_partial_balance(self, Value::from("total"), params.clone()).await;
    }

    async fn fetch_status(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchTime")).is_truthy() {
            let mut time: Value = self.fetch_time(params.clone()).await;
            self.set("status".into(), extend_2(self.get("status".into()), Value::Json(normalize(&Value::Json(json!({
                "updated": time
            }))).unwrap())));
        };
        return self.get("status".into());
    }

    async fn fetch_funding_fee(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut warn_on_fetch_funding_fee: Value = self.safe_value(self.get("options".into()), Value::from("warnOnFetchFundingFee"), true.into());
        if warn_on_fetch_funding_fee.is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(r#" fetchFundingFee() method is deprecated, it will be removed in July 2022, please, use fetchTransactionFee() or set exchange.options["warnOnFetchFundingFee"] = false to suppress this warning"#))"###);
        };
        return Cryptocom::fetch_transaction_fee(self, code.clone(), params.clone()).await;
    }

    async fn fetch_funding_fees(&mut self, mut codes: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut warn_on_fetch_funding_fees: Value = self.safe_value(self.get("options".into()), Value::from("warnOnFetchFundingFees"), true.into());
        if warn_on_fetch_funding_fees.is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(r#" fetchFundingFees() method is deprecated, it will be removed in July 2022. Please, use fetchTransactionFees() or set exchange.options["warnOnFetchFundingFees"] = false to suppress this warning"#))"###);
        };
        return Cryptocom::fetch_transaction_fees(self, codes.clone(), params.clone()).await;
    }

    async fn fetch_transaction_fee(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("fetchTransactionFees")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTransactionFee() is not supported yet"))"###);
        };
        return Cryptocom::fetch_transaction_fees(self, Value::Json(serde_json::Value::Array(vec![code.clone().into()])), params.clone()).await;
    }

    async fn fetch_transaction_fees(&mut self, mut codes: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTransactionFees() is not supported yet"))"###);
        Value::Undefined
    }

    fn get_supported_mapping(&self, mut key: Value, mut mapping: Value) -> Value {
        mapping = mapping.or_default(Value::new_object());
        if mapping.contains_key(key.clone()) {
            return mapping.get(key.clone());
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" ") + key.clone() + Value::from(" does not have a value in mapping"))"###);
        };
        Value::Undefined
    }

    async fn fetch_borrow_rate(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
        if !self.get("has".into()).get(Value::from("fetchBorrowRates")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchBorrowRate() is not supported yet"))"###);
        };
        let mut borrow_rates: Value = Cryptocom::fetch_borrow_rates(self, params.clone()).await;
        let mut rate: Value = self.safe_value(borrow_rates.clone(), code.clone(), Value::Undefined);
        if rate.clone().is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" fetchBorrowRate() could not find the borrow rate for currency code ") + code.clone())"###);
        };
        return rate.clone();
    }

    fn handle_market_type_and_params(&mut self, mut method_name: Value, mut market: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut default_type: Value = self.safe_string_2(self.get("options".into()), Value::from("defaultType"), Value::from("type"), Value::from("spot"));
        let mut method_options: Value = self.safe_value(self.get("options".into()), method_name.clone(), Value::Undefined);
        let mut method_type: Value = default_type.clone();
        if method_options.clone().is_nonnullish() {
            if method_options.typeof_() == Value::from("string") {
                method_type = method_options.clone();
            } else {
                method_type = self.safe_string_2(method_options.clone(), Value::from("defaultType"), Value::from("type"), method_type.clone());
            };
        };
        let mut market_type: Value = if market.clone().is_nullish() { method_type.clone() } else { market.get(Value::from("type")) };
        let mut r#type: Value = self.safe_string_2(params.clone(), Value::from("defaultType"), Value::from("type"), market_type.clone());
        params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("defaultType").into(), Value::from("type").into()])));
        return Value::Json(serde_json::Value::Array(vec![r#type.clone().into(), params.clone().into()]));
    }

    fn handle_sub_type_and_params(&mut self, mut method_name: Value, mut market: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut sub_type: Value = Value::Undefined;
        // if set in params, it takes precedence
        let mut sub_type_in_params: Value = self.safe_string_2(params.clone(), Value::from("subType"), Value::from("subType"), Value::Undefined);
        // avoid omitting if it's not present
        if sub_type_in_params.clone().is_nonnullish() {
            sub_type = sub_type_in_params.clone();
            params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("defaultSubType").into(), Value::from("subType").into()])));
        } else {
            // at first, check from market object
            if market.clone().is_nonnullish() {
                if market.get(Value::from("linear")).is_truthy() {
                    sub_type = Value::from("linear");
                } else if market.get(Value::from("inverse")).is_truthy() {
                    sub_type = Value::from("inverse");
                };
            };
            // if it was not defined in market object
            if sub_type.clone().is_nullish() {
                let mut exchange_wide_value: Value = self.safe_string_2(self.get("options".into()), Value::from("defaultSubType"), Value::from("subType"), Value::from("linear"));
                let mut method_options: Value = self.safe_value(self.get("options".into()), method_name.clone(), Value::new_object());
                sub_type = self.safe_string_2(method_options.clone(), Value::from("defaultSubType"), Value::from("subType"), exchange_wide_value.clone());
            };
        };
        return Value::Json(serde_json::Value::Array(vec![sub_type.clone().into(), params.clone().into()]));
    }

    fn throw_exactly_matched_exception(&mut self, mut exact: Value, mut string: Value, mut message: Value) -> () {
        if exact.contains_key(string.clone()) {
            panic!(r###"exact.get(string.clone())::new(message)"###);
        };
    }

    fn throw_broadly_matched_exception(&mut self, mut broad: Value, mut string: Value, mut message: Value) -> () {
        let mut broad_key: Value = Cryptocom::find_broadly_matched_key(self, broad.clone(), string.clone());
        if broad_key.clone().is_nonnullish() {
            panic!(r###"broad.get(broad_key.clone())::new(message)"###);
        };
    }

    fn find_broadly_matched_key(&mut self, mut broad: Value, mut string: Value) -> Value {
        // a helper for matching error strings exactly vs broadly
        let mut keys: Value = Object::keys(broad.clone());
        let mut i: usize = 0;
        while i < keys.len() {
            let mut key: Value = keys.get(i.into());
            if string.index_of(key.clone()) >= Value::from(0) {
                return key.clone();
            };
            i += 1;
        };
        return Value::Undefined;
    }

    fn calculate_rate_limiter_cost(&mut self, mut api: Value, mut method: Value, mut path: Value, mut params: Value, mut config: Value, mut context: Value) -> Value {
        config = config.or_default(Value::new_object());
        context = context.or_default(Value::new_object());
        return self.safe_value(config.clone(), Value::from("cost"), Value::from(1));
    }

    async fn fetch_order_status(&mut self, mut id: Value, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut order: Value = Cryptocom::fetch_order(self, id.clone(), symbol.clone(), params.clone()).await;
        return order.get(Value::from("status"));
    }

    async fn fetch_unified_order(&mut self, mut order: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Cryptocom::fetch_order(self, self.safe_value(order.clone(), Value::from("id"), Value::Undefined), self.safe_value(order.clone(), Value::from("symbol"), Value::Undefined), params.clone()).await;
    }

    async fn cancel_unified_order(&mut self, mut order: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Cryptocom::cancel_order(self, self.safe_value(order.clone(), Value::from("id"), Value::Undefined), self.safe_value(order.clone(), Value::from("symbol"), Value::Undefined), params.clone()).await;
    }

    async fn fetch_closed_orders(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchClosedOrders() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_transactions(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTransactions() is not supported yet"))"###);
        Value::Undefined
    }

    fn account(&self) -> Value {
        return Value::Json(normalize(&Value::Json(json!({
            "free": Value::Undefined,
            "used": Value::Undefined,
            "total": Value::Undefined
        }))).unwrap());
    }

    fn common_currency_code(&self, mut currency: Value) -> Value {
        if !self.get("substitute_common_currency_codes".into()).is_truthy() {
            return currency.clone();
        };
        return self.safe_string(self.get("common_currencies".into()), currency.clone(), currency.clone());
    }

    fn currency(&self, mut code: Value) -> Value {
        if self.get("currencies".into()).is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" currencies not loaded"))"###);
        };
        if code.typeof_() == Value::from("string") {
            if self.get("currencies".into()).contains_key(code.clone()) {
                return self.get("currencies".into()).get(code.clone());
            } else if self.get("currencies_by_id".into()).contains_key(code.clone()) {
                return self.get("currencies_by_id".into()).get(code.clone());
            };
        };
        panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" does not have currency code ") + code.clone())"###);
        Value::Undefined
    }

    fn market(&self, mut symbol: Value) -> Value {
        if self.get("markets".into()).is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" markets not loaded"))"###);
        };
        if self.get("markets_by_id".into()).is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" markets not loaded"))"###);
        };
        if symbol.typeof_() == Value::from("string") {
            if self.get("markets".into()).contains_key(symbol.clone()) {
                return self.get("markets".into()).get(symbol.clone());
            } else if self.get("markets_by_id".into()).contains_key(symbol.clone()) {
                return self.get("markets_by_id".into()).get(symbol.clone());
            };
        };
        panic!(r###"BadSymbol::new(self.get("id".into()) + Value::from(" does not have market symbol ") + symbol.clone())"###);
        Value::Undefined
    }

    fn handle_withdraw_tag_and_params(&mut self, mut tag: Value, mut params: Value) -> Value {
        if tag.typeof_() == Value::from("object") {
            params = extend_2(tag.clone(), params.clone());
            tag = Value::Undefined;
        };
        if tag.clone().is_nullish() {
            tag = self.safe_string(params.clone(), Value::from("tag"), Value::Undefined);
            if tag.clone().is_nonnullish() {
                params = self.omit(params.clone(), Value::from("tag"));
            };
        };
        return Value::Json(serde_json::Value::Array(vec![tag.clone().into(), params.clone().into()]));
    }

    async fn create_limit_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Cryptocom::create_order(self, symbol.clone(), Value::from("limit"), side.clone(), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_market_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Cryptocom::create_order(self, symbol.clone(), Value::from("market"), side.clone(), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_limit_buy_order(&mut self, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Cryptocom::create_order(self, symbol.clone(), Value::from("limit"), Value::from("buy"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_limit_sell_order(&mut self, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Cryptocom::create_order(self, symbol.clone(), Value::from("limit"), Value::from("sell"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_market_buy_order(&mut self, mut symbol: Value, mut amount: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Cryptocom::create_order(self, symbol.clone(), Value::from("market"), Value::from("buy"), amount.clone(), Value::Undefined, params.clone()).await;
    }

    async fn create_market_sell_order(&mut self, mut symbol: Value, mut amount: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Cryptocom::create_order(self, symbol.clone(), Value::from("market"), Value::from("sell"), amount.clone(), Value::Undefined, params.clone()).await;
    }

    fn cost_to_precision(&mut self, mut symbol: Value, mut cost: Value) -> Value {
        let mut market: Value = Cryptocom::market(self, symbol.clone());
        return self.decimal_to_precision(cost.clone(), TRUNCATE.into(), market.get(Value::from("precision")).get(Value::from("price")), self.get("precision_mode".into()), self.get("padding_mode".into()));
    }

    fn price_to_precision(&mut self, mut symbol: Value, mut price: Value) -> Value {
        let mut market: Value = Cryptocom::market(self, symbol.clone());
        return self.decimal_to_precision(price.clone(), ROUND.into(), market.get(Value::from("precision")).get(Value::from("price")), self.get("precision_mode".into()), self.get("padding_mode".into()));
    }

    fn amount_to_precision(&mut self, mut symbol: Value, mut amount: Value) -> Value {
        let mut market: Value = Cryptocom::market(self, symbol.clone());
        return self.decimal_to_precision(amount.clone(), TRUNCATE.into(), market.get(Value::from("precision")).get(Value::from("amount")), self.get("precision_mode".into()), self.get("padding_mode".into()));
    }

    fn fee_to_precision(&mut self, mut symbol: Value, mut fee: Value) -> Value {
        let mut market: Value = Cryptocom::market(self, symbol.clone());
        return self.decimal_to_precision(fee.clone(), ROUND.into(), market.get(Value::from("precision")).get(Value::from("price")), self.get("precision_mode".into()), self.get("padding_mode".into()));
    }

    fn currency_to_precision(&mut self, mut code: Value, mut fee: Value, mut network_code: Value) -> Value {
        let mut currency: Value = self.get("currencies".into()).get(code.clone());
        let mut precision: Value = self.safe_value(currency.clone(), Value::from("precision"), Value::Undefined);
        if network_code.clone().is_nonnullish() {
            let mut networks: Value = self.safe_value(currency.clone(), Value::from("networks"), Value::new_object());
            let mut network_item: Value = self.safe_value(networks.clone(), network_code.clone(), Value::new_object());
            precision = self.safe_value(network_item.clone(), Value::from("precision"), precision.clone());
        };
        if precision.clone().is_nullish() {
            return fee.clone();
        } else {
            return self.decimal_to_precision(fee.clone(), ROUND.into(), precision.clone(), self.get("precision_mode".into()), self.get("padding_mode".into()));
        };
        Value::Undefined
    }

    fn safe_number(&self, mut object: Value, mut key: Value, mut d: Value) -> Value {
        let mut value: Value = self.safe_string(object.clone(), key.clone(), Value::Undefined);
        return self.parse_number(value.clone(), d.clone());
    }

    fn safe_number_n(&self, mut object: Value, mut arr: Value, mut d: Value) -> Value {
        let mut value: Value = self.safe_string_n(object.clone(), arr.clone(), Value::Undefined);
        return self.parse_number(value.clone(), d.clone());
    }

    fn parse_precision(&self, mut precision: Value) -> Value {
        if precision.clone().is_nullish() {
            return Value::Undefined;
        };
        return Value::from("1e") + Precise::string_neg(precision.clone());
    }

    async fn load_time_difference(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut server_time: Value = self.fetch_time(params.clone()).await;
        let mut after: Value = self.milliseconds();
        self.get("options".into()).set("timeDifference".into(), after.clone() - server_time.clone());
        return self.get("options".into()).get(Value::from("timeDifference"));
    }

    fn implode_hostname(&mut self, mut url: Value) -> Value {
        return self.implode_params(url.clone(), Value::Json(normalize(&Value::Json(json!({
            "hostname": self.get("hostname".into())
        }))).unwrap()));
    }

    async fn fetch_market_leverage_tiers(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchLeverageTiers")).is_truthy() {
            let mut market: Value = Cryptocom::market(self, symbol.clone());
            if !market.get(Value::from("contract")).is_truthy() {
                panic!(r###"BadSymbol::new(self.get("id".into()) + Value::from(" fetchMarketLeverageTiers() supports contract markets only"))"###);
            };
            let mut tiers: Value = self.fetch_leverage_tiers(Value::Json(serde_json::Value::Array(vec![symbol.clone().into()])), Value::Undefined).await;
            return self.safe_value(tiers.clone(), symbol.clone(), Value::Undefined);
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchMarketLeverageTiers() is not supported yet"))"###);
        };
        Value::Undefined
    }

    async fn create_post_only_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createPostOnlyOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from("createPostOnlyOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "postOnly": true
        }))).unwrap()));
        return Cryptocom::create_order(self, symbol.clone(), r#type.clone(), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_reduce_only_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createReduceOnlyOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from("createReduceOnlyOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "reduceOnly": true
        }))).unwrap()));
        return Cryptocom::create_order(self, symbol.clone(), r#type.clone(), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_stop_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut stop_price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createStopOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" createStopOrder() is not supported yet"))"###);
        };
        if stop_price.clone().is_nullish() {
            panic!(r###"ArgumentsRequired::new(self.get("id".into()) + Value::from(" create_stop_order() requires a stopPrice argument"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "stopPrice": stop_price
        }))).unwrap()));
        return Cryptocom::create_order(self, symbol.clone(), r#type.clone(), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_stop_limit_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut stop_price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createStopLimitOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" createStopLimitOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "stopPrice": stop_price
        }))).unwrap()));
        return Cryptocom::create_order(self, symbol.clone(), Value::from("limit"), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_stop_market_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut stop_price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createStopMarketOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" createStopMarketOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "stopPrice": stop_price
        }))).unwrap()));
        return Cryptocom::create_order(self, symbol.clone(), Value::from("market"), side.clone(), amount.clone(), Value::Undefined, query.clone()).await;
    }

    fn safe_currency_code(&self, mut currency_id: Value, mut currency: Value) -> Value {
        currency = Cryptocom::safe_currency(self, currency_id.clone(), currency.clone());
        return currency.get(Value::from("code"));
    }

    fn filter_by_symbol_since_limit(&self, mut array: Value, mut symbol: Value, mut since: Value, mut limit: Value, mut tail: Value) -> Value {
        tail = tail.or_default(false.into());
        return self.filter_by_value_since_limit(array.clone(), Value::from("symbol"), symbol.clone(), since.clone(), limit.clone(), Value::from("timestamp"), tail.clone());
    }

    fn filter_by_currency_since_limit(&self, mut array: Value, mut code: Value, mut since: Value, mut limit: Value, mut tail: Value) -> Value {
        tail = tail.or_default(false.into());
        return self.filter_by_value_since_limit(array.clone(), Value::from("currency"), code.clone(), since.clone(), limit.clone(), Value::from("timestamp"), tail.clone());
    }

    fn parse_tickers(&self, mut tickers: Value, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        //
        // the value of tickers is either a dict or a list
        //
        // dict
        //
        //     {
        //         'marketId1': { ... },
        //         'marketId2': { ... },
        //         'marketId3': { ... },
        //         ...
        //     }
        //
        // list
        //
        //     [
        //         { 'market': 'marketId1', ... },
        //         { 'market': 'marketId2', ... },
        //         { 'market': 'marketId3', ... },
        //         ...
        //     ]
        //
        let mut results: Value = Value::new_array();
        if Array::is_array(tickers.clone()).is_truthy() {
            let mut i: usize = 0;
            while i < tickers.len() {
                let mut ticker: Value = extend_2(Cryptocom::parse_ticker(self, tickers.get(i.into()), Value::Undefined), params.clone());
                results.push(ticker.clone());
                i += 1;
            };
        } else {
            let mut market_ids: Value = Object::keys(tickers.clone());
            let mut i: usize = 0;
            while i < market_ids.len() {
                let mut market_id: Value = market_ids.get(i.into());
                let mut market: Value = Cryptocom::safe_market(self, market_id.clone(), Value::Undefined, Value::Undefined);
                let mut ticker: Value = extend_2(Cryptocom::parse_ticker(self, tickers.get(market_id.clone()), market.clone()), params.clone());
                results.push(ticker.clone());
                i += 1;
            };
        };
        symbols = Cryptocom::market_symbols(self, symbols.clone());
        return Cryptocom::filter_by_array(self, results.clone(), Value::from("symbol"), symbols.clone(), Value::Undefined);
    }

    fn parse_deposit_addresses(&self, mut addresses: Value, mut codes: Value, mut indexed: Value, mut params: Value) -> Value {
        indexed = indexed.or_default(true.into());
        params = params.or_default(Value::new_object());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < addresses.len() {
            let mut address: Value = extend_2(self.parse_deposit_address(addresses.get(i.into()), Value::Undefined), params.clone());
            result.push(address.clone());
            i += 1;
        };
        if codes.clone().is_nonnullish() {
            result = Cryptocom::filter_by_array(self, result.clone(), Value::from("currency"), codes.clone(), false.into());
        };
        result = if indexed.is_truthy() { self.index_by(result.clone(), Value::from("currency"), Value::Undefined) } else { result.clone() };
        return result.clone();
    }

    fn parse_borrow_interests(&self, mut response: Value, mut market: Value) -> Value {
        let mut interests: Value = Value::new_array();
        let mut i: usize = 0;
        while i < response.len() {
            let mut row: Value = response.get(i.into());
            interests.push(Cryptocom::parse_borrow_interest(self, row.clone(), market.clone()));
            i += 1;
        };
        return interests.clone();
    }

    fn parse_funding_rate_histories(&self, mut response: Value, mut market: Value, mut since: Value, mut limit: Value) -> Value {
        let mut rates: Value = Value::new_array();
        let mut i: usize = 0;
        while i < response.len() {
            let mut entry: Value = response.get(i.into());
            rates.push(self.parse_funding_rate_history(entry.clone(), market.clone()));
            i += 1;
        };
        let mut sorted: Value = self.sort_by(rates.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut symbol: Value = if market.clone().is_nullish() { Value::Undefined } else { market.get(Value::from("symbol")) };
        return Cryptocom::filter_by_symbol_since_limit(self, sorted.clone(), symbol.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    fn safe_symbol(&self, mut market_id: Value, mut market: Value, mut delimiter: Value) -> Value {
        market = Cryptocom::safe_market(self, market_id.clone(), market.clone(), delimiter.clone());
        return market.get(Value::from("symbol"));
    }

    fn parse_funding_rate(&self, mut contract: Value, mut market: Value) -> Value {
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" parseFundingRate() is not supported yet"))"###);
        Value::Undefined
    }

    fn parse_funding_rates(&self, mut response: Value, mut market: Value) -> Value {
        let mut result: Value = Value::new_object();
        let mut i: usize = 0;
        while i < response.len() {
            let mut parsed: Value = Cryptocom::parse_funding_rate(self, response.get(i.into()), market.clone());
            result.set(parsed.get(Value::from("symbol")), parsed.clone());
            i += 1;
        };
        return result.clone();
    }

    /// Returns true if a post only order, false otherwise
    ///
    /// @ignore
    ///
    /// # Arguments
    ///
    /// * `type` {string} - Order type
    /// * `exchangeSpecificParam` {boolean} - exchange specific postOnly
    /// * `params` {object} - exchange specific params
    fn is_post_only(&mut self, mut is_market_order: Value, mut exchange_specific_param: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut time_in_force: Value = self.safe_string_upper(params.clone(), Value::from("timeInForce"), Value::Undefined);
        let mut post_only: Value = self.safe_value_2(params.clone(), Value::from("postOnly"), Value::from("post_only"), false.into());
        // we assume timeInForce is uppercase from safeStringUpper (params, 'timeInForce')
        let mut ioc: Value = (time_in_force.clone() == Value::from("IOC")).into();
        let mut fok: Value = (time_in_force.clone() == Value::from("FOK")).into();
        let mut time_in_force_post_only: Value = (time_in_force.clone() == Value::from("PO")).into();
        post_only = (post_only.is_truthy() || time_in_force_post_only.is_truthy() || exchange_specific_param.is_truthy()).into();
        if post_only.is_truthy() {
            if ioc.is_truthy() || fok.is_truthy() {
                panic!(r###"InvalidOrder::new(self.get("id".into()) + Value::from(" postOnly orders cannot have timeInForce equal to ") + time_in_force.clone())"###);
            } else if is_market_order.is_truthy() {
                panic!(r###"InvalidOrder::new(self.get("id".into()) + Value::from(" market orders cannot be postOnly"))"###);
            } else {
                return true.into();
            };
        } else {
            return false.into();
        };
        Value::Undefined
    }

    async fn fetch_trading_fees(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTradingFees() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_trading_fee(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("fetchTradingFees")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTradingFee() is not supported yet"))"###);
        };
        return Cryptocom::fetch_trading_fees(self, params.clone()).await;
    }

    fn parse_open_interest(&self, mut interest: Value, mut market: Value) -> Value {
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" parseOpenInterest () is not supported yet"))"###);
        Value::Undefined
    }

    fn parse_open_interests(&self, mut response: Value, mut market: Value, mut since: Value, mut limit: Value) -> Value {
        let mut interests: Value = Value::new_array();
        let mut i: usize = 0;
        while i < response.len() {
            let mut entry: Value = response.get(i.into());
            let mut interest: Value = Cryptocom::parse_open_interest(self, entry.clone(), market.clone());
            interests.push(interest.clone());
            i += 1;
        };
        let mut sorted: Value = self.sort_by(interests.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut symbol: Value = self.safe_string(market.clone(), Value::from("symbol"), Value::Undefined);
        return Cryptocom::filter_by_symbol_since_limit(self, sorted.clone(), symbol.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    async fn fetch_funding_rate(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchFundingRates")).is_truthy() {
            Cryptocom::load_markets(self, Value::Undefined, Value::Undefined).await;
            let mut market: Value = Cryptocom::market(self, symbol.clone());
            if !market.get(Value::from("contract")).is_truthy() {
                panic!(r###"BadSymbol::new(self.get("id".into()) + Value::from(" fetchFundingRate() supports contract markets only"))"###);
            };
            let mut rates: Value = self.fetch_funding_rates(Value::Json(serde_json::Value::Array(vec![symbol.clone().into()])), params.clone()).await;
            let mut rate: Value = self.safe_value(rates.clone(), symbol.clone(), Value::Undefined);
            if rate.clone().is_nullish() {
                panic!(r###"NullResponse::new(self.get("id".into()) + Value::from(" fetchFundingRate () returned no data for ") + symbol.clone())"###);
            } else {
                return rate.clone();
            };
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchFundingRate () is not supported yet"))"###);
        };
        Value::Undefined
    }

    /// Returns a list of candles ordered as timestamp, open, high, low, close, undefined
    ///
    /// Fetches historical mark price candlestick data containing the open, high, low, and close price of a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch OHLCV data for
    /// * `timeframe` {string} - the length of time each candle represents
    /// * `since` {int|undefined} - timestamp in ms of the earliest candle to fetch
    /// * `limit` {int|undefined} - the maximum amount of candles to fetch
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    async fn fetch_mark_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchMarkOHLCV")).is_truthy() {
            let mut request: Value = Value::Json(normalize(&Value::Json(json!({
                "price": "mark"
            }))).unwrap());
            return Cryptocom::fetch_ohlcv(self, symbol.clone(), timeframe.clone(), since.clone(), limit.clone(), extend_2(request.clone(), params.clone())).await;
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchMarkOHLCV () is not supported yet"))"###);
        };
        Value::Undefined
    }

    /// Returns a list of candles ordered as timestamp, open, high, low, close, undefined
    ///
    /// Fetches historical index price candlestick data containing the open, high, low, and close price of a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch OHLCV data for
    /// * `timeframe` {string} - the length of time each candle represents
    /// * `since` {int|undefined} - timestamp in ms of the earliest candle to fetch
    /// * `limit` {int|undefined} - the maximum amount of candles to fetch
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    async fn fetch_index_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchIndexOHLCV")).is_truthy() {
            let mut request: Value = Value::Json(normalize(&Value::Json(json!({
                "price": "index"
            }))).unwrap());
            return Cryptocom::fetch_ohlcv(self, symbol.clone(), timeframe.clone(), since.clone(), limit.clone(), extend_2(request.clone(), params.clone())).await;
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchIndexOHLCV () is not supported yet"))"###);
        };
        Value::Undefined
    }

    /// Returns a list of candles ordered as timestamp, open, high, low, close, undefined
    ///
    /// Fetches historical premium index price candlestick data containing the open, high, low, and close price of a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch OHLCV data for
    /// * `timeframe` {string} - the length of time each candle represents
    /// * `since` {int|undefined} - timestamp in ms of the earliest candle to fetch
    /// * `limit` {int|undefined} - the maximum amount of candles to fetch
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    async fn fetch_premium_index_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchPremiumIndexOHLCV")).is_truthy() {
            let mut request: Value = Value::Json(normalize(&Value::Json(json!({
                "price": "premiumIndex"
            }))).unwrap());
            return Cryptocom::fetch_ohlcv(self, symbol.clone(), timeframe.clone(), since.clone(), limit.clone(), extend_2(request.clone(), params.clone())).await;
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchPremiumIndexOHLCV () is not supported yet"))"###);
        };
        Value::Undefined
    }

    /// Returns returns the exchange specific value for timeInForce
    ///
    /// @ignore
    /// * Must add timeInForce to this.options to use this method
    fn handle_time_in_force(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut time_in_force: Value = self.safe_string_upper(params.clone(), Value::from("timeInForce"), Value::Undefined);
        // supported values GTC, IOC, PO
        if time_in_force.clone().is_nonnullish() {
            let mut exchange_value: Value = self.safe_string(self.get("options".into()).get(Value::from("timeInForce")), time_in_force.clone(), Value::Undefined);
            if exchange_value.clone().is_nullish() {
                panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(r#" does not support timeInForce ""#) + time_in_force.clone() + Value::from(r#"""#))"###);
            };
            return exchange_value.clone();
        };
        return Value::Undefined;
    }

    /// Returns the exchange specific account name or the isolated margin id for transfers
    ///
    /// @ignore
    /// * Must add accountsByType to this.options to use this method
    ///
    /// # Arguments
    ///
    /// * `account` {string} - key for account name in this.options['accountsByType']
    fn parse_account(&self, mut account: Value) -> Value {
        let mut accounts_by_type: Value = self.safe_value(self.get("options".into()), Value::from("accountsByType"), Value::new_object());
        let mut symbols: Value = self.get("symbols".into());
        if accounts_by_type.contains_key(account.clone()) {
            return accounts_by_type.get(account.clone());
        } else if self.in_array(account.clone(), symbols.clone()).is_truthy() {
            let mut market: Value = Cryptocom::market(self, account.clone());
            return market.get(Value::from("id"));
        } else {
            return account.clone();
        };
        Value::Undefined
    }

    /// Returns {[string|undefined, object]} the marginMode in lowercase as specified by params["marginMode"], params["defaultMarginMode"] this.options["marginMode"] or this.options["defaultMarginMode"]
    ///
    /// @ignore
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    fn handle_margin_mode_and_params(&mut self, mut method_name: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut default_margin_mode: Value = self.safe_string_2(self.get("options".into()), Value::from("marginMode"), Value::from("defaultMarginMode"), Value::Undefined);
        let mut method_options: Value = self.safe_value(self.get("options".into()), method_name.clone(), Value::new_object());
        let mut method_margin_mode: Value = self.safe_string_2(method_options.clone(), Value::from("marginMode"), Value::from("defaultMarginMode"), default_margin_mode.clone());
        let mut margin_mode: Value = self.safe_string_lower_2(params.clone(), Value::from("marginMode"), Value::from("defaultMarginMode"), method_margin_mode.clone());
        if margin_mode.clone().is_nonnullish() {
            params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("marginMode").into(), Value::from("defaultMarginMode").into()])));
        };
        return Value::Json(serde_json::Value::Array(vec![margin_mode.clone().into(), params.clone().into()]));
    }

    async fn load_markets_helper(&mut self, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        if !reload.is_truthy() && self.get("markets".into()).is_truthy() {
            if !self.get("markets_by_id".into()).is_truthy() {
                return Cryptocom::set_markets(self, self.get("markets".into()), Value::Undefined);
            };
            return self.get("markets".into());
        };
        let mut currencies: Value = Value::Undefined;
        // only call if exchange API provides endpoint (true), thus avoid emulated versions ('emulated')
        if self.get("has".into()).get(Value::from("fetchCurrencies")) == true.into() {
            currencies = self.fetch_currencies(Value::Undefined).await;
        };
        let mut markets: Value = Cryptocom::fetch_markets(self, params.clone()).await;
        return Cryptocom::set_markets(self, markets.clone(), currencies.clone());
    }

    async fn load_markets(&mut self, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        // this method is async, it returns a promise
        if reload.is_truthy() && !self.get("reloading_markets".into()).is_truthy() || !self.get("markets_loading".into()).is_truthy() {
            self.set("reloading_markets".into(), true.into());
            // TODO This should use a finally block
            let mut markets_loading: Value = Cryptocom::load_markets_helper(self, reload.clone(), params.clone()).await;
            self.set("markets_loading".into(), markets_loading.clone());
            self.set("reloading_markets".into(), false.into());
            return self.get("markets_loading".into());
        };
        return self.get("markets_loading".into());
    }

    
    async fn dispatch(&mut self, method: Value, params: Value, context: Value) -> Value {
        match method {
            Value::Json(serde_json::Value::String(ref m)) => {
                match m.as_ref() {
                    "spotPublicGetPublicAuth" => Cryptocom::request(self, "public/auth".into(), "spot".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPublicGetPublicGetInstruments" => Cryptocom::request(self, "public/get-instruments".into(), "spot".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPublicGetPublicGetBook" => Cryptocom::request(self, "public/get-book".into(), "spot".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPublicGetPublicGetCandlestick" => Cryptocom::request(self, "public/get-candlestick".into(), "spot".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPublicGetPublicGetTicker" => Cryptocom::request(self, "public/get-ticker".into(), "spot".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPublicGetPublicGetTrades" => Cryptocom::request(self, "public/get-trades".into(), "spot".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPublicGetPublicMarginGetTransferCurrencies" => Cryptocom::request(self, "public/margin/get-transfer-currencies".into(), "spot".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPublicGetPublicMarginGetLoadCurrenices" => Cryptocom::request(self, "public/margin/get-load-currenices".into(), "spot".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPublicGetPublicRespondHeartbeat" => Cryptocom::request(self, "public/respond-heartbeat".into(), "spot".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateSetCancelOnDisconnect" => Cryptocom::request(self, "private/set-cancel-on-disconnect".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateGetCancelOnDisconnect" => Cryptocom::request(self, "private/get-cancel-on-disconnect".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateCreateWithdrawal" => Cryptocom::request(self, "private/create-withdrawal".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateGetWithdrawalHistory" => Cryptocom::request(self, "private/get-withdrawal-history".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateGetCurrencyNetworks" => Cryptocom::request(self, "private/get-currency-networks".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateGetDepositHistory" => Cryptocom::request(self, "private/get-deposit-history".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateGetDepositAddress" => Cryptocom::request(self, "private/get-deposit-address".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateGetAccountSummary" => Cryptocom::request(self, "private/get-account-summary".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateCreateOrder" => Cryptocom::request(self, "private/create-order".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateCancelOrder" => Cryptocom::request(self, "private/cancel-order".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateCancelAllOrders" => Cryptocom::request(self, "private/cancel-all-orders".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateGetOrderHistory" => Cryptocom::request(self, "private/get-order-history".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateGetOpenOrders" => Cryptocom::request(self, "private/get-open-orders".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateGetOrderDetail" => Cryptocom::request(self, "private/get-order-detail".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateGetTrades" => Cryptocom::request(self, "private/get-trades".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginGetUserConfig" => Cryptocom::request(self, "private/margin/get-user-config".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginGetAccountSummary" => Cryptocom::request(self, "private/margin/get-account-summary".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginTransfer" => Cryptocom::request(self, "private/margin/transfer".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginBorrow" => Cryptocom::request(self, "private/margin/borrow".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginRepay" => Cryptocom::request(self, "private/margin/repay".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginGetTransferHistory" => Cryptocom::request(self, "private/margin/get-transfer-history".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginGetBorrowHistory" => Cryptocom::request(self, "private/margin/get-borrow-history".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginGetInterestHistory" => Cryptocom::request(self, "private/margin/get-interest-history".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginGetRepayHistory" => Cryptocom::request(self, "private/margin/get-repay-history".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginGetLiquidationHistory" => Cryptocom::request(self, "private/margin/get-liquidation-history".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginGetLiquidationOrders" => Cryptocom::request(self, "private/margin/get-liquidation-orders".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginCreateOrder" => Cryptocom::request(self, "private/margin/create-order".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginCancelOrder" => Cryptocom::request(self, "private/margin/cancel-order".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginCancelAllOrders" => Cryptocom::request(self, "private/margin/cancel-all-orders".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginGetOrderHistory" => Cryptocom::request(self, "private/margin/get-order-history".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginGetOpenOrders" => Cryptocom::request(self, "private/margin/get-open-orders".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginGetOrderDetail" => Cryptocom::request(self, "private/margin/get-order-detail".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateMarginGetTrades" => Cryptocom::request(self, "private/margin/get-trades".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateDerivTransfer" => Cryptocom::request(self, "private/deriv/transfer".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateDerivGetTransferHistory" => Cryptocom::request(self, "private/deriv/get-transfer-history".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateSubaccountGetSubAccounts" => Cryptocom::request(self, "private/subaccount/get-sub-accounts".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateSubaccountGetTransferHistory" => Cryptocom::request(self, "private/subaccount/get-transfer-history".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateSubaccountTransfer" => Cryptocom::request(self, "private/subaccount/transfer".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateOtcGetOtcUser" => Cryptocom::request(self, "private/otc/get-otc-user".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateOtcGetInstruments" => Cryptocom::request(self, "private/otc/get-instruments".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateOtcRequestQuote" => Cryptocom::request(self, "private/otc/request-quote".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateOtcAcceptQuote" => Cryptocom::request(self, "private/otc/accept-quote".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateOtcGetQuoteHistory" => Cryptocom::request(self, "private/otc/get-quote-history".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "spotPrivatePostPrivateOtcGetTradeHistory" => Cryptocom::request(self, "private/otc/get-trade-history".into(), "spot".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPublicGetPublicAuth" => Cryptocom::request(self, "public/auth".into(), "derivatives".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPublicGetPublicGetInstruments" => Cryptocom::request(self, "public/get-instruments".into(), "derivatives".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPublicGetPublicGetBook" => Cryptocom::request(self, "public/get-book".into(), "derivatives".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPublicGetPublicGetCandlestick" => Cryptocom::request(self, "public/get-candlestick".into(), "derivatives".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPublicGetPublicGetTrades" => Cryptocom::request(self, "public/get-trades".into(), "derivatives".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPublicGetPublicGetTickers" => Cryptocom::request(self, "public/get-tickers".into(), "derivatives".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPublicGetPublicGetValuations" => Cryptocom::request(self, "public/get-valuations".into(), "derivatives".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPublicGetPublicGetExpiredSettlementPrice" => Cryptocom::request(self, "public/get-expired-settlement-price".into(), "derivatives".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPublicGetPublicGetInsurance" => Cryptocom::request(self, "public/get-insurance".into(), "derivatives".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateSetCancelOnDisconnect" => Cryptocom::request(self, "private/set-cancel-on-disconnect".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateGetCancelOnDisconnect" => Cryptocom::request(self, "private/get-cancel-on-disconnect".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateUserBalance" => Cryptocom::request(self, "private/user-balance".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateUserBalanceHistory" => Cryptocom::request(self, "private/user-balance-history".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateGetPositions" => Cryptocom::request(self, "private/get-positions".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateCreateOrder" => Cryptocom::request(self, "private/create-order".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateCancelOrder" => Cryptocom::request(self, "private/cancel-order".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateCancelAllOrders" => Cryptocom::request(self, "private/cancel-all-orders".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateClosePosition" => Cryptocom::request(self, "private/close-position".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateConvertCollateral" => Cryptocom::request(self, "private/convert-collateral".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateGetOrderHistory" => Cryptocom::request(self, "private/get-order-history".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateGetOpenOrders" => Cryptocom::request(self, "private/get-open-orders".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateGetOrderDetail" => Cryptocom::request(self, "private/get-order-detail".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateGetTrades" => Cryptocom::request(self, "private/get-trades".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateChangeAccountLeverage" => Cryptocom::request(self, "private/change-account-leverage".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "derivativesPrivatePostPrivateGetTransactions" => Cryptocom::request(self, "private/get-transactions".into(), "derivatives".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    _ => unimplemented!(),
                }
            },
            _ => unimplemented!()
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub struct CryptocomImpl(Value);
impl Exchange for CryptocomImpl {}
impl Cryptocom for CryptocomImpl {}
impl ValueTrait for CryptocomImpl {
    fn is_undefined(&self) -> bool { self.0.is_undefined() }
    fn is_nullish(&self) -> bool { self.0.is_nullish() }
    fn is_nonnullish(&self) -> bool { self.0.is_nonnullish() }
    fn is_truthy(&self) -> bool { self.0.is_truthy() }
    fn or_default(&self, default: Value) -> Value { self.0.or_default(default) }
    fn is_number(&self) -> bool { self.0.is_number() }
    fn is_string(&self) -> bool { self.0.is_string() }
    fn is_object(&self) -> bool { self.0.is_object() }
    fn is_falsy(&self) -> bool { self.0.is_falsy() }
    fn to_upper_case(&self) -> Value { self.0.to_upper_case() }
    fn unwrap_str(&self) -> &str { self.0.unwrap_str() }
    fn unwrap_usize(&self) -> usize { self.0.unwrap_usize() }
    fn unwrap_bool(&self) -> bool { self.0.unwrap_bool() }
    fn unwrap_precise(&self) -> &Precise { self.0.unwrap_precise() }
    fn unwrap_json(&self) -> &serde_json::Value { self.0.unwrap_json() }
    fn unwrap_json_mut(&mut self) -> &mut serde_json::Value { self.0.unwrap_json_mut() }
    fn unwrap_precise_mut(&mut self) -> &mut Precise { self.0.unwrap_precise_mut() }
    fn len(&self) -> usize { self.0.len() }
    fn get(&self, key: Value) -> Value { self.0.get(key) }
    fn set(&mut self, key: Value, value: Value) { self.0.set(key, value) }
    fn push(&mut self, value: Value) { self.0.push(value) }
    fn split(&self, separator: Value) -> Value { self.0.split(separator) }
    fn contains_key(&self, key: Value) -> bool { self.0.contains_key(key) }
    fn keys(&self) -> Vec<Value> { self.0.keys() }
    fn values(&self) -> Vec<Value> { self.0.values() }
    fn to_array(&self, x: Value) -> Value { self.0.to_array(x) }
    fn index_of(&self, x: Value) -> Value { self.0.index_of(x) }
    fn join(&self, glue: Value) -> Value { self.0.join(glue) }
    fn to_string(&self) -> Value { self.0.to_string() }
    fn typeof_(&self) -> Value { self.0.typeof_() }
    fn slice(&self, start: Value) -> Value { self.0.slice(start) }
}

impl CryptocomImpl {
    pub fn new(params: Value) -> Self {
        let mut rv = CryptocomImpl(match params {
            Value::Json(_) => params,
            _ => Value::new_object()
        });
        ExchangeImpl::init(&mut rv.0);

        let config_entries = Cryptocom::describe(&rv);
        for k in config_entries.keys() {
            rv.set(k.clone(), config_entries.get(k).clone());
        }
        rv
    }
}

