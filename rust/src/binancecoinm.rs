#![allow(clippy::all)]
#![allow(dead_code)]
#![allow(unreachable_code)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(unused_comparisons)]
#![allow(unused_mut)]
#![allow(unused_variables)]

use async_trait::async_trait;
use std::str::FromStr;
use serde::{Deserialize, Serialize};
use serde_json::json;
use crate::exchange::{Exchange, ExchangeImpl, Precise, Value, ValueTrait, JSON, Array, Object, Math, parse_int, shift_2, extend_2, normalize};

use crate::exchange::{PRECISE_BASE, TRUNCATE, ROUND, ROUND_UP, ROUND_DOWN};
use crate::exchange::{DECIMAL_PLACES, SIGNIFICANT_DIGITS, TICK_SIZE, NO_PADDING, PAD_WITH_ZERO};

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

#[async_trait]
pub trait Binancecoinm : binance {
    fn describe(&self) -> Value {
        Value::Json(serde_json::Value::from_str(r###"{
            "id": "binancecoinm",
            "name": "Binance COIN-M",
            "countries": [
                "JP",
                "MT"
            ],
            "enableRateLimit": true,
            "rateLimit": 50,
            "certified": true,
            "pro": true,
            "alias": false,
            "has": {
                "publicAPI": true,
                "privateAPI": true,
                "spot": true,
                "addMargin": true,
                "cancelAllOrders": true,
                "cancelOrder": true,
                "createDepositAddress": false,
                "createLimitOrder": true,
                "createMarketOrder": true,
                "createOrder": true,
                "createReduceOnlyOrder": true,
                "createStopOrder": true,
                "createStopLimitOrder": true,
                "createStopMarketOrder": true,
                "editOrder": "emulated",
                "fetchBalance": true,
                "fetchBidsAsks": true,
                "fetchBorrowInterest": true,
                "fetchBorrowRate": true,
                "fetchBorrowRateHistory": true,
                "fetchBorrowRatesPerSymbol": false,
                "fetchBorrowRates": false,
                "fetchCanceledOrders": false,
                "fetchClosedOrder": false,
                "fetchClosedOrders": "emulated",
                "fetchCurrencies": true,
                "fetchDeposit": false,
                "fetchDepositAddress": true,
                "fetchDepositAddresses": false,
                "fetchDepositAddressesByNetwork": false,
                "fetchDeposits": true,
                "fetchTransactionFees": true,
                "fetchFundingHistory": true,
                "fetchFundingRate": true,
                "fetchFundingRateHistory": true,
                "fetchFundingRates": true,
                "fetchIndexOHLCV": true,
                "fetchL2OrderBook": true,
                "fetchLeverageTiers": true,
                "fetchMarketLeverageTiers": "emulated",
                "fetchMarkets": true,
                "fetchMarkOHLCV": true,
                "fetchMyTrades": true,
                "fetchOHLCV": true,
                "fetchOpenOrder": false,
                "fetchOpenOrders": true,
                "fetchOrder": true,
                "fetchOrderBook": true,
                "fetchOrderBooks": false,
                "fetchOrders": true,
                "fetchOrderTrades": true,
                "fetchPositions": true,
                "fetchPositionsRisk": true,
                "fetchPremiumIndexOHLCV": false,
                "fetchStatus": true,
                "fetchTicker": true,
                "fetchTickers": true,
                "fetchTime": true,
                "fetchTrades": true,
                "fetchTradingFee": true,
                "fetchTradingFees": true,
                "fetchTransactions": false,
                "fetchTransfers": true,
                "fetchWithdrawal": false,
                "fetchWithdrawals": true,
                "reduceMargin": true,
                "setLeverage": true,
                "setMargin": false,
                "setMarginMode": true,
                "setPositionMode": true,
                "signIn": false,
                "transfer": true,
                "withdraw": true,
                "borrowMargin": true,
                "fetchBorrowRateHistories": false,
                "fetchL3OrderBook": false,
                "fetchLeverage": false,
                "fetchOpenInterestHistory": true,
                "fetchWithdrawalWhitelist": false,
                "repayMargin": true
            },
            "urls": {
                "logo": "https://user-images.githubusercontent.com/1294454/117738721-668c8d80-b205-11eb-8c49-3fad84c4a07f.jpg",
                "api": {
                    "wapi": "https://api.binance.com/wapi/v3",
                    "sapi": "https://api.binance.com/sapi/v1",
                    "sapiV3": "https://api.binance.com/sapi/v3",
                    "dapiPublic": "https://dapi.binance.com/dapi/v1",
                    "dapiPrivate": "https://dapi.binance.com/dapi/v1",
                    "vapiPublic": "https://vapi.binance.com/vapi/v1",
                    "vapiPrivate": "https://vapi.binance.com/vapi/v1",
                    "dapiPrivateV2": "https://dapi.binance.com/dapi/v2",
                    "dapiData": "https://dapi.binance.com/futures/data",
                    "fapiPublic": "https://fapi.binance.com/fapi/v1",
                    "fapiPrivate": "https://fapi.binance.com/fapi/v1",
                    "fapiData": "https://fapi.binance.com/futures/data",
                    "fapiPrivateV2": "https://fapi.binance.com/fapi/v2",
                    "public": "https://api.binance.com/api/v3",
                    "private": "https://api.binance.com/api/v3",
                    "v1": "https://api.binance.com/api/v1"
                },
                "www": "https://www.binance.com",
                "doc": [
                    "https://binance-docs.github.io/apidocs/delivery/en/",
                    "https://binance-docs.github.io/apidocs/spot/en"
                ],
                "fees": "https://www.binance.com/en/fee/schedule",
                "test": {
                    "dapiPublic": "https://testnet.binancefuture.com/dapi/v1",
                    "dapiPrivate": "https://testnet.binancefuture.com/dapi/v1",
                    "vapiPublic": "https://testnet.binanceops.com/vapi/v1",
                    "vapiPrivate": "https://testnet.binanceops.com/vapi/v1",
                    "fapiPublic": "https://testnet.binancefuture.com/fapi/v1",
                    "fapiPrivate": "https://testnet.binancefuture.com/fapi/v1",
                    "fapiPrivateV2": "https://testnet.binancefuture.com/fapi/v2",
                    "public": "https://testnet.binance.vision/api/v3",
                    "private": "https://testnet.binance.vision/api/v3",
                    "v1": "https://testnet.binance.vision/api/v1"
                },
                "referral": {
                    "url": "https://www.binance.com/en/register?ref=D7YA7CLY",
                    "discount": 0.1
                },
                "api_management": "https://www.binance.com/en/usercenter/settings/api-management"
            },
            "api": {
                "sapi": {
                    "get": {
                        "system/status": 0.1,
                        "accountSnapshot": 240,
                        "margin/asset": 1,
                        "margin/pair": 1,
                        "margin/allAssets": 0.1,
                        "margin/allPairs": 0.1,
                        "margin/priceIndex": 1,
                        "asset/assetDividend": 1,
                        "asset/dribblet": 0.1,
                        "asset/transfer": 0.1,
                        "asset/assetDetail": 0.1,
                        "asset/tradeFee": 0.1,
                        "margin/loan": 1,
                        "margin/repay": 1,
                        "margin/account": 1,
                        "margin/transfer": 0.1,
                        "margin/interestHistory": 0.1,
                        "margin/forceLiquidationRec": 0.1,
                        "margin/order": 1,
                        "margin/openOrders": 1,
                        "margin/allOrders": 20,
                        "margin/myTrades": 1,
                        "margin/maxBorrowable": 5,
                        "margin/maxTransferable": 5,
                        "margin/isolated/transfer": 0.1,
                        "margin/isolated/account": 1,
                        "margin/isolated/pair": 1,
                        "margin/isolated/allPairs": 1,
                        "margin/isolated/accountLimit": 0.1,
                        "margin/interestRateHistory": 0.1,
                        "margin/orderList": 1,
                        "margin/allOrderList": 20,
                        "margin/openOrderList": 1,
                        "margin/crossMarginData": {
                            "cost": 0.1,
                            "noCoin": 0.5
                        },
                        "margin/isolatedMarginData": {
                            "cost": 0.1,
                            "noCoin": 1
                        },
                        "margin/isolatedMarginTier": 0.1,
                        "margin/rateLimit/order": 2,
                        "margin/dribblet": 0.1,
                        "loan/income": 40,
                        "fiat/orders": 600.03,
                        "fiat/payments": 0.1,
                        "futures/transfer": 1,
                        "futures/loan/borrow/history": 1,
                        "futures/loan/repay/history": 1,
                        "futures/loan/wallet": 1,
                        "futures/loan/configs": 1,
                        "futures/loan/calcAdjustLevel": 5,
                        "futures/loan/calcMaxAdjustAmount": 5,
                        "futures/loan/adjustCollateral/history": 1,
                        "futures/loan/liquidationHistory": 1,
                        "rebate/taxQuery": 20.001,
                        "capital/config/getall": 1,
                        "capital/deposit/address": 1,
                        "capital/deposit/hisrec": 0.1,
                        "capital/deposit/subAddress": 0.1,
                        "capital/deposit/subHisrec": 0.1,
                        "capital/withdraw/history": 0.1,
                        "convert/tradeFlow": 0.6667,
                        "account/status": 0.1,
                        "account/apiTradingStatus": 0.1,
                        "account/apiRestrictions/ipRestriction": 0.1,
                        "bnbBurn": 0.1,
                        "sub-account/futures/account": 1,
                        "sub-account/futures/accountSummary": 0.1,
                        "sub-account/futures/positionRisk": 1,
                        "sub-account/futures/internalTransfer": 0.1,
                        "sub-account/list": 0.1,
                        "sub-account/margin/account": 1,
                        "sub-account/margin/accountSummary": 1,
                        "sub-account/spotSummary": 0.1,
                        "sub-account/status": 1,
                        "sub-account/sub/transfer/history": 0.1,
                        "sub-account/transfer/subUserHistory": 0.1,
                        "sub-account/universalTransfer": 0.1,
                        "managed-subaccount/asset": 0.1,
                        "managed-subaccount/accountSnapshot": 240,
                        "lending/daily/product/list": 0.1,
                        "lending/daily/userLeftQuota": 0.1,
                        "lending/daily/userRedemptionQuota": 0.1,
                        "lending/daily/token/position": 0.1,
                        "lending/union/account": 0.1,
                        "lending/union/purchaseRecord": 0.1,
                        "lending/union/redemptionRecord": 0.1,
                        "lending/union/interestHistory": 0.1,
                        "lending/project/list": 0.1,
                        "lending/project/position/list": 0.1,
                        "mining/pub/algoList": 0.1,
                        "mining/pub/coinList": 0.1,
                        "mining/worker/detail": 0.5,
                        "mining/worker/list": 0.5,
                        "mining/payment/list": 0.5,
                        "mining/statistics/user/status": 0.5,
                        "mining/statistics/user/list": 0.5,
                        "mining/payment/uid": 0.5,
                        "bswap/pools": 0.1,
                        "bswap/liquidity": {
                            "cost": 0.1,
                            "noPoolId": 1
                        },
                        "bswap/liquidityOps": 20.001,
                        "bswap/quote": 1.00005,
                        "bswap/swap": 20.001,
                        "bswap/poolConfigure": 1.00005,
                        "bswap/addLiquidityPreview": 1.00005,
                        "bswap/removeLiquidityPreview": 1.00005,
                        "bswap/unclaimedRewards": 6.667,
                        "bswap/claimedHistory": 6.667,
                        "blvt/tokenInfo": 0.1,
                        "blvt/subscribe/record": 0.1,
                        "blvt/redeem/record": 0.1,
                        "blvt/userLimit": 0.1,
                        "apiReferral/ifNewUser": 1,
                        "apiReferral/customization": 1,
                        "apiReferral/userCustomization": 1,
                        "apiReferral/rebate/recentRecord": 1,
                        "apiReferral/rebate/historicalRecord": 1,
                        "apiReferral/kickback/recentRecord": 1,
                        "apiReferral/kickback/historicalRecord": 1,
                        "broker/subAccountApi": 1,
                        "broker/subAccount": 1,
                        "broker/subAccountApi/commission/futures": 1,
                        "broker/subAccountApi/commission/coinFutures": 1,
                        "broker/info": 1,
                        "broker/transfer": 1,
                        "broker/transfer/futures": 1,
                        "broker/rebate/recentRecord": 1,
                        "broker/rebate/historicalRecord": 1,
                        "broker/subAccount/bnbBurn/status": 1,
                        "broker/subAccount/depositHist": 1,
                        "broker/subAccount/spotSummary": 1,
                        "broker/subAccount/marginSummary": 1,
                        "broker/subAccount/futuresSummary": 1,
                        "broker/rebate/futures/recentRecord": 1,
                        "broker/subAccountApi/ipRestriction": 1,
                        "broker/universalTransfer": 1,
                        "account/apiRestrictions": 0.1,
                        "c2c/orderMatch/listUserOrderHistory": 0.1,
                        "nft/history/transactions": 20.001,
                        "nft/history/deposit": 20.001,
                        "nft/history/withdraw": 20.001,
                        "nft/user/getAsset": 20.001,
                        "pay/transactions": 20.001,
                        "giftcard/verify": 0.1,
                        "giftcard/cryptography/rsa-public-key": 0.1,
                        "algo/futures/openOrders": 0.1,
                        "algo/futures/historicalOrders": 0.1,
                        "algo/futures/subOrders": 0.1,
                        "portfolio/account": 0.1,
                        "portfolio/collateralRate": 5,
                        "portfolio/pmLoan": 3.3335,
                        "staking/productList": 0.1,
                        "staking/position": 0.1,
                        "staking/stakingRecord": 0.1,
                        "staking/personalLeftQuota": 0.1
                    },
                    "post": {
                        "asset/dust": 1,
                        "asset/dust-btc": 0.1,
                        "asset/transfer": 0.1,
                        "asset/get-funding-asset": 0.1,
                        "account/disableFastWithdrawSwitch": 0.1,
                        "account/enableFastWithdrawSwitch": 0.1,
                        "capital/withdraw/apply": 0.1,
                        "margin/transfer": 1,
                        "margin/loan": 20.001,
                        "margin/repay": 20.001,
                        "margin/order": 0.040002,
                        "margin/order/oco": 0.040002,
                        "margin/isolated/transfer": 4.0002,
                        "margin/isolated/account": 2.0001,
                        "bnbBurn": 0.1,
                        "sub-account/margin/transfer": 4.0002,
                        "sub-account/margin/enable": 0.1,
                        "sub-account/futures/enable": 0.1,
                        "sub-account/futures/transfer": 0.1,
                        "sub-account/futures/internalTransfer": 0.1,
                        "sub-account/transfer/subToSub": 0.1,
                        "sub-account/transfer/subToMaster": 0.1,
                        "sub-account/universalTransfer": 0.1,
                        "managed-subaccount/deposit": 0.1,
                        "managed-subaccount/withdraw": 0.1,
                        "userDataStream": 0.1,
                        "userDataStream/isolated": 0.1,
                        "futures/transfer": 0.1,
                        "futures/loan/borrow": 20.001,
                        "futures/loan/repay": 20.001,
                        "futures/loan/adjustCollateral": 20.001,
                        "lending/customizedFixed/purchase": 0.1,
                        "lending/daily/purchase": 0.1,
                        "lending/daily/redeem": 0.1,
                        "bswap/liquidityAdd": 60,
                        "bswap/liquidityRemove": 60,
                        "bswap/swap": 60,
                        "bswap/claimRewards": 6.667,
                        "blvt/subscribe": 0.1,
                        "blvt/redeem": 0.1,
                        "apiReferral/customization": 1,
                        "apiReferral/userCustomization": 1,
                        "apiReferral/rebate/historicalRecord": 1,
                        "apiReferral/kickback/historicalRecord": 1,
                        "broker/subAccount": 1,
                        "broker/subAccount/margin": 1,
                        "broker/subAccount/futures": 1,
                        "broker/subAccountApi": 1,
                        "broker/subAccountApi/permission": 1,
                        "broker/subAccountApi/commission": 1,
                        "broker/subAccountApi/commission/futures": 1,
                        "broker/subAccountApi/commission/coinFutures": 1,
                        "broker/transfer": 1,
                        "broker/transfer/futures": 1,
                        "broker/rebate/historicalRecord": 1,
                        "broker/subAccount/bnbBurn/spot": 1,
                        "broker/subAccount/bnbBurn/marginInterest": 1,
                        "broker/subAccount/blvt": 1,
                        "broker/subAccountApi/ipRestriction": 1,
                        "broker/subAccountApi/ipRestriction/ipList": 1,
                        "broker/universalTransfer": 1,
                        "broker/subAccountApi/permission/universalTransfer": 1,
                        "broker/subAccountApi/permission/vanillaOptions": 1,
                        "giftcard/createCode": 0.1,
                        "giftcard/redeemCode": 0.1,
                        "algo/futures/newOrderVp": 20.001,
                        "algo/futures/newOrderTwap": 20.001,
                        "staking/purchase": 0.1,
                        "staking/redeem": 0.1,
                        "staking/setAutoStaking": 0.1,
                        "portfolio/repay": 20.001
                    },
                    "put": {
                        "userDataStream": 0.1,
                        "userDataStream/isolated": 0.1
                    },
                    "delete": {
                        "margin/openOrders": 0.1,
                        "margin/order": 0.0066667,
                        "margin/orderList": 0.0066667,
                        "margin/isolated/account": 2.0001,
                        "userDataStream": 0.1,
                        "userDataStream/isolated": 0.1,
                        "broker/subAccountApi": 1,
                        "broker/subAccountApi/ipRestriction/ipList": 1,
                        "algo/futures/order": 0.1
                    }
                },
                "sapiV3": {
                    "get": {
                        "sub-account/assets": 1
                    },
                    "post": {
                        "asset/getUserAsset": 0.5
                    }
                },
                "wapi": {
                    "post": {
                        "withdraw": 1,
                        "sub-account/transfer": 1
                    },
                    "get": {
                        "depositHistory": 1,
                        "withdrawHistory": 1,
                        "depositAddress": 1,
                        "accountStatus": 1,
                        "systemStatus": 1,
                        "apiTradingStatus": 1,
                        "userAssetDribbletLog": 1,
                        "tradeFee": 1,
                        "assetDetail": 1,
                        "sub-account/list": 1,
                        "sub-account/transfer/history": 1,
                        "sub-account/assets": 1
                    }
                },
                "dapiPublic": {
                    "get": {
                        "ping": 1,
                        "time": 1,
                        "exchangeInfo": 1,
                        "depth": {
                            "cost": 2,
                            "byLimit": [
                                [
                                    50,
                                    2
                                ],
                                [
                                    100,
                                    5
                                ],
                                [
                                    500,
                                    10
                                ],
                                [
                                    1000,
                                    20
                                ]
                            ]
                        },
                        "trades": 1,
                        "historicalTrades": 20,
                        "aggTrades": 20,
                        "premiumIndex": 10,
                        "fundingRate": 1,
                        "klines": {
                            "cost": 1,
                            "byLimit": [
                                [
                                    99,
                                    1
                                ],
                                [
                                    499,
                                    2
                                ],
                                [
                                    1000,
                                    5
                                ],
                                [
                                    10000,
                                    10
                                ]
                            ]
                        },
                        "continuousKlines": {
                            "cost": 1,
                            "byLimit": [
                                [
                                    99,
                                    1
                                ],
                                [
                                    499,
                                    2
                                ],
                                [
                                    1000,
                                    5
                                ],
                                [
                                    10000,
                                    10
                                ]
                            ]
                        },
                        "indexPriceKlines": {
                            "cost": 1,
                            "byLimit": [
                                [
                                    99,
                                    1
                                ],
                                [
                                    499,
                                    2
                                ],
                                [
                                    1000,
                                    5
                                ],
                                [
                                    10000,
                                    10
                                ]
                            ]
                        },
                        "markPriceKlines": {
                            "cost": 1,
                            "byLimit": [
                                [
                                    99,
                                    1
                                ],
                                [
                                    499,
                                    2
                                ],
                                [
                                    1000,
                                    5
                                ],
                                [
                                    10000,
                                    10
                                ]
                            ]
                        },
                        "ticker/24hr": {
                            "cost": 1,
                            "noSymbol": 40
                        },
                        "ticker/price": {
                            "cost": 1,
                            "noSymbol": 2
                        },
                        "ticker/bookTicker": {
                            "cost": 1,
                            "noSymbol": 2
                        },
                        "openInterest": 1,
                        "pmExchangeInfo": 1
                    }
                },
                "dapiData": {
                    "get": {
                        "openInterestHist": 1,
                        "topLongShortAccountRatio": 1,
                        "topLongShortPositionRatio": 1,
                        "globalLongShortAccountRatio": 1,
                        "takerBuySellVol": 1,
                        "basis": 1
                    }
                },
                "dapiPrivate": {
                    "get": {
                        "positionSide/dual": 30,
                        "order": 1,
                        "openOrder": 1,
                        "openOrders": {
                            "cost": 1,
                            "noSymbol": 5
                        },
                        "allOrders": {
                            "cost": 20,
                            "noSymbol": 40
                        },
                        "balance": 1,
                        "account": 5,
                        "positionMargin/history": 1,
                        "positionRisk": 1,
                        "userTrades": {
                            "cost": 20,
                            "noSymbol": 40
                        },
                        "income": 20,
                        "leverageBracket": 1,
                        "forceOrders": {
                            "cost": 20,
                            "noSymbol": 50
                        },
                        "adlQuantile": 5,
                        "orderAmendment": 1
                    },
                    "post": {
                        "positionSide/dual": 1,
                        "order": 4,
                        "batchOrders": 5,
                        "countdownCancelAll": 10,
                        "leverage": 1,
                        "marginType": 1,
                        "positionMargin": 1,
                        "listenKey": 1
                    },
                    "put": {
                        "listenKey": 1,
                        "order": 1,
                        "batchOrders": 5
                    },
                    "delete": {
                        "order": 1,
                        "allOpenOrders": 1,
                        "batchOrders": 5,
                        "listenKey": 1
                    }
                },
                "dapiPrivateV2": {
                    "get": {
                        "leverageBracket": 1
                    }
                },
                "fapiPublic": {
                    "get": {
                        "ping": 1,
                        "time": 1,
                        "exchangeInfo": 1,
                        "depth": {
                            "cost": 2,
                            "byLimit": [
                                [
                                    50,
                                    2
                                ],
                                [
                                    100,
                                    5
                                ],
                                [
                                    500,
                                    10
                                ],
                                [
                                    1000,
                                    20
                                ]
                            ]
                        },
                        "trades": 1,
                        "historicalTrades": 20,
                        "aggTrades": 20,
                        "klines": {
                            "cost": 1,
                            "byLimit": [
                                [
                                    99,
                                    1
                                ],
                                [
                                    499,
                                    2
                                ],
                                [
                                    1000,
                                    5
                                ],
                                [
                                    10000,
                                    10
                                ]
                            ]
                        },
                        "continuousKlines": {
                            "cost": 1,
                            "byLimit": [
                                [
                                    99,
                                    1
                                ],
                                [
                                    499,
                                    2
                                ],
                                [
                                    1000,
                                    5
                                ],
                                [
                                    10000,
                                    10
                                ]
                            ]
                        },
                        "markPriceKlines": {
                            "cost": 1,
                            "byLimit": [
                                [
                                    99,
                                    1
                                ],
                                [
                                    499,
                                    2
                                ],
                                [
                                    1000,
                                    5
                                ],
                                [
                                    10000,
                                    10
                                ]
                            ]
                        },
                        "indexPriceKlines": {
                            "cost": 1,
                            "byLimit": [
                                [
                                    99,
                                    1
                                ],
                                [
                                    499,
                                    2
                                ],
                                [
                                    1000,
                                    5
                                ],
                                [
                                    10000,
                                    10
                                ]
                            ]
                        },
                        "fundingRate": 1,
                        "premiumIndex": 1,
                        "ticker/24hr": {
                            "cost": 1,
                            "noSymbol": 40
                        },
                        "ticker/price": {
                            "cost": 1,
                            "noSymbol": 2
                        },
                        "ticker/bookTicker": {
                            "cost": 1,
                            "noSymbol": 2
                        },
                        "openInterest": 1,
                        "indexInfo": 1,
                        "apiTradingStatus": {
                            "cost": 1,
                            "noSymbol": 10
                        },
                        "lvtKlines": 1,
                        "pmExchangeInfo": 1
                    }
                },
                "fapiData": {
                    "get": {
                        "openInterestHist": 1,
                        "topLongShortAccountRatio": 1,
                        "topLongShortPositionRatio": 1,
                        "globalLongShortAccountRatio": 1,
                        "takerlongshortRatio": 1
                    }
                },
                "fapiPrivate": {
                    "get": {
                        "forceOrders": {
                            "cost": 20,
                            "noSymbol": 50
                        },
                        "allOrders": 5,
                        "openOrder": 1,
                        "openOrders": 1,
                        "order": 1,
                        "account": 5,
                        "balance": 5,
                        "leverageBracket": 1,
                        "positionMargin/history": 1,
                        "positionRisk": 5,
                        "positionSide/dual": 30,
                        "userTrades": 5,
                        "income": 30,
                        "commissionRate": 20,
                        "apiTradingStatus": 1,
                        "multiAssetsMargin": 30,
                        "apiReferral/ifNewUser": 1,
                        "apiReferral/customization": 1,
                        "apiReferral/userCustomization": 1,
                        "apiReferral/traderNum": 1,
                        "apiReferral/overview": 1,
                        "apiReferral/tradeVol": 1,
                        "apiReferral/rebateVol": 1,
                        "apiReferral/traderSummary": 1,
                        "adlQuantile": 5
                    },
                    "post": {
                        "batchOrders": 5,
                        "positionSide/dual": 1,
                        "positionMargin": 1,
                        "marginType": 1,
                        "order": 4,
                        "leverage": 1,
                        "listenKey": 1,
                        "countdownCancelAll": 10,
                        "multiAssetsMargin": 1,
                        "apiReferral/customization": 1,
                        "apiReferral/userCustomization": 1
                    },
                    "put": {
                        "listenKey": 1
                    },
                    "delete": {
                        "batchOrders": 1,
                        "order": 1,
                        "allOpenOrders": 1,
                        "listenKey": 1
                    }
                },
                "fapiPrivateV2": {
                    "get": {
                        "account": 1,
                        "balance": 1,
                        "positionRisk": 1
                    }
                },
                "vapiPublic": {
                    "get": [
                        "ping",
                        "time",
                        "optionInfo",
                        "exchangeInfo",
                        "index",
                        "ticker",
                        "mark",
                        "depth",
                        "klines",
                        "trades",
                        "historicalTrades"
                    ]
                },
                "vapiPrivate": {
                    "get": [
                        "account",
                        "position",
                        "order",
                        "openOrders",
                        "historyOrders",
                        "userTrades"
                    ],
                    "post": [
                        "transfer",
                        "bill",
                        "order",
                        "batchOrders",
                        "userDataStream",
                        "openAccount"
                    ],
                    "put": [
                        "userDataStream"
                    ],
                    "delete": [
                        "order",
                        "batchOrders",
                        "allOpenOrders",
                        "userDataStream"
                    ]
                },
                "public": {
                    "get": {
                        "ping": 1,
                        "time": 1,
                        "depth": {
                            "cost": 1,
                            "byLimit": [
                                [
                                    100,
                                    1
                                ],
                                [
                                    500,
                                    5
                                ],
                                [
                                    1000,
                                    10
                                ],
                                [
                                    5000,
                                    50
                                ]
                            ]
                        },
                        "trades": 1,
                        "aggTrades": 1,
                        "historicalTrades": 5,
                        "klines": 1,
                        "ticker/24hr": {
                            "cost": 1,
                            "noSymbol": 40
                        },
                        "ticker/price": {
                            "cost": 1,
                            "noSymbol": 2
                        },
                        "ticker/bookTicker": {
                            "cost": 1,
                            "noSymbol": 2
                        },
                        "exchangeInfo": 10
                    },
                    "put": {
                        "userDataStream": 1
                    },
                    "post": {
                        "userDataStream": 1
                    },
                    "delete": {
                        "userDataStream": 1
                    }
                },
                "private": {
                    "get": {
                        "allOrderList": 10,
                        "openOrderList": 3,
                        "orderList": 2,
                        "order": 2,
                        "openOrders": {
                            "cost": 3,
                            "noSymbol": 40
                        },
                        "allOrders": 10,
                        "account": 10,
                        "myTrades": 10,
                        "rateLimit/order": 20
                    },
                    "post": {
                        "order/oco": 1,
                        "order": 1,
                        "order/test": 1
                    },
                    "delete": {
                        "openOrders": 1,
                        "orderList": 1,
                        "order": 1
                    }
                }
            },
            "requiredCredentials": {
                "apiKey": true,
                "secret": true,
                "uid": false,
                "login": false,
                "password": false,
                "twofa": false,
                "privateKey": false,
                "walletAddress": false,
                "token": false
            },
            "currencies": {},
            "timeframes": {
                "1m": "1m",
                "3m": "3m",
                "5m": "5m",
                "15m": "15m",
                "30m": "30m",
                "1h": "1h",
                "2h": "2h",
                "4h": "4h",
                "6h": "6h",
                "8h": "8h",
                "12h": "12h",
                "1d": "1d",
                "3d": "3d",
                "1w": "1w",
                "1M": "1M"
            },
            "fees": {
                "trading": {
                    "tierBased": false,
                    "percentage": true,
                    "taker": 0.001,
                    "maker": 0.001,
                    "feeSide": "get"
                },
                "funding": {
                    "withdraw": {},
                    "deposit": {}
                },
                "future": {
                    "trading": {
                        "feeSide": "quote",
                        "tierBased": true,
                        "percentage": true,
                        "taker": 0.0004,
                        "maker": 0.0002,
                        "tiers": {
                            "taker": [
                                [
                                    0,
                                    0.0004
                                ],
                                [
                                    250,
                                    0.0004
                                ],
                                [
                                    2500,
                                    0.00035
                                ],
                                [
                                    7500,
                                    0.00032
                                ],
                                [
                                    22500,
                                    0.0003
                                ],
                                [
                                    50000,
                                    0.00027
                                ],
                                [
                                    100000,
                                    0.00025
                                ],
                                [
                                    200000,
                                    0.00022
                                ],
                                [
                                    400000,
                                    0.0002
                                ],
                                [
                                    750000,
                                    0.00017
                                ]
                            ],
                            "maker": [
                                [
                                    0,
                                    0.0002
                                ],
                                [
                                    250,
                                    0.00016
                                ],
                                [
                                    2500,
                                    0.00014
                                ],
                                [
                                    7500,
                                    0.00012
                                ],
                                [
                                    22500,
                                    0.0001
                                ],
                                [
                                    50000,
                                    0.00008
                                ],
                                [
                                    100000,
                                    0.00006
                                ],
                                [
                                    200000,
                                    0.00004
                                ],
                                [
                                    400000,
                                    0.00002
                                ],
                                [
                                    750000,
                                    0
                                ]
                            ]
                        }
                    }
                },
                "delivery": {
                    "trading": {
                        "feeSide": "base",
                        "tierBased": true,
                        "percentage": true,
                        "taker": 0.0005,
                        "maker": 0.0001,
                        "tiers": {
                            "taker": [
                                [
                                    0,
                                    0.0005
                                ],
                                [
                                    250,
                                    0.00045
                                ],
                                [
                                    2500,
                                    0.0004
                                ],
                                [
                                    7500,
                                    0.0003
                                ],
                                [
                                    22500,
                                    0.00025
                                ],
                                [
                                    50000,
                                    0.00024
                                ],
                                [
                                    100000,
                                    0.00024
                                ],
                                [
                                    200000,
                                    0.00024
                                ],
                                [
                                    400000,
                                    0.00024
                                ],
                                [
                                    750000,
                                    0.00024
                                ]
                            ],
                            "maker": [
                                [
                                    0,
                                    0.0001
                                ],
                                [
                                    250,
                                    0.00008
                                ],
                                [
                                    2500,
                                    0.00005
                                ],
                                [
                                    7500,
                                    0.000003
                                ],
                                [
                                    22500,
                                    0
                                ],
                                [
                                    50000,
                                    -0.00005
                                ],
                                [
                                    100000,
                                    -0.00006
                                ],
                                [
                                    200000,
                                    -0.00007
                                ],
                                [
                                    400000,
                                    -0.00008
                                ],
                                [
                                    750000,
                                    -0.00009
                                ]
                            ]
                        }
                    }
                },
                "option": {}
            },
            "status": {
                "status": "ok"
            },
            "exceptions": {
                "exact": {},
                "broad": {}
            },
            "httpExceptions": {},
            "commonCurrencies": {
                "XBT": "BTC",
                "BCC": "BCC",
                "BCHABC": "BCH",
                "BCHSV": "BSV",
                "YOYO": "YOYOW"
            },
            "precisionMode": 0,
            "paddingMode": 0,
            "limits": {
                "leverage": {},
                "amount": {},
                "price": {},
                "cost": {}
            },
            "depth": 1,
            "options": {
                "fetchCurrencies": true,
                "defaultTimeInForce": "GTC",
                "defaultType": "delivery",
                "hasAlreadyAuthenticatedSuccessfully": false,
                "warnOnFetchOpenOrdersWithoutSymbol": true,
                "throwMarginModeAlreadySet": false,
                "fetchPositions": "positionRisk",
                "recvWindow": 10000,
                "timeDifference": 0,
                "adjustForTimeDifference": false,
                "newOrderRespType": {
                    "market": "FULL",
                    "limit": "FULL"
                },
                "settle": {
                    "USDT": "linear",
                    "BUSD": "linear"
                },
                "quoteOrderQty": true,
                "broker": {
                    "spot": "x-R4BD3S82",
                    "margin": "x-R4BD3S82",
                    "future": "x-xcKtGhcu",
                    "delivery": "x-xcKtGhcu"
                },
                "accountsByType": {
                    "main": "MAIN",
                    "spot": "MAIN",
                    "funding": "FUNDING",
                    "margin": "MARGIN",
                    "future": "UMFUTURE",
                    "delivery": "CMFUTURE",
                    "mining": "MINING"
                },
                "accountsById": {
                    "MAIN": "spot",
                    "FUNDING": "funding",
                    "MARGIN": "margin",
                    "UMFUTURE": "future",
                    "CMFUTURE": "delivery",
                    "MINING": "mining"
                },
                "networks": {
                    "ERC20": "ETH",
                    "TRC20": "TRX",
                    "BEP2": "BNB",
                    "BEP20": "BSC",
                    "OMNI": "OMNI",
                    "EOS": "EOS",
                    "SPL": "SOL"
                },
                "reverseNetworks": {
                    "tronscan.org": "TRC20",
                    "etherscan.io": "ERC20",
                    "bscscan.com": "BSC",
                    "explorer.binance.org": "BEP2",
                    "bithomp.com": "XRP",
                    "bloks.io": "EOS",
                    "stellar.expert": "XLM",
                    "blockchair.com/bitcoin": "BTC",
                    "blockchair.com/bitcoin-cash": "BCH",
                    "blockchair.com/ecash": "XEC",
                    "explorer.litecoin.net": "LTC",
                    "explorer.avax.network": "AVAX",
                    "solscan.io": "SOL",
                    "polkadot.subscan.io": "DOT",
                    "dashboard.internetcomputer.org": "ICP",
                    "explorer.chiliz.com": "CHZ",
                    "cardanoscan.io": "ADA",
                    "mainnet.theoan.com": "AION",
                    "algoexplorer.io": "ALGO",
                    "explorer.ambrosus.com": "AMB",
                    "viewblock.io/zilliqa": "ZIL",
                    "viewblock.io/arweave": "AR",
                    "explorer.ark.io": "ARK",
                    "atomscan.com": "ATOM",
                    "www.mintscan.io": "CTK",
                    "explorer.bitcoindiamond.org": "BCD",
                    "btgexplorer.com": "BTG",
                    "bts.ai": "BTS",
                    "explorer.celo.org": "CELO",
                    "explorer.nervos.org": "CKB",
                    "cerebro.cortexlabs.ai": "CTXC",
                    "chainz.cryptoid.info": "VIA",
                    "explorer.dcrdata.org": "DCR",
                    "digiexplorer.info": "DGB",
                    "dock.subscan.io": "DOCK",
                    "dogechain.info": "DOGE",
                    "explorer.elrond.com": "EGLD",
                    "blockscout.com": "ETC",
                    "explore-fetchhub.fetch.ai": "FET",
                    "filfox.info": "FIL",
                    "fio.bloks.io": "FIO",
                    "explorer.firo.org": "FIRO",
                    "neoscan.io": "NEO",
                    "ftmscan.com": "FTM",
                    "explorer.gochain.io": "GO",
                    "block.gxb.io": "GXS",
                    "hash-hash.info": "HBAR",
                    "www.hiveblockexplorer.com": "HIVE",
                    "explorer.helium.com": "HNT",
                    "tracker.icon.foundation": "ICX",
                    "www.iostabc.com": "IOST",
                    "explorer.iota.org": "IOTA",
                    "iotexscan.io": "IOTX",
                    "irishub.iobscan.io": "IRIS",
                    "kava.mintscan.io": "KAVA",
                    "scope.klaytn.com": "KLAY",
                    "kmdexplorer.io": "KMD",
                    "kusama.subscan.io": "KSM",
                    "explorer.lto.network": "LTO",
                    "polygonscan.com": "POLYGON",
                    "explorer.ont.io": "ONT",
                    "minaexplorer.com": "MINA",
                    "nanolooker.com": "NANO",
                    "explorer.nebulas.io": "NAS",
                    "explorer.nbs.plus": "NBS",
                    "explorer.nebl.io": "NEBL",
                    "nulscan.io": "NULS",
                    "nxscan.com": "NXS",
                    "explorer.harmony.one": "ONE",
                    "explorer.poa.network": "POA",
                    "qtum.info": "QTUM",
                    "explorer.rsk.co": "RSK",
                    "www.oasisscan.com": "ROSE",
                    "ravencoin.network": "RVN",
                    "sc.tokenview.com": "SC",
                    "secretnodes.com": "SCRT",
                    "explorer.skycoin.com": "SKY",
                    "steemscan.com": "STEEM",
                    "explorer.stacks.co": "STX",
                    "www.thetascan.io": "THETA",
                    "scan.tomochain.com": "TOMO",
                    "explore.vechain.org": "VET",
                    "explorer.vite.net": "VITE",
                    "www.wanscan.org": "WAN",
                    "wavesexplorer.com": "WAVES",
                    "wax.eosx.io": "WAXP",
                    "waltonchain.pro": "WTC",
                    "chain.nem.ninja": "XEM",
                    "verge-blockchain.info": "XVG",
                    "explorer.yoyow.org": "YOYOW",
                    "explorer.zcha.in": "ZEC",
                    "explorer.zensystem.io": "ZEN"
                },
                "impliedNetworks": {
                    "ETH": {
                        "ERC20": "ETH"
                    },
                    "TRX": {
                        "TRC20": "TRX"
                    }
                },
                "legalMoney": {
                    "MXN": true,
                    "UGX": true,
                    "SEK": true,
                    "CHF": true,
                    "VND": true,
                    "AED": true,
                    "DKK": true,
                    "KZT": true,
                    "HUF": true,
                    "PEN": true,
                    "PHP": true,
                    "USD": true,
                    "TRY": true,
                    "EUR": true,
                    "NGN": true,
                    "PLN": true,
                    "BRL": true,
                    "ZAR": true,
                    "KES": true,
                    "ARS": true,
                    "RUB": true,
                    "AUD": true,
                    "NOK": true,
                    "CZK": true,
                    "GBP": true,
                    "UAH": true,
                    "GHS": true,
                    "HKD": true,
                    "CAD": true,
                    "INR": true,
                    "JPY": true,
                    "NZD": true
                }
            }
        }"###).unwrap())
    }

    async fn transfer_in(&mut self, mut code: Value, mut amount: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        // transfer from spot wallet to coinm futures wallet
        return self.futures_transfer(code.clone(), amount.clone(), Value::from(3), params.clone()).await;
    }

    async fn transfer_out(&mut self, mut code: Value, mut amount: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        // transfer from coinm futures wallet to spot wallet
        return self.futures_transfer(code.clone(), amount.clone(), Value::from(4), params.clone()).await;
    }

    fn safe_ledger_entry(&self, mut entry: Value, mut currency: Value) -> Value {
        currency = Binancecoinm::safe_currency(self, Value::Undefined, currency.clone());
        let mut direction: Value = self.safe_string(entry.clone(), Value::from("direction"), Value::Undefined);
        let mut before: Value = self.safe_string(entry.clone(), Value::from("before"), Value::Undefined);
        let mut after: Value = self.safe_string(entry.clone(), Value::from("after"), Value::Undefined);
        let mut amount: Value = self.safe_string(entry.clone(), Value::from("amount"), Value::Undefined);
        if amount.clone().is_nonnullish() {
            if before.clone().is_nullish() && after.clone().is_nonnullish() {
                before = Precise::string_sub(after.clone(), amount.clone());
            } else if before.clone().is_nonnullish() && after.clone().is_nullish() {
                after = Precise::string_add(before.clone(), amount.clone());
            };
        };
        if before.clone().is_nonnullish() && after.clone().is_nonnullish() {
            if direction.clone().is_nullish() {
                if Precise::string_gt(before.clone(), after.clone()) {
                    direction = Value::from("out");
                };
                if Precise::string_gt(after.clone(), before.clone()) {
                    direction = Value::from("in");
                };
            };
        };
        let mut fee: Value = self.safe_value(entry.clone(), Value::from("fee"), Value::Undefined);
        if fee.clone().is_nonnullish() {
            fee.set("cost".into(), Binancecoinm::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
        };
        let mut timestamp: Value = self.safe_integer(entry.clone(), Value::from("timestamp"), Value::Undefined);
        return Value::Json(normalize(&Value::Json(json!({
            "id": self.safe_string(entry.clone(), Value::from("id"), Value::Undefined),
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "direction": direction,
            "account": self.safe_string(entry.clone(), Value::from("account"), Value::Undefined),
            "referenceId": self.safe_string(entry.clone(), Value::from("referenceId"), Value::Undefined),
            "referenceAccount": self.safe_string(entry.clone(), Value::from("referenceAccount"), Value::Undefined),
            "type": self.safe_string(entry.clone(), Value::from("type"), Value::Undefined),
            "currency": currency.get(Value::from("code")),
            "amount": self.parse_number(amount.clone(), Value::Undefined),
            "before": self.parse_number(before.clone(), Value::Undefined),
            "after": self.parse_number(after.clone(), Value::Undefined),
            "status": self.safe_string(entry.clone(), Value::from("status"), Value::Undefined),
            "fee": fee,
            "info": entry
        }))).unwrap());
    }

    fn set_markets(&mut self, mut markets: Value, mut currencies: Value) -> Value {
        let mut values: Value = Value::new_array();
        let mut market_values: Value = self.to_array(markets.clone());
        let mut i: usize = 0;
        while i < market_values.len() {
            let mut market: Value = self.deep_extend_4(Binancecoinm::safe_market(self, Value::Undefined, Value::Undefined, Value::Undefined), Value::Json(normalize(&Value::Json(json!({
                "precision": self.get("precision".into()),
                "limits": self.get("limits".into())
            }))).unwrap()), self.get("fees".into()).get(Value::from("trading")), market_values.get(i.into()));
            values.push(market.clone());
            i += 1;
        };
        self.set("markets".into(), self.index_by(values.clone(), Value::from("symbol"), Value::Undefined));
        self.set("markets_by_id".into(), self.index_by(markets.clone(), Value::from("id"), Value::Undefined));
        let mut markets_sorted_by_symbol: Value = self.keysort(self.get("markets".into()), Value::Undefined);
        let mut markets_sorted_by_id: Value = self.keysort(self.get("markets_by_id".into()), Value::Undefined);
        self.set("symbols".into(), Object::keys(markets_sorted_by_symbol.clone()));
        self.set("ids".into(), Object::keys(markets_sorted_by_id.clone()));
        if currencies.clone().is_nonnullish() {
            self.set("currencies".into(), self.deep_extend_2(self.get("currencies".into()), currencies.clone()));
        } else {
            let mut base_currencies: Value = Value::new_array();
            let mut quote_currencies: Value = Value::new_array();
            let mut i: usize = 0;
            while i < values.len() {
                let mut market: Value = values.get(i.into());
                let mut default_currency_precision: Value = if self.get("precision_mode".into()) == DECIMAL_PLACES.into() { Value::from(8) } else { self.parse_number(Value::from("0.00000001"), Value::Undefined) };
                let mut market_precision: Value = self.safe_value(market.clone(), Value::from("precision"), Value::new_object());
                if market.contains_key(Value::from("base")) {
                    let mut currency_precision: Value = self.safe_value_2(market_precision.clone(), Value::from("base"), Value::from("amount"), default_currency_precision.clone());
                    let mut currency: Value = Value::Json(normalize(&Value::Json(json!({
                        "id": self.safe_string_2(market.clone(), Value::from("baseId"), Value::from("base"), Value::Undefined),
                        "numericId": self.safe_string(market.clone(), Value::from("baseNumericId"), Value::Undefined),
                        "code": self.safe_string(market.clone(), Value::from("base"), Value::Undefined),
                        "precision": currency_precision
                    }))).unwrap());
                    base_currencies.push(currency.clone());
                };
                if market.contains_key(Value::from("quote")) {
                    let mut currency_precision: Value = self.safe_value_2(market_precision.clone(), Value::from("quote"), Value::from("amount"), default_currency_precision.clone());
                    let mut currency: Value = Value::Json(normalize(&Value::Json(json!({
                        "id": self.safe_string_2(market.clone(), Value::from("quoteId"), Value::from("quote"), Value::Undefined),
                        "numericId": self.safe_string(market.clone(), Value::from("quoteNumericId"), Value::Undefined),
                        "code": self.safe_string(market.clone(), Value::from("quote"), Value::Undefined),
                        "precision": currency_precision
                    }))).unwrap());
                    quote_currencies.push(currency.clone());
                };
                i += 1;
            };
            base_currencies = self.sort_by(base_currencies.clone(), Value::from("code"), Value::Undefined, Value::Undefined);
            quote_currencies = self.sort_by(quote_currencies.clone(), Value::from("code"), Value::Undefined, Value::Undefined);
            self.set("base_currencies".into(), self.index_by(base_currencies.clone(), Value::from("code"), Value::Undefined));
            self.set("quote_currencies".into(), self.index_by(quote_currencies.clone(), Value::from("code"), Value::Undefined));
            let mut all_currencies: Value = self.array_concat(base_currencies.clone(), quote_currencies.clone());
            let mut grouped_currencies: Value = self.group_by(all_currencies.clone(), Value::from("code"), Value::Undefined);
            let mut codes: Value = Object::keys(grouped_currencies.clone());
            let mut resulting_currencies: Value = Value::new_array();
            let mut i: usize = 0;
            while i < codes.len() {
                let mut code: Value = codes.get(i.into());
                let mut grouped_currencies_code: Value = self.safe_value(grouped_currencies.clone(), code.clone(), Value::new_array());
                let mut highest_precision_currency: Value = self.safe_value(grouped_currencies_code.clone(), Value::from(0), Value::Undefined);
                let mut j: usize = 1;
                while j < grouped_currencies_code.len() {
                    let mut current_currency: Value = grouped_currencies_code.get(j.into());
                    if self.get("precision_mode".into()) == TICK_SIZE.into() {
                        highest_precision_currency = if current_currency.get(Value::from("precision")) < highest_precision_currency.get(Value::from("precision")) { current_currency.clone() } else { highest_precision_currency.clone() };
                    } else {
                        highest_precision_currency = if current_currency.get(Value::from("precision")) > highest_precision_currency.get(Value::from("precision")) { current_currency.clone() } else { highest_precision_currency.clone() };
                    };
                    j += 1;
                };
                resulting_currencies.push(highest_precision_currency.clone());
                i += 1;
            };
            let mut sorted_currencies: Value = self.sort_by(resulting_currencies.clone(), Value::from("code"), Value::Undefined, Value::Undefined);
            self.set("currencies".into(), self.deep_extend_2(self.get("currencies".into()), self.index_by(sorted_currencies.clone(), Value::from("code"), Value::Undefined)));
        };
        self.set("currencies_by_id".into(), self.index_by(self.get("currencies".into()), Value::from("id"), Value::Undefined));
        let mut currencies_sorted_by_code: Value = self.keysort(self.get("currencies".into()), Value::Undefined);
        self.set("codes".into(), Object::keys(currencies_sorted_by_code.clone()));
        return self.get("markets".into());
    }

    fn safe_balance(&self, mut balance: Value) -> Value {
        let mut balances: Value = self.omit(balance.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("info").into(), Value::from("timestamp").into(), Value::from("datetime").into(), Value::from("free").into(), Value::from("used").into(), Value::from("total").into()])));
        let mut codes: Value = Object::keys(balances.clone());
        balance.set("free".into(), Value::new_object());
        balance.set("used".into(), Value::new_object());
        balance.set("total".into(), Value::new_object());
        let mut i: usize = 0;
        while i < codes.len() {
            let mut code: Value = codes.get(i.into());
            let mut total: Value = self.safe_string(balance.get(code.clone()), Value::from("total"), Value::Undefined);
            let mut free: Value = self.safe_string(balance.get(code.clone()), Value::from("free"), Value::Undefined);
            let mut used: Value = self.safe_string(balance.get(code.clone()), Value::from("used"), Value::Undefined);
            if total.clone().is_nullish() && free.clone().is_nonnullish() && used.clone().is_nonnullish() {
                total = Precise::string_add(free.clone(), used.clone());
            };
            if free.clone().is_nullish() && total.clone().is_nonnullish() && used.clone().is_nonnullish() {
                free = Precise::string_sub(total.clone(), used.clone());
            };
            if used.clone().is_nullish() && total.clone().is_nonnullish() && free.clone().is_nonnullish() {
                used = Precise::string_sub(total.clone(), free.clone());
            };
            balance.get(code.clone()).set("free".into(), self.parse_number(free.clone(), Value::Undefined));
            balance.get(code.clone()).set("used".into(), self.parse_number(used.clone(), Value::Undefined));
            balance.get(code.clone()).set("total".into(), self.parse_number(total.clone(), Value::Undefined));
            balance.get(Value::from("free")).set(code.clone(), balance.get(code.clone()).get(Value::from("free")));
            balance.get(Value::from("used")).set(code.clone(), balance.get(code.clone()).get(Value::from("used")));
            balance.get(Value::from("total")).set(code.clone(), balance.get(code.clone()).get(Value::from("total")));
            i += 1;
        };
        return balance.clone();
    }

    fn safe_order(&mut self, mut order: Value, mut market: Value) -> Value {
        // parses numbers as strings
        // it is important pass the trades as unparsed rawTrades
        let mut amount: Value = self.omit_zero(self.safe_string(order.clone(), Value::from("amount"), Value::Undefined));
        let mut remaining: Value = self.safe_string(order.clone(), Value::from("remaining"), Value::Undefined);
        let mut filled: Value = self.safe_string(order.clone(), Value::from("filled"), Value::Undefined);
        let mut cost: Value = self.safe_string(order.clone(), Value::from("cost"), Value::Undefined);
        let mut average: Value = self.omit_zero(self.safe_string(order.clone(), Value::from("average"), Value::Undefined));
        let mut price: Value = self.omit_zero(self.safe_string(order.clone(), Value::from("price"), Value::Undefined));
        let mut last_trade_time_timestamp: Value = self.safe_integer(order.clone(), Value::from("lastTradeTimestamp"), Value::Undefined);
        let mut parse_filled: Value = (filled.clone().is_nullish()).into();
        let mut parse_cost: Value = (cost.clone().is_nullish()).into();
        let mut parse_last_trade_time_timestamp: Value = (last_trade_time_timestamp.clone().is_nullish()).into();
        let mut fee: Value = self.safe_value(order.clone(), Value::from("fee"), Value::Undefined);
        let mut parse_fee: Value = (fee.clone().is_nullish()).into();
        let mut parse_fees: Value = (self.safe_value(order.clone(), Value::from("fees"), Value::Undefined).is_nullish()).into();
        let mut should_parse_fees: Value = (parse_fee.is_truthy() || parse_fees.is_truthy()).into();
        let mut fees: Value = self.safe_value(order.clone(), Value::from("fees"), Value::new_array());
        let mut trades: Value = Value::new_array();
        if parse_filled.is_truthy() || parse_cost.is_truthy() || should_parse_fees.is_truthy() {
            let mut raw_trades: Value = self.safe_value(order.clone(), Value::from("trades"), trades.clone());
            let mut old_number: Value = self.get("number".into());
            // we parse trades as strings here!
            self.set_number_mode("String".into());
            trades = Binancecoinm::parse_trades(self, raw_trades.clone(), market.clone(), Value::Undefined, Value::Undefined, Value::Json(normalize(&Value::Json(json!({
                "symbol": order.get(Value::from("symbol")),
                "side": order.get(Value::from("side")),
                "type": order.get(Value::from("type")),
                "order": order.get(Value::from("id"))
            }))).unwrap()));
            self.set("number".into(), old_number.clone());
            let mut trades_length: Value = Value::from(0);
            let mut is_array: Value = Array::is_array(trades.clone());
            if is_array.is_truthy() {
                trades_length = trades.len().into();
            };
            if is_array.is_truthy() && trades_length.clone() > Value::from(0) {
                // move properties that are defined in trades up into the order
                if order.get(Value::from("symbol")).is_nullish() {
                    order.set("symbol".into(), trades.get(Value::from(0)).get(Value::from("symbol")));
                };
                if order.get(Value::from("side")).is_nullish() {
                    order.set("side".into(), trades.get(Value::from(0)).get(Value::from("side")));
                };
                if order.get(Value::from("type")).is_nullish() {
                    order.set("type".into(), trades.get(Value::from(0)).get(Value::from("type")));
                };
                if order.get(Value::from("id")).is_nullish() {
                    order.set("id".into(), trades.get(Value::from(0)).get(Value::from("order")));
                };
                if parse_filled.is_truthy() {
                    filled = Value::from("0");
                };
                if parse_cost.is_truthy() {
                    cost = Value::from("0");
                };
                let mut i: usize = 0;
                while i < trades.len() {
                    let mut trade: Value = trades.get(i.into());
                    let mut trade_amount: Value = self.safe_string(trade.clone(), Value::from("amount"), Value::Undefined);
                    if parse_filled.is_truthy() && trade_amount.clone().is_nonnullish() {
                        filled = Precise::string_add(filled.clone(), trade_amount.clone());
                    };
                    let mut trade_cost: Value = self.safe_string(trade.clone(), Value::from("cost"), Value::Undefined);
                    if parse_cost.is_truthy() && trade_cost.clone().is_nonnullish() {
                        cost = Precise::string_add(cost.clone(), trade_cost.clone());
                    };
                    let mut trade_timestamp: Value = self.safe_value(trade.clone(), Value::from("timestamp"), Value::Undefined);
                    if parse_last_trade_time_timestamp.is_truthy() && trade_timestamp.clone().is_nonnullish() {
                        if last_trade_time_timestamp.clone().is_nullish() {
                            last_trade_time_timestamp = trade_timestamp.clone();
                        } else {
                            last_trade_time_timestamp = Math::max(last_trade_time_timestamp.clone(), trade_timestamp.clone());
                        };
                    };
                    if should_parse_fees.is_truthy() {
                        let mut trade_fees: Value = self.safe_value(trade.clone(), Value::from("fees"), Value::Undefined);
                        if trade_fees.clone().is_nonnullish() {
                            let mut j: usize = 0;
                            while j < trade_fees.len() {
                                let mut trade_fee: Value = trade_fees.get(j.into());
                                fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                                j += 1;
                            };
                        } else {
                            let mut trade_fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
                            if trade_fee.clone().is_nonnullish() {
                                fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                            };
                        };
                    };
                    i += 1;
                };
            };
        };
        if should_parse_fees.is_truthy() {
            let mut reduced_fees: Value = if self.get("reduce_fees".into()).is_truthy() { Binancecoinm::reduce_fees_by_currency(self, fees.clone()) } else { fees.clone() };
            let mut reduced_length: Value = reduced_fees.len().into();
            let mut i: usize = 0;
            while i < reduced_length.clone().into() {
                reduced_fees.get(i.into()).set("cost".into(), Binancecoinm::safe_number(self, reduced_fees.get(i.into()), Value::from("cost"), Value::Undefined));
                if reduced_fees.get(i.into()).contains_key(Value::from("rate")) {
                    reduced_fees.get(i.into()).set("rate".into(), Binancecoinm::safe_number(self, reduced_fees.get(i.into()), Value::from("rate"), Value::Undefined));
                };
                i += 1;
            };
            if !parse_fee.is_truthy() && reduced_length.clone() == Value::from(0) {
                fee.set("cost".into(), Binancecoinm::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
                if fee.contains_key(Value::from("rate")) {
                    fee.set("rate".into(), Binancecoinm::safe_number(self, fee.clone(), Value::from("rate"), Value::Undefined));
                };
                reduced_fees.push(fee.clone());
            };
            order.set("fees".into(), reduced_fees.clone());
            if parse_fee.is_truthy() && reduced_length.clone() == Value::from(1) {
                order.set("fee".into(), reduced_fees.get(Value::from(0)));
            };
        };
        if amount.clone().is_nullish() {
            // ensure amount = filled + remaining
            if filled.clone().is_nonnullish() && remaining.clone().is_nonnullish() {
                amount = Precise::string_add(filled.clone(), remaining.clone());
            } else if self.safe_string(order.clone(), Value::from("status"), Value::Undefined) == Value::from("closed") {
                amount = filled.clone();
            };
        };
        if filled.clone().is_nullish() {
            if amount.clone().is_nonnullish() && remaining.clone().is_nonnullish() {
                filled = Precise::string_sub(amount.clone(), remaining.clone());
            };
        };
        if remaining.clone().is_nullish() {
            if amount.clone().is_nonnullish() && filled.clone().is_nonnullish() {
                remaining = Precise::string_sub(amount.clone(), filled.clone());
            };
        };
        // ensure that the average field is calculated correctly
        if average.clone().is_nullish() {
            if filled.clone().is_nonnullish() && cost.clone().is_nonnullish() && Precise::string_gt(filled.clone(), Value::from("0")) {
                average = Precise::string_div(cost.clone(), filled.clone(), Value::Undefined);
            };
        };
        // also ensure the cost field is calculated correctly
        let mut cost_price_exists: Value = (average.clone().is_nonnullish() || price.clone().is_nonnullish()).into();
        if parse_cost.is_truthy() && filled.clone().is_nonnullish() && cost_price_exists.is_truthy() {
            let mut multiply_price: Value = Value::Undefined;
            if average.clone().is_nullish() {
                multiply_price = price.clone();
            } else {
                multiply_price = average.clone();
            };
            // contract trading
            let mut contract_size: Value = self.safe_string(market.clone(), Value::from("contractSize"), Value::Undefined);
            if contract_size.clone().is_nonnullish() {
                let mut inverse: Value = self.safe_value(market.clone(), Value::from("inverse"), false.into());
                if inverse.is_truthy() {
                    multiply_price = Precise::string_div(Value::from("1"), multiply_price.clone(), Value::Undefined);
                };
                multiply_price = Precise::string_mul(multiply_price.clone(), contract_size.clone());
            };
            cost = Precise::string_mul(multiply_price.clone(), filled.clone());
        };
        // support for market orders
        let mut order_type: Value = self.safe_value(order.clone(), Value::from("type"), Value::Undefined);
        let mut empty_price: Value = (price.clone().is_nullish() || Precise::string_equals(price.clone(), Value::from("0"))).into();
        if empty_price.is_truthy() && order_type.clone() == Value::from("market") {
            price = average.clone();
        };
        // we have trades with string values at this point so we will mutate them
        let mut i: usize = 0;
        while i < trades.len() {
            let mut entry: Value = trades.get(i.into());
            entry.set("amount".into(), Binancecoinm::safe_number(self, entry.clone(), Value::from("amount"), Value::Undefined));
            entry.set("price".into(), Binancecoinm::safe_number(self, entry.clone(), Value::from("price"), Value::Undefined));
            entry.set("cost".into(), Binancecoinm::safe_number(self, entry.clone(), Value::from("cost"), Value::Undefined));
            let mut fee: Value = self.safe_value(entry.clone(), Value::from("fee"), Value::new_object());
            fee.set("cost".into(), Binancecoinm::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
            if fee.contains_key(Value::from("rate")) {
                fee.set("rate".into(), Binancecoinm::safe_number(self, fee.clone(), Value::from("rate"), Value::Undefined));
            };
            entry.set("fee".into(), fee.clone());
            i += 1;
        };
        // timeInForceHandling
        let mut time_in_force: Value = self.safe_string(order.clone(), Value::from("timeInForce"), Value::Undefined);
        if time_in_force.clone().is_nullish() {
            if self.safe_string(order.clone(), Value::from("type"), Value::Undefined) == Value::from("market") {
                time_in_force = Value::from("IOC");
            };
            // allow postOnly override
            if self.safe_value(order.clone(), Value::from("postOnly"), false.into()).is_truthy() {
                time_in_force = Value::from("PO");
            };
        };
        return extend_2(order.clone(), Value::Json(normalize(&Value::Json(json!({
            "lastTradeTimestamp": last_trade_time_timestamp,
            "price": self.parse_number(price.clone(), Value::Undefined),
            "amount": self.parse_number(amount.clone(), Value::Undefined),
            "cost": self.parse_number(cost.clone(), Value::Undefined),
            "average": self.parse_number(average.clone(), Value::Undefined),
            "filled": self.parse_number(filled.clone(), Value::Undefined),
            "remaining": self.parse_number(remaining.clone(), Value::Undefined),
            "timeInForce": time_in_force,
            "trades": trades
        }))).unwrap()));
    }

    fn parse_orders(&mut self, mut orders: Value, mut market: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        //
        // the value of orders is either a dict or a list
        //
        // dict
        //
        //     {
        //         'id1': { ... },
        //         'id2': { ... },
        //         'id3': { ... },
        //         ...
        //     }
        //
        // list
        //
        //     [
        //         { 'id': 'id1', ... },
        //         { 'id': 'id2', ... },
        //         { 'id': 'id3', ... },
        //         ...
        //     ]
        //
        let mut results: Value = Value::new_array();
        if Array::is_array(orders.clone()).is_truthy() {
            let mut i: usize = 0;
            while i < orders.len() {
                let mut order: Value = extend_2(self.parse_order(orders.get(i.into()), market.clone()), params.clone());
                results.push(order.clone());
                i += 1;
            };
        } else {
            let mut ids: Value = Object::keys(orders.clone());
            let mut i: usize = 0;
            while i < ids.len() {
                let mut id: Value = ids.get(i.into());
                let mut order: Value = extend_2(self.parse_order(extend_2(Value::Json(normalize(&Value::Json(json!({
                    "id": id
                }))).unwrap()), orders.get(id.clone())), market.clone()), params.clone());
                results.push(order.clone());
                i += 1;
            };
        };
        results = self.sort_by(results.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut symbol: Value = if market.clone().is_nonnullish() { market.get(Value::from("symbol")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Binancecoinm::filter_by_symbol_since_limit(self, results.clone(), symbol.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn calculate_fee(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut taker_or_maker: Value, mut params: Value) -> Value {
        taker_or_maker = taker_or_maker.or_default(Value::from("taker"));
        params = params.or_default(Value::new_object());
        let mut market: Value = self.get("markets".into()).get(symbol.clone());
        let mut fee_side: Value = self.safe_string(market.clone(), Value::from("feeSide"), Value::from("quote"));
        let mut key: Value = Value::from("quote");
        let mut cost: Value = Value::Undefined;
        if fee_side.clone() == Value::from("quote") {
            // the fee is always in quote currency
            cost = amount.clone() * price.clone();
        } else if fee_side.clone() == Value::from("base") {
            // the fee is always in base currency
            cost = amount.clone();
        } else if fee_side.clone() == Value::from("get") {
            // the fee is always in the currency you get
            cost = amount.clone();
            if side.clone() == Value::from("sell") {
                cost = cost *  price.clone();
            } else {
                key = Value::from("base");
            };
        } else if fee_side.clone() == Value::from("give") {
            // the fee is always in the currency you give
            cost = amount.clone();
            if side.clone() == Value::from("buy") {
                cost = cost *  price.clone();
            } else {
                key = Value::from("base");
            };
        };
        let mut rate: Value = market.get(taker_or_maker.clone());
        if cost.clone().is_nonnullish() {
            cost = cost *  rate.clone();
        };
        return Value::Json(normalize(&Value::Json(json!({
            "type": taker_or_maker,
            "currency": market.get(key.clone()),
            "rate": rate,
            "cost": cost
        }))).unwrap());
    }

    fn safe_trade(&mut self, mut trade: Value, mut market: Value) -> Value {
        let mut amount: Value = self.safe_string(trade.clone(), Value::from("amount"), Value::Undefined);
        let mut price: Value = self.safe_string(trade.clone(), Value::from("price"), Value::Undefined);
        let mut cost: Value = self.safe_string(trade.clone(), Value::from("cost"), Value::Undefined);
        if cost.clone().is_nullish() {
            // contract trading
            let mut contract_size: Value = self.safe_string(market.clone(), Value::from("contractSize"), Value::Undefined);
            let mut multiply_price: Value = price.clone();
            if contract_size.clone().is_nonnullish() {
                let mut inverse: Value = self.safe_value(market.clone(), Value::from("inverse"), false.into());
                if inverse.is_truthy() {
                    multiply_price = Precise::string_div(Value::from("1"), price.clone(), Value::Undefined);
                };
                multiply_price = Precise::string_mul(multiply_price.clone(), contract_size.clone());
            };
            cost = Precise::string_mul(multiply_price.clone(), amount.clone());
        };
        let mut parse_fee: Value = (self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined).is_nullish()).into();
        let mut parse_fees: Value = (self.safe_value(trade.clone(), Value::from("fees"), Value::Undefined).is_nullish()).into();
        let mut should_parse_fees: Value = (parse_fee.is_truthy() || parse_fees.is_truthy()).into();
        let mut fees: Value = Value::new_array();
        if should_parse_fees.is_truthy() {
            let mut trade_fees: Value = self.safe_value(trade.clone(), Value::from("fees"), Value::Undefined);
            if trade_fees.clone().is_nonnullish() {
                let mut j: usize = 0;
                while j < trade_fees.len() {
                    let mut trade_fee: Value = trade_fees.get(j.into());
                    fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                    j += 1;
                };
            } else {
                let mut trade_fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
                if trade_fee.clone().is_nonnullish() {
                    fees.push(extend_2(Value::new_object(), trade_fee.clone()));
                };
            };
        };
        let mut fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
        if should_parse_fees.is_truthy() {
            let mut reduced_fees: Value = if self.get("reduce_fees".into()).is_truthy() { Binancecoinm::reduce_fees_by_currency(self, fees.clone()) } else { fees.clone() };
            let mut reduced_length: Value = reduced_fees.len().into();
            let mut i: usize = 0;
            while i < reduced_length.clone().into() {
                reduced_fees.get(i.into()).set("cost".into(), Binancecoinm::safe_number(self, reduced_fees.get(i.into()), Value::from("cost"), Value::Undefined));
                if reduced_fees.get(i.into()).contains_key(Value::from("rate")) {
                    reduced_fees.get(i.into()).set("rate".into(), Binancecoinm::safe_number(self, reduced_fees.get(i.into()), Value::from("rate"), Value::Undefined));
                };
                i += 1;
            };
            if !parse_fee.is_truthy() && reduced_length.clone() == Value::from(0) {
                fee.set("cost".into(), Binancecoinm::safe_number(self, fee.clone(), Value::from("cost"), Value::Undefined));
                if fee.contains_key(Value::from("rate")) {
                    fee.set("rate".into(), Binancecoinm::safe_number(self, fee.clone(), Value::from("rate"), Value::Undefined));
                };
                reduced_fees.push(fee.clone());
            };
            if parse_fees.is_truthy() {
                trade.set("fees".into(), reduced_fees.clone());
            };
            if parse_fee.is_truthy() && reduced_length.clone() == Value::from(1) {
                trade.set("fee".into(), reduced_fees.get(Value::from(0)));
            };
            let mut trade_fee: Value = self.safe_value(trade.clone(), Value::from("fee"), Value::Undefined);
            if trade_fee.clone().is_nonnullish() {
                trade_fee.set("cost".into(), Binancecoinm::safe_number(self, trade_fee.clone(), Value::from("cost"), Value::Undefined));
                if trade_fee.contains_key(Value::from("rate")) {
                    trade_fee.set("rate".into(), Binancecoinm::safe_number(self, trade_fee.clone(), Value::from("rate"), Value::Undefined));
                };
                trade.set("fee".into(), trade_fee.clone());
            };
        };
        trade.set("amount".into(), self.parse_number(amount.clone(), Value::Undefined));
        trade.set("price".into(), self.parse_number(price.clone(), Value::Undefined));
        trade.set("cost".into(), self.parse_number(cost.clone(), Value::Undefined));
        return trade.clone();
    }

    fn reduce_fees_by_currency(&mut self, mut fees: Value) -> Value {
        //
        // this function takes a list of fee structures having the following format
        //
        //     string = true
        //
        //     [
        //         { 'currency': 'BTC', 'cost': '0.1' },
        //         { 'currency': 'BTC', 'cost': '0.2'  },
        //         { 'currency': 'BTC', 'cost': '0.2', 'rate': '0.00123' },
        //         { 'currency': 'BTC', 'cost': '0.4', 'rate': '0.00123' },
        //         { 'currency': 'BTC', 'cost': '0.5', 'rate': '0.00456' },
        //         { 'currency': 'USDT', 'cost': '12.3456' },
        //     ]
        //
        //     string = false
        //
        //     [
        //         { 'currency': 'BTC', 'cost': 0.1 },
        //         { 'currency': 'BTC', 'cost': 0.2 },
        //         { 'currency': 'BTC', 'cost': 0.2, 'rate': 0.00123 },
        //         { 'currency': 'BTC', 'cost': 0.4, 'rate': 0.00123 },
        //         { 'currency': 'BTC', 'cost': 0.5, 'rate': 0.00456 },
        //         { 'currency': 'USDT', 'cost': 12.3456 },
        //     ]
        //
        // and returns a reduced fee list, where fees are summed per currency and rate (if any)
        //
        //     string = true
        //
        //     [
        //         { 'currency': 'BTC', 'cost': '0.3'  },
        //         { 'currency': 'BTC', 'cost': '0.6', 'rate': '0.00123' },
        //         { 'currency': 'BTC', 'cost': '0.5', 'rate': '0.00456' },
        //         { 'currency': 'USDT', 'cost': '12.3456' },
        //     ]
        //
        //     string  = false
        //
        //     [
        //         { 'currency': 'BTC', 'cost': 0.3  },
        //         { 'currency': 'BTC', 'cost': 0.6, 'rate': 0.00123 },
        //         { 'currency': 'BTC', 'cost': 0.5, 'rate': 0.00456 },
        //         { 'currency': 'USDT', 'cost': 12.3456 },
        //     ]
        //
        let mut reduced: Value = Value::new_object();
        let mut i: usize = 0;
        while i < fees.len() {
            let mut fee: Value = fees.get(i.into());
            let mut fee_currency_code: Value = self.safe_string(fee.clone(), Value::from("currency"), Value::Undefined);
            if fee_currency_code.clone().is_nonnullish() {
                let mut rate: Value = self.safe_string(fee.clone(), Value::from("rate"), Value::Undefined);
                let mut cost: Value = self.safe_value(fee.clone(), Value::from("cost"), Value::Undefined);
                if Precise::string_eq(cost.clone(), Value::from("0")) {
                    // omit zero cost fees
                    continue;
                };
                if !reduced.contains_key(fee_currency_code.clone()) {
                    reduced.set(fee_currency_code.clone(), Value::new_object());
                };
                let mut rate_key: Value = if rate.clone().is_nullish() { Value::from("") } else { rate.clone() };
                if reduced.get(fee_currency_code.clone()).contains_key(rate_key.clone()) {
                    reduced.get(fee_currency_code.clone()).get(rate_key.clone()).set("cost".into(), Precise::string_add(reduced.get(fee_currency_code.clone()).get(rate_key.clone()).get(Value::from("cost")), cost.clone()));
                } else {
                    reduced.get(fee_currency_code.clone()).set(rate_key.clone(), Value::Json(normalize(&Value::Json(json!({
                        "currency": fee_currency_code,
                        "cost": cost
                    }))).unwrap()));
                    if rate.clone().is_nonnullish() {
                        reduced.get(fee_currency_code.clone()).get(rate_key.clone()).set("rate".into(), rate.clone());
                    };
                };
            };
            i += 1;
        };
        let mut result: Value = Value::new_array();
        let mut fee_values: Value = Object::values(reduced.clone());
        let mut i: usize = 0;
        while i < fee_values.len() {
            let mut reduced_fee_values: Value = Object::values(fee_values.get(i.into()));
            result = self.array_concat(result.clone(), reduced_fee_values.clone());
            i += 1;
        };
        return result.clone();
    }

    fn safe_ticker(&self, mut ticker: Value, mut market: Value) -> Value {
        let mut open: Value = self.safe_value(ticker.clone(), Value::from("open"), Value::Undefined);
        let mut close: Value = self.safe_value(ticker.clone(), Value::from("close"), Value::Undefined);
        let mut last: Value = self.safe_value(ticker.clone(), Value::from("last"), Value::Undefined);
        let mut change: Value = self.safe_value(ticker.clone(), Value::from("change"), Value::Undefined);
        let mut percentage: Value = self.safe_value(ticker.clone(), Value::from("percentage"), Value::Undefined);
        let mut average: Value = self.safe_value(ticker.clone(), Value::from("average"), Value::Undefined);
        let mut vwap: Value = self.safe_value(ticker.clone(), Value::from("vwap"), Value::Undefined);
        let mut base_volume: Value = self.safe_value(ticker.clone(), Value::from("baseVolume"), Value::Undefined);
        let mut quote_volume: Value = self.safe_value(ticker.clone(), Value::from("quoteVolume"), Value::Undefined);
        if vwap.clone().is_nullish() {
            vwap = Precise::string_div(quote_volume.clone(), base_volume.clone(), Value::Undefined);
        };
        if last.clone().is_nonnullish() && close.clone().is_nullish() {
            close = last.clone();
        } else if last.clone().is_nullish() && close.clone().is_nonnullish() {
            last = close.clone();
        };
        if last.clone().is_nonnullish() && open.clone().is_nonnullish() {
            if change.clone().is_nullish() {
                change = Precise::string_sub(last.clone(), open.clone());
            };
            if average.clone().is_nullish() {
                average = Precise::string_div(Precise::string_add(last.clone(), open.clone()), Value::from("2"), Value::Undefined);
            };
        };
        if percentage.clone().is_nullish() && change.clone().is_nonnullish() && open.clone().is_nonnullish() && Precise::string_gt(open.clone(), Value::from("0")) {
            percentage = Precise::string_mul(Precise::string_div(change.clone(), open.clone(), Value::Undefined), Value::from("100"));
        };
        if change.clone().is_nullish() && percentage.clone().is_nonnullish() && open.clone().is_nonnullish() {
            change = Precise::string_div(Precise::string_mul(percentage.clone(), open.clone()), Value::from("100"), Value::Undefined);
        };
        if open.clone().is_nullish() && last.clone().is_nonnullish() && change.clone().is_nonnullish() {
            open = Precise::string_sub(last.clone(), change.clone());
        };
        // timestamp and symbol operations don't belong in safeTicker
        // they should be done in the derived classes
        return extend_2(ticker.clone(), Value::Json(normalize(&Value::Json(json!({
            "bid": Binancecoinm::safe_number(self, ticker.clone(), Value::from("bid"), Value::Undefined),
            "bidVolume": Binancecoinm::safe_number(self, ticker.clone(), Value::from("bidVolume"), Value::Undefined),
            "ask": Binancecoinm::safe_number(self, ticker.clone(), Value::from("ask"), Value::Undefined),
            "askVolume": Binancecoinm::safe_number(self, ticker.clone(), Value::from("askVolume"), Value::Undefined),
            "high": Binancecoinm::safe_number(self, ticker.clone(), Value::from("high"), Value::Undefined),
            "low": Binancecoinm::safe_number(self, ticker.clone(), Value::from("low"), Value::Undefined),
            "open": self.parse_number(open.clone(), Value::Undefined),
            "close": self.parse_number(close.clone(), Value::Undefined),
            "last": self.parse_number(last.clone(), Value::Undefined),
            "change": self.parse_number(change.clone(), Value::Undefined),
            "percentage": self.parse_number(percentage.clone(), Value::Undefined),
            "average": self.parse_number(average.clone(), Value::Undefined),
            "vwap": self.parse_number(vwap.clone(), Value::Undefined),
            "baseVolume": self.parse_number(base_volume.clone(), Value::Undefined),
            "quoteVolume": self.parse_number(quote_volume.clone(), Value::Undefined),
            "previousClose": Binancecoinm::safe_number(self, ticker.clone(), Value::from("previousClose"), Value::Undefined)
        }))).unwrap()));
    }

    async fn fetch_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("fetchTrades")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchOHLCV() is not supported yet"))"###);
        };
        Binancecoinm::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut trades: Value = self.fetch_trades(symbol.clone(), since.clone(), limit.clone(), params.clone()).await;
        let mut ohlcvc: Value = self.build_ohlcvc(trades.clone(), timeframe.clone(), since.clone(), limit.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < ohlcvc.len() {
            result.push(Value::Json(serde_json::Value::Array(vec![self.safe_integer(ohlcvc.get(i.into()), Value::from(0), Value::Undefined).into(), Binancecoinm::safe_number(self, ohlcvc.get(i.into()), Value::from(1), Value::Undefined).into(), Binancecoinm::safe_number(self, ohlcvc.get(i.into()), Value::from(2), Value::Undefined).into(), Binancecoinm::safe_number(self, ohlcvc.get(i.into()), Value::from(3), Value::Undefined).into(), Binancecoinm::safe_number(self, ohlcvc.get(i.into()), Value::from(4), Value::Undefined).into(), Binancecoinm::safe_number(self, ohlcvc.get(i.into()), Value::from(5), Value::Undefined).into()])));
            i += 1;
        };
        return result.clone();
    }

    fn convert_trading_view_to_ohlcv(&self, mut ohlcvs: Value, mut timestamp: Value, mut open: Value, mut high: Value, mut low: Value, mut close: Value, mut volume: Value, mut ms: Value) -> Value {
        timestamp = timestamp.or_default(Value::from("t"));
        open = open.or_default(Value::from("o"));
        high = high.or_default(Value::from("h"));
        low = low.or_default(Value::from("l"));
        close = close.or_default(Value::from("c"));
        volume = volume.or_default(Value::from("v"));
        ms = ms.or_default(false.into());
        let mut result: Value = Value::new_array();
        let mut timestamps: Value = self.safe_value(ohlcvs.clone(), timestamp.clone(), Value::new_array());
        let mut opens: Value = self.safe_value(ohlcvs.clone(), open.clone(), Value::new_array());
        let mut highs: Value = self.safe_value(ohlcvs.clone(), high.clone(), Value::new_array());
        let mut lows: Value = self.safe_value(ohlcvs.clone(), low.clone(), Value::new_array());
        let mut closes: Value = self.safe_value(ohlcvs.clone(), close.clone(), Value::new_array());
        let mut volumes: Value = self.safe_value(ohlcvs.clone(), volume.clone(), Value::new_array());
        let mut i: usize = 0;
        while i < timestamps.len() {
            result.push(Value::Json(serde_json::Value::Array(vec![if ms.is_truthy() { self.safe_integer(timestamps.clone(), Value::from(i), Value::Undefined) } else { self.safe_timestamp(timestamps.clone(), Value::from(i), Value::Undefined) }.into(), self.safe_value(opens.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(highs.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(lows.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(closes.clone(), Value::from(i), Value::Undefined).into(), self.safe_value(volumes.clone(), Value::from(i), Value::Undefined).into()])));
            i += 1;
        };
        return result.clone();
    }

    fn convert_ohlcv_to_trading_view(&self, mut ohlcvs: Value, mut timestamp: Value, mut open: Value, mut high: Value, mut low: Value, mut close: Value, mut volume: Value, mut ms: Value) -> Value {
        timestamp = timestamp.or_default(Value::from("t"));
        open = open.or_default(Value::from("o"));
        high = high.or_default(Value::from("h"));
        low = low.or_default(Value::from("l"));
        close = close.or_default(Value::from("c"));
        volume = volume.or_default(Value::from("v"));
        ms = ms.or_default(false.into());
        let mut result: Value = Value::new_object();
        result.set(timestamp.clone(), Value::new_array());
        result.set(open.clone(), Value::new_array());
        result.set(high.clone(), Value::new_array());
        result.set(low.clone(), Value::new_array());
        result.set(close.clone(), Value::new_array());
        result.set(volume.clone(), Value::new_array());
        let mut i: usize = 0;
        while i < ohlcvs.len() {
            let mut ts: Value = if ms.is_truthy() { ohlcvs.get(i.into()).get(Value::from(0)) } else { parse_int(ohlcvs.get(i.into()).get(Value::from(0)) / Value::from(1000)) };
            result.get(timestamp.clone()).push(ts.clone());
            result.get(open.clone()).push(ohlcvs.get(i.into()).get(Value::from(1)));
            result.get(high.clone()).push(ohlcvs.get(i.into()).get(Value::from(2)));
            result.get(low.clone()).push(ohlcvs.get(i.into()).get(Value::from(3)));
            result.get(close.clone()).push(ohlcvs.get(i.into()).get(Value::from(4)));
            result.get(volume.clone()).push(ohlcvs.get(i.into()).get(Value::from(5)));
            i += 1;
        };
        return result.clone();
    }

    fn market_ids(&mut self, mut symbols: Value) -> Value {
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < symbols.len() {
            result.push(Binancecoinm::market_id(self, symbols.get(i.into())));
            i += 1;
        };
        return result.clone();
    }

    fn market_symbols(&self, mut symbols: Value) -> Value {
        if symbols.clone().is_nullish() {
            return symbols.clone();
        };
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < symbols.len() {
            result.push(Binancecoinm::symbol(self, symbols.get(i.into())));
            i += 1;
        };
        return result.clone();
    }

    fn parse_bids_asks(&self, mut bidasks: Value, mut price_key: Value, mut amount_key: Value) -> Value {
        price_key = price_key.or_default(Value::from(0));
        amount_key = amount_key.or_default(Value::from(1));
        bidasks = self.to_array(bidasks.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < bidasks.len() {
            result.push(Binancecoinm::parse_bid_ask(self, bidasks.get(i.into()), price_key.clone(), amount_key.clone()));
            i += 1;
        };
        return result.clone();
    }

    async fn fetch_l2_order_book(&mut self, mut symbol: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut orderbook: Value = self.fetch_order_book(symbol.clone(), limit.clone(), params.clone()).await;
        return extend_2(orderbook.clone(), Value::Json(normalize(&Value::Json(json!({
            "asks": self.sort_by(self.aggregate(orderbook.get(Value::from("asks"))), Value::from(0), Value::Undefined, Value::Undefined),
            "bids": self.sort_by(self.aggregate(orderbook.get(Value::from("bids"))), Value::from(0), true.into(), Value::Undefined)
        }))).unwrap()));
    }

    fn filter_by_symbol(&self, mut objects: Value, mut symbol: Value) -> Value {
        if symbol.clone().is_nullish() {
            return objects.clone();
        };
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < objects.len() {
            let mut object_symbol: Value = self.safe_string(objects.get(i.into()), Value::from("symbol"), Value::Undefined);
            if object_symbol.clone() == symbol.clone() {
                result.push(objects.get(i.into()));
            };
            i += 1;
        };
        return result.clone();
    }

    fn parse_ohlcv(&self, mut ohlcv: Value, mut market: Value) -> Value {
        if Array::is_array(ohlcv.clone()).is_truthy() {
            return Value::Json(serde_json::Value::Array(vec![self.safe_integer(ohlcv.clone(), Value::from(0), Value::Undefined).into(), Binancecoinm::safe_number(self, ohlcv.clone(), Value::from(1), Value::Undefined).into(), Binancecoinm::safe_number(self, ohlcv.clone(), Value::from(2), Value::Undefined).into(), Binancecoinm::safe_number(self, ohlcv.clone(), Value::from(3), Value::Undefined).into(), Binancecoinm::safe_number(self, ohlcv.clone(), Value::from(4), Value::Undefined).into(), Binancecoinm::safe_number(self, ohlcv.clone(), Value::from(5), Value::Undefined).into()]));
        };
        // timestamp
        // open
        // high
        // low
        // close
        // volume
        return ohlcv.clone();
    }

    fn get_network(&mut self, mut network: Value, mut code: Value) -> Value {
        network = network.to_upper_case();
        let mut aliases: Value = Value::Json(normalize(&Value::Json(json!({
            "ETHEREUM": "ETH",
            "ETHER": "ETH",
            "ERC20": "ETH",
            "ETH": "ETH",
            "TRC20": "TRX",
            "TRON": "TRX",
            "TRX": "TRX",
            "BEP20": "BSC",
            "BSC": "BSC",
            "HRC20": "HT",
            "HECO": "HT",
            "SPL": "SOL",
            "SOL": "SOL",
            "TERRA": "LUNA",
            "LUNA": "LUNA",
            "POLYGON": "MATIC",
            "MATIC": "MATIC",
            "EOS": "EOS",
            "WAVES": "WAVES",
            "AVALANCHE": "AVAX",
            "AVAX": "AVAX",
            "QTUM": "QTUM",
            "CHZ": "CHZ",
            "NEO": "NEO",
            "ONT": "ONT",
            "RON": "RON"
        }))).unwrap());
        if network.clone() == code.clone() {
            return network.clone();
        } else if aliases.contains_key(network.clone()) {
            return aliases.get(network.clone());
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" network ") + network.clone() + Value::from(" is not yet supported"))"###);
        };
        Value::Undefined
    }

    fn safe_number_2(&self, mut dictionary: Value, mut key1: Value, mut key2: Value, mut d: Value) -> Value {
        let mut value: Value = self.safe_string_2(dictionary.clone(), key1.clone(), key2.clone(), Value::Undefined);
        return self.parse_number(value.clone(), d.clone());
    }

    fn parse_order_book(&self, mut orderbook: Value, mut symbol: Value, mut timestamp: Value, mut bids_key: Value, mut asks_key: Value, mut price_key: Value, mut amount_key: Value) -> Value {
        bids_key = bids_key.or_default(Value::from("bids"));
        asks_key = asks_key.or_default(Value::from("asks"));
        price_key = price_key.or_default(Value::from(0));
        amount_key = amount_key.or_default(Value::from(1));
        let mut bids: Value = Binancecoinm::parse_bids_asks(self, self.safe_value(orderbook.clone(), bids_key.clone(), Value::new_array()), price_key.clone(), amount_key.clone());
        let mut asks: Value = Binancecoinm::parse_bids_asks(self, self.safe_value(orderbook.clone(), asks_key.clone(), Value::new_array()), price_key.clone(), amount_key.clone());
        return Value::Json(normalize(&Value::Json(json!({
            "symbol": symbol,
            "bids": self.sort_by(bids.clone(), Value::from(0), true.into(), Value::Undefined),
            "asks": self.sort_by(asks.clone(), Value::from(0), Value::Undefined, Value::Undefined),
            "timestamp": timestamp,
            "datetime": self.iso8601(timestamp.clone()),
            "nonce": Value::Undefined
        }))).unwrap());
    }

    fn parse_ohlcvs(&self, mut ohlcvs: Value, mut market: Value, mut timeframe: Value, mut since: Value, mut limit: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        let mut results: Value = Value::new_array();
        let mut i: usize = 0;
        while i < ohlcvs.len() {
            results.push(Binancecoinm::parse_ohlcv(self, ohlcvs.get(i.into()), market.clone()));
            i += 1;
        };
        let mut sorted: Value = self.sort_by(results.clone(), Value::from(0), Value::Undefined, Value::Undefined);
        let mut tail: Value = (since.clone().is_nullish()).into();
        return self.filter_by_since_limit(sorted.clone(), since.clone(), limit.clone(), Value::from(0), tail.clone());
    }

    fn parse_leverage_tiers(&self, mut response: Value, mut symbols: Value, mut market_id_key: Value) -> Value {
        // marketIdKey should only be undefined when response is a dictionary
        symbols = Binancecoinm::market_symbols(self, symbols.clone());
        let mut tiers: Value = Value::new_object();
        let mut i: usize = 0;
        while i < response.len() {
            let mut item: Value = response.get(i.into());
            let mut id: Value = self.safe_string(item.clone(), market_id_key.clone(), Value::Undefined);
            let mut market: Value = Binancecoinm::safe_market(self, id.clone(), Value::Undefined, Value::Undefined);
            let mut symbol: Value = market.get(Value::from("symbol"));
            let mut contract: Value = self.safe_value(market.clone(), Value::from("contract"), false.into());
            if contract.is_truthy() && symbols.clone().is_nullish() || self.in_array(symbol.clone(), symbols.clone()).is_truthy() {
                tiers.set(symbol.clone(), self.parse_market_leverage_tiers(item.clone(), market.clone()));
            };
            i += 1;
        };
        return tiers.clone();
    }

    async fn load_trading_limits(&mut self, mut symbols: Value, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchTradingLimits")).is_truthy() {
            if reload.is_truthy() || !self.get("options".into()).contains_key(Value::from("limitsLoaded")) {
                let mut response: Value = self.fetch_trading_limits(symbols.clone(), Value::Undefined).await;
                let mut i: usize = 0;
                while i < symbols.len() {
                    let mut symbol: Value = symbols.get(i.into());
                    self.get("markets".into()).set(symbol.clone(), self.deep_extend_2(self.get("markets".into()).get(symbol.clone()), response.get(symbol.clone())));
                    i += 1;
                };
                self.get("options".into()).set("limitsLoaded".into(), self.milliseconds());
            };
        };
        return self.get("markets".into());
    }

    fn parse_positions(&self, mut positions: Value, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        symbols = Binancecoinm::market_symbols(self, symbols.clone());
        positions = self.to_array(positions.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < positions.len() {
            let mut position: Value = extend_2(self.parse_position(positions.get(i.into()), Value::Undefined), params.clone());
            result.push(position.clone());
            i += 1;
        };
        return Binancecoinm::filter_by_array(self, result.clone(), Value::from("symbol"), symbols.clone(), false.into());
    }

    fn parse_accounts(&self, mut accounts: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        accounts = self.to_array(accounts.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < accounts.len() {
            let mut account: Value = extend_2(Binancecoinm::parse_account(self, accounts.get(i.into())), params.clone());
            result.push(account.clone());
            i += 1;
        };
        return result.clone();
    }

    fn parse_trades(&mut self, mut trades: Value, mut market: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        trades = self.to_array(trades.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < trades.len() {
            let mut trade: Value = extend_2(self.parse_trade(trades.get(i.into()), market.clone()), params.clone());
            result.push(trade.clone());
            i += 1;
        };
        result = self.sort_by_2(result.clone(), Value::from("timestamp"), Value::from("id"), Value::Undefined, Value::Undefined);
        let mut symbol: Value = if market.clone().is_nonnullish() { market.get(Value::from("symbol")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Binancecoinm::filter_by_symbol_since_limit(self, result.clone(), symbol.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn parse_transactions(&self, mut transactions: Value, mut currency: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        transactions = self.to_array(transactions.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < transactions.len() {
            let mut transaction: Value = extend_2(self.parse_transaction(transactions.get(i.into()), currency.clone()), params.clone());
            result.push(transaction.clone());
            i += 1;
        };
        result = self.sort_by(result.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut code: Value = if currency.clone().is_nonnullish() { currency.get(Value::from("code")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Binancecoinm::filter_by_currency_since_limit(self, result.clone(), code.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn parse_transfers(&self, mut transfers: Value, mut currency: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        transfers = self.to_array(transfers.clone());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < transfers.len() {
            let mut transfer: Value = extend_2(self.parse_transfer(transfers.get(i.into()), currency.clone()), params.clone());
            result.push(transfer.clone());
            i += 1;
        };
        result = self.sort_by(result.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut code: Value = if currency.clone().is_nonnullish() { currency.get(Value::from("code")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Binancecoinm::filter_by_currency_since_limit(self, result.clone(), code.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn parse_ledger(&self, mut data: Value, mut currency: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut result: Value = Value::new_array();
        let mut array_data: Value = self.to_array(data.clone());
        let mut i: usize = 0;
        while i < array_data.len() {
            let mut item_or_items: Value = self.parse_ledger_entry(array_data.get(i.into()), currency.clone());
            if Array::is_array(item_or_items.clone()).is_truthy() {
                let mut j: usize = 0;
                while j < item_or_items.len() {
                    result.push(extend_2(item_or_items.get(j.into()), params.clone()));
                    j += 1;
                };
            } else {
                result.push(extend_2(item_or_items.clone(), params.clone()));
            };
            i += 1;
        };
        result = self.sort_by(result.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut code: Value = if currency.clone().is_nonnullish() { currency.get(Value::from("code")) } else { Value::Undefined };
        let mut tail: Value = (since.clone().is_nullish()).into();
        return Binancecoinm::filter_by_currency_since_limit(self, result.clone(), code.clone(), since.clone(), limit.clone(), tail.clone());
    }

    fn nonce(&self) -> Value {
        return self.seconds();
    }

    fn set_headers(&mut self, mut headers: Value) -> Value {
        return headers.clone();
    }

    fn market_id(&mut self, mut symbol: Value) -> Value {
        let mut market: Value = Binancecoinm::market(self, symbol.clone());
        if market.clone().is_nonnullish() {
            return market.get(Value::from("id"));
        };
        return symbol.clone();
    }

    fn symbol(&self, mut symbol: Value) -> Value {
        let mut market: Value = Binancecoinm::market(self, symbol.clone());
        return self.safe_string(market.clone(), Value::from("symbol"), symbol.clone());
    }

    fn resolve_path(&mut self, mut path: Value, mut params: Value) -> Value {
        return Value::Json(serde_json::Value::Array(vec![self.implode_params(path.clone(), params.clone()).into(), self.omit(params.clone(), self.extract_params(path.clone())).into()]));
    }

    fn filter_by_array(&self, mut objects: Value, mut key: Value, mut values: Value, mut indexed: Value) -> Value {
        indexed = indexed.or_default(true.into());
        objects = self.to_array(objects.clone());
        // return all of them if no values were passed
        if values.clone().is_nullish() || !values.is_truthy() {
            return if indexed.is_truthy() { self.index_by(objects.clone(), key.clone(), Value::Undefined) } else { objects.clone() };
        };
        let mut results: Value = Value::new_array();
        let mut i: usize = 0;
        while i < objects.len() {
            if self.in_array(objects.get(i.into()).get(key.clone()), values.clone()).is_truthy() {
                results.push(objects.get(i.into()));
            };
            i += 1;
        };
        return if indexed.is_truthy() { self.index_by(results.clone(), key.clone(), Value::Undefined) } else { results.clone() };
    }

    async fn fetch2(&mut self, mut path: Value, mut api: Value, mut method: Value, mut params: Value, mut headers: Value, mut body: Value, mut config: Value, mut context: Value) -> Value {
        api = api.or_default(Value::from("public"));
        method = method.or_default(Value::from("GET"));
        params = params.or_default(Value::new_object());
        config = config.or_default(Value::new_object());
        context = context.or_default(Value::new_object());
        if self.get("enable_rate_limit".into()).is_truthy() {
            let mut cost: Value = Binancecoinm::calculate_rate_limiter_cost(self, api.clone(), method.clone(), path.clone(), params.clone(), config.clone(), context.clone());
            self.throttle(cost.clone()).await;
        };
        self.set("last_rest_request_timestamp".into(), self.milliseconds());
        let mut request: Value = self.sign(path.clone(), api.clone(), method.clone(), params.clone(), headers.clone(), body.clone());
        return self.fetch(request.get(Value::from("url")), request.get(Value::from("method")), request.get(Value::from("headers")), request.get(Value::from("body"))).await;
    }

    async fn request(&mut self, mut path: Value, mut api: Value, mut method: Value, mut params: Value, mut headers: Value, mut body: Value, mut config: Value, mut context: Value) -> Value {
        api = api.or_default(Value::from("public"));
        method = method.or_default(Value::from("GET"));
        params = params.or_default(Value::new_object());
        config = config.or_default(Value::new_object());
        context = context.or_default(Value::new_object());
        return Binancecoinm::fetch2(self, path.clone(), api.clone(), method.clone(), params.clone(), headers.clone(), body.clone(), config.clone(), context.clone()).await;
    }

    async fn load_accounts(&mut self, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        if reload.is_truthy() {
            self.set("accounts".into(), self.fetch_accounts(params.clone()).await);
        } else {
            if self.get("accounts".into()).is_truthy() {
                return self.get("accounts".into());
            } else {
                self.set("accounts".into(), self.fetch_accounts(params.clone()).await);
            };
        };
        self.set("accounts_by_id".into(), self.index_by(self.get("accounts".into()), Value::from("id"), Value::Undefined));
        return self.get("accounts".into());
    }

    async fn fetch_ohlcvc(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("fetchTrades")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchOHLCV() is not supported yet"))"###);
        };
        Binancecoinm::load_markets(self, Value::Undefined, Value::Undefined).await;
        let mut trades: Value = self.fetch_trades(symbol.clone(), since.clone(), limit.clone(), params.clone()).await;
        return self.build_ohlcvc(trades.clone(), timeframe.clone(), since.clone(), limit.clone());
    }

    fn parse_trading_view_ohlcv(&self, mut ohlcvs: Value, mut market: Value, mut timeframe: Value, mut since: Value, mut limit: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        let mut result: Value = Binancecoinm::convert_trading_view_to_ohlcv(self, ohlcvs.clone(), Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined, Value::Undefined);
        return Binancecoinm::parse_ohlcvs(self, result.clone(), market.clone(), timeframe.clone(), since.clone(), limit.clone());
    }

    async fn edit_limit_buy_order(&mut self, mut id: Value, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Binancecoinm::edit_limit_order(self, id.clone(), symbol.clone(), Value::from("buy"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn edit_limit_sell_order(&mut self, mut id: Value, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Binancecoinm::edit_limit_order(self, id.clone(), symbol.clone(), Value::from("sell"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn edit_limit_order(&mut self, mut id: Value, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Binancecoinm::edit_order(self, id.clone(), symbol.clone(), Value::from("limit"), side.clone(), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn edit_order(&mut self, mut id: Value, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Binancecoinm::cancel_order(self, id.clone(), symbol.clone(), Value::Undefined).await;
        return Binancecoinm::create_order(self, symbol.clone(), r#type.clone(), side.clone(), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn fetch_permissions(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchPermissions() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_bids_asks(&mut self, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchBidsAsks() is not supported yet"))"###);
        Value::Undefined
    }

    fn parse_bid_ask(&self, mut bidask: Value, mut price_key: Value, mut amount_key: Value) -> Value {
        price_key = price_key.or_default(Value::from(0));
        amount_key = amount_key.or_default(Value::from(1));
        let mut price: Value = Binancecoinm::safe_number(self, bidask.clone(), price_key.clone(), Value::Undefined);
        let mut amount: Value = Binancecoinm::safe_number(self, bidask.clone(), amount_key.clone(), Value::Undefined);
        return Value::Json(serde_json::Value::Array(vec![price.clone().into(), amount.clone().into()]));
    }

    fn safe_currency(&self, mut currency_id: Value, mut currency: Value) -> Value {
        if currency_id.clone().is_nullish() && currency.clone().is_nonnullish() {
            return currency.clone();
        };
        if self.get("currencies_by_id".into()).is_nonnullish() && self.get("currencies_by_id".into()).contains_key(currency_id.clone()) {
            return self.get("currencies_by_id".into()).get(currency_id.clone());
        };
        let mut code: Value = currency_id.clone();
        if currency_id.clone().is_nonnullish() {
            code = Binancecoinm::common_currency_code(self, currency_id.to_upper_case());
        };
        return Value::Json(normalize(&Value::Json(json!({
            "id": currency_id,
            "code": code
        }))).unwrap());
    }

    fn safe_market(&self, mut market_id: Value, mut market: Value, mut delimiter: Value) -> Value {
        let mut result: Value = Value::Json(normalize(&Value::Json(json!({
            "id": market_id,
            "symbol": market_id,
            "base": Value::Undefined,
            "quote": Value::Undefined,
            "baseId": Value::Undefined,
            "quoteId": Value::Undefined,
            "active": Value::Undefined,
            "type": Value::Undefined,
            "linear": Value::Undefined,
            "inverse": Value::Undefined,
            "spot": false,
            "swap": false,
            "future": false,
            "option": false,
            "margin": false,
            "contract": false,
            "contractSize": Value::Undefined,
            "expiry": Value::Undefined,
            "expiryDatetime": Value::Undefined,
            "optionType": Value::Undefined,
            "strike": Value::Undefined,
            "settle": Value::Undefined,
            "settleId": Value::Undefined,
            "precision": Value::Json(normalize(&Value::Json(json!({
                "amount": Value::Undefined,
                "price": Value::Undefined
            }))).unwrap()),
            "limits": Value::Json(normalize(&Value::Json(json!({
                "amount": Value::Json(normalize(&Value::Json(json!({
                    "min": Value::Undefined,
                    "max": Value::Undefined
                }))).unwrap()),
                "price": Value::Json(normalize(&Value::Json(json!({
                    "min": Value::Undefined,
                    "max": Value::Undefined
                }))).unwrap()),
                "cost": Value::Json(normalize(&Value::Json(json!({
                    "min": Value::Undefined,
                    "max": Value::Undefined
                }))).unwrap())
            }))).unwrap()),
            "info": Value::Undefined
        }))).unwrap());
        if market_id.clone().is_nonnullish() {
            if self.get("markets_by_id".into()).is_nonnullish() && self.get("markets_by_id".into()).contains_key(market_id.clone()) {
                market = self.get("markets_by_id".into()).get(market_id.clone());
            } else if delimiter.clone().is_nonnullish() {
                let mut parts: Value = market_id.split(delimiter.clone());
                let mut parts_length: Value = parts.len().into();
                if parts_length.clone() == Value::from(2) {
                    result.set("baseId".into(), self.safe_string(parts.clone(), Value::from(0), Value::Undefined));
                    result.set("quoteId".into(), self.safe_string(parts.clone(), Value::from(1), Value::Undefined));
                    result.set("base".into(), Binancecoinm::safe_currency_code(self, result.get(Value::from("baseId")), Value::Undefined));
                    result.set("quote".into(), Binancecoinm::safe_currency_code(self, result.get(Value::from("quoteId")), Value::Undefined));
                    result.set("symbol".into(), result.get(Value::from("base")) + Value::from("/") + result.get(Value::from("quote")));
                    return result.clone();
                } else {
                    return result.clone();
                };
            };
        };
        if market.clone().is_nonnullish() {
            return market.clone();
        };
        return result.clone();
    }

    fn check_required_credentials(&mut self, mut error: Value) -> Value {
        error = error.or_default(true.into());
        let mut keys: Value = Object::keys(self.get("required_credentials".into()));
        let mut i: usize = 0;
        while i < keys.len() {
            let mut key: Value = keys.get(i.into());
            if self.get("required_credentials".into()).get(key.clone()).is_truthy() && !self.get(key.clone()).is_truthy() {
                if error.is_truthy() {
                    panic!(r###"AuthenticationError::new(self.get("id".into()) + Value::from(r#" requires ""#) + key.clone() + Value::from(r#"" credential"#))"###);
                } else {
                    return error.clone();
                };
            };
            i += 1;
        };
        return true.into();
    }

    fn oath(&mut self) -> Value {
        if self.get("twofa".into()).is_nonnullish() {
            return self.totp(self.get("twofa".into()));
        } else {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" exchange.twofa has not been set for 2FA Two-Factor Authentication"))"###);
        };
        Value::Undefined
    }

    async fn fetch_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchBalance() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_partial_balance(&mut self, mut part: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut balance: Value = Binancecoinm::fetch_balance(self, params.clone()).await;
        return balance.get(part.clone());
    }

    async fn fetch_free_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Binancecoinm::fetch_partial_balance(self, Value::from("free"), params.clone()).await;
    }

    async fn fetch_used_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Binancecoinm::fetch_partial_balance(self, Value::from("used"), params.clone()).await;
    }

    async fn fetch_total_balance(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Binancecoinm::fetch_partial_balance(self, Value::from("total"), params.clone()).await;
    }

    async fn fetch_status(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchTime")).is_truthy() {
            let mut time: Value = self.fetch_time(params.clone()).await;
            self.set("status".into(), extend_2(self.get("status".into()), Value::Json(normalize(&Value::Json(json!({
                "updated": time
            }))).unwrap())));
        };
        return self.get("status".into());
    }

    async fn fetch_funding_fee(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut warn_on_fetch_funding_fee: Value = self.safe_value(self.get("options".into()), Value::from("warnOnFetchFundingFee"), true.into());
        if warn_on_fetch_funding_fee.is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(r#" fetchFundingFee() method is deprecated, it will be removed in July 2022, please, use fetchTransactionFee() or set exchange.options["warnOnFetchFundingFee"] = false to suppress this warning"#))"###);
        };
        return Binancecoinm::fetch_transaction_fee(self, code.clone(), params.clone()).await;
    }

    async fn fetch_funding_fees(&mut self, mut codes: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut warn_on_fetch_funding_fees: Value = self.safe_value(self.get("options".into()), Value::from("warnOnFetchFundingFees"), true.into());
        if warn_on_fetch_funding_fees.is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(r#" fetchFundingFees() method is deprecated, it will be removed in July 2022. Please, use fetchTransactionFees() or set exchange.options["warnOnFetchFundingFees"] = false to suppress this warning"#))"###);
        };
        return Binancecoinm::fetch_transaction_fees(self, codes.clone(), params.clone()).await;
    }

    async fn fetch_transaction_fee(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("fetchTransactionFees")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTransactionFee() is not supported yet"))"###);
        };
        return Binancecoinm::fetch_transaction_fees(self, Value::Json(serde_json::Value::Array(vec![code.clone().into()])), params.clone()).await;
    }

    async fn fetch_transaction_fees(&mut self, mut codes: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTransactionFees() is not supported yet"))"###);
        Value::Undefined
    }

    fn get_supported_mapping(&self, mut key: Value, mut mapping: Value) -> Value {
        mapping = mapping.or_default(Value::new_object());
        if mapping.contains_key(key.clone()) {
            return mapping.get(key.clone());
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" ") + key.clone() + Value::from(" does not have a value in mapping"))"###);
        };
        Value::Undefined
    }

    async fn fetch_borrow_rate(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        Binancecoinm::load_markets(self, Value::Undefined, Value::Undefined).await;
        if !self.get("has".into()).get(Value::from("fetchBorrowRates")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchBorrowRate() is not supported yet"))"###);
        };
        let mut borrow_rates: Value = self.fetch_borrow_rates(params.clone()).await;
        let mut rate: Value = self.safe_value(borrow_rates.clone(), code.clone(), Value::Undefined);
        if rate.clone().is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" fetchBorrowRate() could not find the borrow rate for currency code ") + code.clone())"###);
        };
        return rate.clone();
    }

    fn handle_market_type_and_params(&mut self, mut method_name: Value, mut market: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut default_type: Value = self.safe_string_2(self.get("options".into()), Value::from("defaultType"), Value::from("type"), Value::from("spot"));
        let mut method_options: Value = self.safe_value(self.get("options".into()), method_name.clone(), Value::Undefined);
        let mut method_type: Value = default_type.clone();
        if method_options.clone().is_nonnullish() {
            if method_options.typeof_() == Value::from("string") {
                method_type = method_options.clone();
            } else {
                method_type = self.safe_string_2(method_options.clone(), Value::from("defaultType"), Value::from("type"), method_type.clone());
            };
        };
        let mut market_type: Value = if market.clone().is_nullish() { method_type.clone() } else { market.get(Value::from("type")) };
        let mut r#type: Value = self.safe_string_2(params.clone(), Value::from("defaultType"), Value::from("type"), market_type.clone());
        params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("defaultType").into(), Value::from("type").into()])));
        return Value::Json(serde_json::Value::Array(vec![r#type.clone().into(), params.clone().into()]));
    }

    fn handle_sub_type_and_params(&mut self, mut method_name: Value, mut market: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut sub_type: Value = Value::Undefined;
        // if set in params, it takes precedence
        let mut sub_type_in_params: Value = self.safe_string_2(params.clone(), Value::from("subType"), Value::from("subType"), Value::Undefined);
        // avoid omitting if it's not present
        if sub_type_in_params.clone().is_nonnullish() {
            sub_type = sub_type_in_params.clone();
            params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("defaultSubType").into(), Value::from("subType").into()])));
        } else {
            // at first, check from market object
            if market.clone().is_nonnullish() {
                if market.get(Value::from("linear")).is_truthy() {
                    sub_type = Value::from("linear");
                } else if market.get(Value::from("inverse")).is_truthy() {
                    sub_type = Value::from("inverse");
                };
            };
            // if it was not defined in market object
            if sub_type.clone().is_nullish() {
                let mut exchange_wide_value: Value = self.safe_string_2(self.get("options".into()), Value::from("defaultSubType"), Value::from("subType"), Value::from("linear"));
                let mut method_options: Value = self.safe_value(self.get("options".into()), method_name.clone(), Value::new_object());
                sub_type = self.safe_string_2(method_options.clone(), Value::from("defaultSubType"), Value::from("subType"), exchange_wide_value.clone());
            };
        };
        return Value::Json(serde_json::Value::Array(vec![sub_type.clone().into(), params.clone().into()]));
    }

    fn throw_exactly_matched_exception(&mut self, mut exact: Value, mut string: Value, mut message: Value) -> () {
        if exact.contains_key(string.clone()) {
            panic!(r###"exact.get(string.clone())::new(message)"###);
        };
    }

    fn throw_broadly_matched_exception(&mut self, mut broad: Value, mut string: Value, mut message: Value) -> () {
        let mut broad_key: Value = Binancecoinm::find_broadly_matched_key(self, broad.clone(), string.clone());
        if broad_key.clone().is_nonnullish() {
            panic!(r###"broad.get(broad_key.clone())::new(message)"###);
        };
    }

    fn find_broadly_matched_key(&mut self, mut broad: Value, mut string: Value) -> Value {
        // a helper for matching error strings exactly vs broadly
        let mut keys: Value = Object::keys(broad.clone());
        let mut i: usize = 0;
        while i < keys.len() {
            let mut key: Value = keys.get(i.into());
            if string.index_of(key.clone()) >= Value::from(0) {
                return key.clone();
            };
            i += 1;
        };
        return Value::Undefined;
    }

    fn handle_errors(&mut self, mut status_code: Value, mut status_text: Value, mut url: Value, mut method: Value, mut response_headers: Value, mut response_body: Value, mut response: Value, mut request_headers: Value, mut request_body: Value) -> Value { Value::Undefined }

    fn calculate_rate_limiter_cost(&mut self, mut api: Value, mut method: Value, mut path: Value, mut params: Value, mut config: Value, mut context: Value) -> Value {
        config = config.or_default(Value::new_object());
        context = context.or_default(Value::new_object());
        return self.safe_value(config.clone(), Value::from("cost"), Value::from(1));
    }

    async fn fetch_ticker(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchTickers")).is_truthy() {
            let mut tickers: Value = Binancecoinm::fetch_tickers(self, Value::Json(serde_json::Value::Array(vec![symbol.clone().into()])), params.clone()).await;
            let mut ticker: Value = self.safe_value(tickers.clone(), symbol.clone(), Value::Undefined);
            if ticker.clone().is_nullish() {
                panic!(r###"NullResponse::new(self.get("id".into()) + Value::from(" fetchTickers() could not find a ticker for ") + symbol.clone())"###);
            } else {
                return ticker.clone();
            };
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTicker() is not supported yet"))"###);
        };
        Value::Undefined
    }

    async fn fetch_tickers(&mut self, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTickers() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_order(&mut self, mut id: Value, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchOrder() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_order_status(&mut self, mut id: Value, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut order: Value = Binancecoinm::fetch_order(self, id.clone(), symbol.clone(), params.clone()).await;
        return order.get(Value::from("status"));
    }

    async fn fetch_unified_order(&mut self, mut order: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Binancecoinm::fetch_order(self, self.safe_value(order.clone(), Value::from("id"), Value::Undefined), self.safe_value(order.clone(), Value::from("symbol"), Value::Undefined), params.clone()).await;
    }

    async fn create_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" createOrder() is not supported yet"))"###);
        Value::Undefined
    }

    async fn cancel_order(&mut self, mut id: Value, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" cancelOrder() is not supported yet"))"###);
        Value::Undefined
    }

    async fn cancel_unified_order(&mut self, mut order: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Binancecoinm::cancel_order(self, self.safe_value(order.clone(), Value::from("id"), Value::Undefined), self.safe_value(order.clone(), Value::from("symbol"), Value::Undefined), params.clone()).await;
    }

    async fn fetch_orders(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchOrders() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_open_orders(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchOpenOrders() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_closed_orders(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchClosedOrders() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_my_trades(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchMyTrades() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_transactions(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTransactions() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_deposits(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchDeposits() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_withdrawals(&mut self, mut symbol: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchWithdrawals() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_deposit_address(&mut self, mut code: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchDepositAddresses")).is_truthy() {
            let mut deposit_addresses: Value = self.fetch_deposit_addresses(Value::Json(serde_json::Value::Array(vec![code.clone().into()])), params.clone()).await;
            let mut deposit_address: Value = self.safe_value(deposit_addresses.clone(), code.clone(), Value::Undefined);
            if deposit_address.clone().is_nullish() {
                panic!(r###"InvalidAddress::new(self.get("id".into()) + Value::from(" fetchDepositAddress() could not find a deposit address for ") + code.clone() + Value::from(", make sure you have created a corresponding deposit address in your wallet on the exchange website"))"###);
            } else {
                return deposit_address.clone();
            };
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchDepositAddress() is not supported yet"))"###);
        };
        Value::Undefined
    }

    fn account(&self) -> Value {
        return Value::Json(normalize(&Value::Json(json!({
            "free": Value::Undefined,
            "used": Value::Undefined,
            "total": Value::Undefined
        }))).unwrap());
    }

    fn common_currency_code(&self, mut currency: Value) -> Value {
        if !self.get("substitute_common_currency_codes".into()).is_truthy() {
            return currency.clone();
        };
        return self.safe_string(self.get("common_currencies".into()), currency.clone(), currency.clone());
    }

    fn currency(&self, mut code: Value) -> Value {
        if self.get("currencies".into()).is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" currencies not loaded"))"###);
        };
        if code.typeof_() == Value::from("string") {
            if self.get("currencies".into()).contains_key(code.clone()) {
                return self.get("currencies".into()).get(code.clone());
            } else if self.get("currencies_by_id".into()).contains_key(code.clone()) {
                return self.get("currencies_by_id".into()).get(code.clone());
            };
        };
        panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" does not have currency code ") + code.clone())"###);
        Value::Undefined
    }

    fn market(&self, mut symbol: Value) -> Value {
        if self.get("markets".into()).is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" markets not loaded"))"###);
        };
        if self.get("markets_by_id".into()).is_nullish() {
            panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(" markets not loaded"))"###);
        };
        if symbol.typeof_() == Value::from("string") {
            if self.get("markets".into()).contains_key(symbol.clone()) {
                return self.get("markets".into()).get(symbol.clone());
            } else if self.get("markets_by_id".into()).contains_key(symbol.clone()) {
                return self.get("markets_by_id".into()).get(symbol.clone());
            };
        };
        panic!(r###"BadSymbol::new(self.get("id".into()) + Value::from(" does not have market symbol ") + symbol.clone())"###);
        Value::Undefined
    }

    fn handle_withdraw_tag_and_params(&mut self, mut tag: Value, mut params: Value) -> Value {
        if tag.typeof_() == Value::from("object") {
            params = extend_2(tag.clone(), params.clone());
            tag = Value::Undefined;
        };
        if tag.clone().is_nullish() {
            tag = self.safe_string(params.clone(), Value::from("tag"), Value::Undefined);
            if tag.clone().is_nonnullish() {
                params = self.omit(params.clone(), Value::from("tag"));
            };
        };
        return Value::Json(serde_json::Value::Array(vec![tag.clone().into(), params.clone().into()]));
    }

    async fn create_limit_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Binancecoinm::create_order(self, symbol.clone(), Value::from("limit"), side.clone(), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_market_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Binancecoinm::create_order(self, symbol.clone(), Value::from("market"), side.clone(), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_limit_buy_order(&mut self, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Binancecoinm::create_order(self, symbol.clone(), Value::from("limit"), Value::from("buy"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_limit_sell_order(&mut self, mut symbol: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Binancecoinm::create_order(self, symbol.clone(), Value::from("limit"), Value::from("sell"), amount.clone(), price.clone(), params.clone()).await;
    }

    async fn create_market_buy_order(&mut self, mut symbol: Value, mut amount: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Binancecoinm::create_order(self, symbol.clone(), Value::from("market"), Value::from("buy"), amount.clone(), Value::Undefined, params.clone()).await;
    }

    async fn create_market_sell_order(&mut self, mut symbol: Value, mut amount: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        return Binancecoinm::create_order(self, symbol.clone(), Value::from("market"), Value::from("sell"), amount.clone(), Value::Undefined, params.clone()).await;
    }

    fn cost_to_precision(&mut self, mut symbol: Value, mut cost: Value) -> Value {
        let mut market: Value = Binancecoinm::market(self, symbol.clone());
        return self.decimal_to_precision(cost.clone(), TRUNCATE.into(), market.get(Value::from("precision")).get(Value::from("price")), self.get("precision_mode".into()), self.get("padding_mode".into()));
    }

    fn price_to_precision(&mut self, mut symbol: Value, mut price: Value) -> Value {
        let mut market: Value = Binancecoinm::market(self, symbol.clone());
        return self.decimal_to_precision(price.clone(), ROUND.into(), market.get(Value::from("precision")).get(Value::from("price")), self.get("precision_mode".into()), self.get("padding_mode".into()));
    }

    fn amount_to_precision(&mut self, mut symbol: Value, mut amount: Value) -> Value {
        let mut market: Value = Binancecoinm::market(self, symbol.clone());
        return self.decimal_to_precision(amount.clone(), TRUNCATE.into(), market.get(Value::from("precision")).get(Value::from("amount")), self.get("precision_mode".into()), self.get("padding_mode".into()));
    }

    fn fee_to_precision(&mut self, mut symbol: Value, mut fee: Value) -> Value {
        let mut market: Value = Binancecoinm::market(self, symbol.clone());
        return self.decimal_to_precision(fee.clone(), ROUND.into(), market.get(Value::from("precision")).get(Value::from("price")), self.get("precision_mode".into()), self.get("padding_mode".into()));
    }

    fn currency_to_precision(&mut self, mut code: Value, mut fee: Value, mut network_code: Value) -> Value {
        let mut currency: Value = self.get("currencies".into()).get(code.clone());
        let mut precision: Value = self.safe_value(currency.clone(), Value::from("precision"), Value::Undefined);
        if network_code.clone().is_nonnullish() {
            let mut networks: Value = self.safe_value(currency.clone(), Value::from("networks"), Value::new_object());
            let mut network_item: Value = self.safe_value(networks.clone(), network_code.clone(), Value::new_object());
            precision = self.safe_value(network_item.clone(), Value::from("precision"), precision.clone());
        };
        if precision.clone().is_nullish() {
            return fee.clone();
        } else {
            return self.decimal_to_precision(fee.clone(), ROUND.into(), precision.clone(), self.get("precision_mode".into()), self.get("padding_mode".into()));
        };
        Value::Undefined
    }

    fn safe_number(&self, mut object: Value, mut key: Value, mut d: Value) -> Value {
        let mut value: Value = self.safe_string(object.clone(), key.clone(), Value::Undefined);
        return self.parse_number(value.clone(), d.clone());
    }

    fn safe_number_n(&self, mut object: Value, mut arr: Value, mut d: Value) -> Value {
        let mut value: Value = self.safe_string_n(object.clone(), arr.clone(), Value::Undefined);
        return self.parse_number(value.clone(), d.clone());
    }

    fn parse_precision(&self, mut precision: Value) -> Value {
        if precision.clone().is_nullish() {
            return Value::Undefined;
        };
        return Value::from("1e") + Precise::string_neg(precision.clone());
    }

    async fn load_time_difference(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut server_time: Value = self.fetch_time(params.clone()).await;
        let mut after: Value = self.milliseconds();
        self.get("options".into()).set("timeDifference".into(), after.clone() - server_time.clone());
        return self.get("options".into()).get(Value::from("timeDifference"));
    }

    fn implode_hostname(&mut self, mut url: Value) -> Value {
        return self.implode_params(url.clone(), Value::Json(normalize(&Value::Json(json!({
            "hostname": self.get("hostname".into())
        }))).unwrap()));
    }

    async fn fetch_market_leverage_tiers(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchLeverageTiers")).is_truthy() {
            let mut market: Value = Binancecoinm::market(self, symbol.clone());
            if !market.get(Value::from("contract")).is_truthy() {
                panic!(r###"BadSymbol::new(self.get("id".into()) + Value::from(" fetchMarketLeverageTiers() supports contract markets only"))"###);
            };
            let mut tiers: Value = self.fetch_leverage_tiers(Value::Json(serde_json::Value::Array(vec![symbol.clone().into()])), Value::Undefined).await;
            return self.safe_value(tiers.clone(), symbol.clone(), Value::Undefined);
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchMarketLeverageTiers() is not supported yet"))"###);
        };
        Value::Undefined
    }

    async fn create_post_only_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createPostOnlyOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from("createPostOnlyOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "postOnly": true
        }))).unwrap()));
        return Binancecoinm::create_order(self, symbol.clone(), r#type.clone(), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_reduce_only_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createReduceOnlyOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from("createReduceOnlyOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "reduceOnly": true
        }))).unwrap()));
        return Binancecoinm::create_order(self, symbol.clone(), r#type.clone(), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_stop_order(&mut self, mut symbol: Value, mut r#type: Value, mut side: Value, mut amount: Value, mut price: Value, mut stop_price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createStopOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" createStopOrder() is not supported yet"))"###);
        };
        if stop_price.clone().is_nullish() {
            panic!(r###"ArgumentsRequired::new(self.get("id".into()) + Value::from(" create_stop_order() requires a stopPrice argument"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "stopPrice": stop_price
        }))).unwrap()));
        return Binancecoinm::create_order(self, symbol.clone(), r#type.clone(), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_stop_limit_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut price: Value, mut stop_price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createStopLimitOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" createStopLimitOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "stopPrice": stop_price
        }))).unwrap()));
        return Binancecoinm::create_order(self, symbol.clone(), Value::from("limit"), side.clone(), amount.clone(), price.clone(), query.clone()).await;
    }

    async fn create_stop_market_order(&mut self, mut symbol: Value, mut side: Value, mut amount: Value, mut stop_price: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("createStopMarketOrder")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" createStopMarketOrder() is not supported yet"))"###);
        };
        let mut query: Value = extend_2(params.clone(), Value::Json(normalize(&Value::Json(json!({
            "stopPrice": stop_price
        }))).unwrap()));
        return Binancecoinm::create_order(self, symbol.clone(), Value::from("market"), side.clone(), amount.clone(), Value::Undefined, query.clone()).await;
    }

    fn safe_currency_code(&self, mut currency_id: Value, mut currency: Value) -> Value {
        currency = Binancecoinm::safe_currency(self, currency_id.clone(), currency.clone());
        return currency.get(Value::from("code"));
    }

    fn filter_by_symbol_since_limit(&self, mut array: Value, mut symbol: Value, mut since: Value, mut limit: Value, mut tail: Value) -> Value {
        tail = tail.or_default(false.into());
        return self.filter_by_value_since_limit(array.clone(), Value::from("symbol"), symbol.clone(), since.clone(), limit.clone(), Value::from("timestamp"), tail.clone());
    }

    fn filter_by_currency_since_limit(&self, mut array: Value, mut code: Value, mut since: Value, mut limit: Value, mut tail: Value) -> Value {
        tail = tail.or_default(false.into());
        return self.filter_by_value_since_limit(array.clone(), Value::from("currency"), code.clone(), since.clone(), limit.clone(), Value::from("timestamp"), tail.clone());
    }

    fn parse_tickers(&self, mut tickers: Value, mut symbols: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        //
        // the value of tickers is either a dict or a list
        //
        // dict
        //
        //     {
        //         'marketId1': { ... },
        //         'marketId2': { ... },
        //         'marketId3': { ... },
        //         ...
        //     }
        //
        // list
        //
        //     [
        //         { 'market': 'marketId1', ... },
        //         { 'market': 'marketId2', ... },
        //         { 'market': 'marketId3', ... },
        //         ...
        //     ]
        //
        let mut results: Value = Value::new_array();
        if Array::is_array(tickers.clone()).is_truthy() {
            let mut i: usize = 0;
            while i < tickers.len() {
                let mut ticker: Value = extend_2(self.parse_ticker(tickers.get(i.into()), Value::Undefined), params.clone());
                results.push(ticker.clone());
                i += 1;
            };
        } else {
            let mut market_ids: Value = Object::keys(tickers.clone());
            let mut i: usize = 0;
            while i < market_ids.len() {
                let mut market_id: Value = market_ids.get(i.into());
                let mut market: Value = Binancecoinm::safe_market(self, market_id.clone(), Value::Undefined, Value::Undefined);
                let mut ticker: Value = extend_2(self.parse_ticker(tickers.get(market_id.clone()), market.clone()), params.clone());
                results.push(ticker.clone());
                i += 1;
            };
        };
        symbols = Binancecoinm::market_symbols(self, symbols.clone());
        return Binancecoinm::filter_by_array(self, results.clone(), Value::from("symbol"), symbols.clone(), Value::Undefined);
    }

    fn parse_deposit_addresses(&self, mut addresses: Value, mut codes: Value, mut indexed: Value, mut params: Value) -> Value {
        indexed = indexed.or_default(true.into());
        params = params.or_default(Value::new_object());
        let mut result: Value = Value::new_array();
        let mut i: usize = 0;
        while i < addresses.len() {
            let mut address: Value = extend_2(self.parse_deposit_address(addresses.get(i.into()), Value::Undefined), params.clone());
            result.push(address.clone());
            i += 1;
        };
        if codes.clone().is_nonnullish() {
            result = Binancecoinm::filter_by_array(self, result.clone(), Value::from("currency"), codes.clone(), false.into());
        };
        result = if indexed.is_truthy() { self.index_by(result.clone(), Value::from("currency"), Value::Undefined) } else { result.clone() };
        return result.clone();
    }

    fn parse_borrow_interests(&self, mut response: Value, mut market: Value) -> Value {
        let mut interests: Value = Value::new_array();
        let mut i: usize = 0;
        while i < response.len() {
            let mut row: Value = response.get(i.into());
            interests.push(self.parse_borrow_interest(row.clone(), market.clone()));
            i += 1;
        };
        return interests.clone();
    }

    fn parse_funding_rate_histories(&self, mut response: Value, mut market: Value, mut since: Value, mut limit: Value) -> Value {
        let mut rates: Value = Value::new_array();
        let mut i: usize = 0;
        while i < response.len() {
            let mut entry: Value = response.get(i.into());
            rates.push(self.parse_funding_rate_history(entry.clone(), market.clone()));
            i += 1;
        };
        let mut sorted: Value = self.sort_by(rates.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut symbol: Value = if market.clone().is_nullish() { Value::Undefined } else { market.get(Value::from("symbol")) };
        return Binancecoinm::filter_by_symbol_since_limit(self, sorted.clone(), symbol.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    fn safe_symbol(&self, mut market_id: Value, mut market: Value, mut delimiter: Value) -> Value {
        market = Binancecoinm::safe_market(self, market_id.clone(), market.clone(), delimiter.clone());
        return market.get(Value::from("symbol"));
    }

    fn parse_funding_rate(&self, mut contract: Value, mut market: Value) -> Value {
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" parseFundingRate() is not supported yet"))"###);
        Value::Undefined
    }

    fn parse_funding_rates(&self, mut response: Value, mut market: Value) -> Value {
        let mut result: Value = Value::new_object();
        let mut i: usize = 0;
        while i < response.len() {
            let mut parsed: Value = Binancecoinm::parse_funding_rate(self, response.get(i.into()), market.clone());
            result.set(parsed.get(Value::from("symbol")), parsed.clone());
            i += 1;
        };
        return result.clone();
    }

    /// Returns true if a post only order, false otherwise
    ///
    /// @ignore
    ///
    /// # Arguments
    ///
    /// * `type` {string} - Order type
    /// * `exchangeSpecificParam` {boolean} - exchange specific postOnly
    /// * `params` {object} - exchange specific params
    fn is_post_only(&mut self, mut is_market_order: Value, mut exchange_specific_param: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut time_in_force: Value = self.safe_string_upper(params.clone(), Value::from("timeInForce"), Value::Undefined);
        let mut post_only: Value = self.safe_value_2(params.clone(), Value::from("postOnly"), Value::from("post_only"), false.into());
        // we assume timeInForce is uppercase from safeStringUpper (params, 'timeInForce')
        let mut ioc: Value = (time_in_force.clone() == Value::from("IOC")).into();
        let mut fok: Value = (time_in_force.clone() == Value::from("FOK")).into();
        let mut time_in_force_post_only: Value = (time_in_force.clone() == Value::from("PO")).into();
        post_only = (post_only.is_truthy() || time_in_force_post_only.is_truthy() || exchange_specific_param.is_truthy()).into();
        if post_only.is_truthy() {
            if ioc.is_truthy() || fok.is_truthy() {
                panic!(r###"InvalidOrder::new(self.get("id".into()) + Value::from(" postOnly orders cannot have timeInForce equal to ") + time_in_force.clone())"###);
            } else if is_market_order.is_truthy() {
                panic!(r###"InvalidOrder::new(self.get("id".into()) + Value::from(" market orders cannot be postOnly"))"###);
            } else {
                return true.into();
            };
        } else {
            return false.into();
        };
        Value::Undefined
    }

    async fn fetch_trading_fees(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTradingFees() is not supported yet"))"###);
        Value::Undefined
    }

    async fn fetch_trading_fee(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if !self.get("has".into()).get(Value::from("fetchTradingFees")).is_truthy() {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchTradingFee() is not supported yet"))"###);
        };
        return Binancecoinm::fetch_trading_fees(self, params.clone()).await;
    }

    fn parse_open_interest(&self, mut interest: Value, mut market: Value) -> Value {
        panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" parseOpenInterest () is not supported yet"))"###);
        Value::Undefined
    }

    fn parse_open_interests(&self, mut response: Value, mut market: Value, mut since: Value, mut limit: Value) -> Value {
        let mut interests: Value = Value::new_array();
        let mut i: usize = 0;
        while i < response.len() {
            let mut entry: Value = response.get(i.into());
            let mut interest: Value = Binancecoinm::parse_open_interest(self, entry.clone(), market.clone());
            interests.push(interest.clone());
            i += 1;
        };
        let mut sorted: Value = self.sort_by(interests.clone(), Value::from("timestamp"), Value::Undefined, Value::Undefined);
        let mut symbol: Value = self.safe_string(market.clone(), Value::from("symbol"), Value::Undefined);
        return Binancecoinm::filter_by_symbol_since_limit(self, sorted.clone(), symbol.clone(), since.clone(), limit.clone(), Value::Undefined);
    }

    async fn fetch_funding_rate(&mut self, mut symbol: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchFundingRates")).is_truthy() {
            Binancecoinm::load_markets(self, Value::Undefined, Value::Undefined).await;
            let mut market: Value = Binancecoinm::market(self, symbol.clone());
            if !market.get(Value::from("contract")).is_truthy() {
                panic!(r###"BadSymbol::new(self.get("id".into()) + Value::from(" fetchFundingRate() supports contract markets only"))"###);
            };
            let mut rates: Value = self.fetch_funding_rates(Value::Json(serde_json::Value::Array(vec![symbol.clone().into()])), params.clone()).await;
            let mut rate: Value = self.safe_value(rates.clone(), symbol.clone(), Value::Undefined);
            if rate.clone().is_nullish() {
                panic!(r###"NullResponse::new(self.get("id".into()) + Value::from(" fetchFundingRate () returned no data for ") + symbol.clone())"###);
            } else {
                return rate.clone();
            };
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchFundingRate () is not supported yet"))"###);
        };
        Value::Undefined
    }

    /// Returns a list of candles ordered as timestamp, open, high, low, close, undefined
    ///
    /// Fetches historical mark price candlestick data containing the open, high, low, and close price of a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch OHLCV data for
    /// * `timeframe` {string} - the length of time each candle represents
    /// * `since` {int|undefined} - timestamp in ms of the earliest candle to fetch
    /// * `limit` {int|undefined} - the maximum amount of candles to fetch
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    async fn fetch_mark_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchMarkOHLCV")).is_truthy() {
            let mut request: Value = Value::Json(normalize(&Value::Json(json!({
                "price": "mark"
            }))).unwrap());
            return Binancecoinm::fetch_ohlcv(self, symbol.clone(), timeframe.clone(), since.clone(), limit.clone(), extend_2(request.clone(), params.clone())).await;
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchMarkOHLCV () is not supported yet"))"###);
        };
        Value::Undefined
    }

    /// Returns a list of candles ordered as timestamp, open, high, low, close, undefined
    ///
    /// Fetches historical index price candlestick data containing the open, high, low, and close price of a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch OHLCV data for
    /// * `timeframe` {string} - the length of time each candle represents
    /// * `since` {int|undefined} - timestamp in ms of the earliest candle to fetch
    /// * `limit` {int|undefined} - the maximum amount of candles to fetch
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    async fn fetch_index_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchIndexOHLCV")).is_truthy() {
            let mut request: Value = Value::Json(normalize(&Value::Json(json!({
                "price": "index"
            }))).unwrap());
            return Binancecoinm::fetch_ohlcv(self, symbol.clone(), timeframe.clone(), since.clone(), limit.clone(), extend_2(request.clone(), params.clone())).await;
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchIndexOHLCV () is not supported yet"))"###);
        };
        Value::Undefined
    }

    /// Returns a list of candles ordered as timestamp, open, high, low, close, undefined
    ///
    /// Fetches historical premium index price candlestick data containing the open, high, low, and close price of a market
    ///
    /// # Arguments
    ///
    /// * `symbol` {string} - unified symbol of the market to fetch OHLCV data for
    /// * `timeframe` {string} - the length of time each candle represents
    /// * `since` {int|undefined} - timestamp in ms of the earliest candle to fetch
    /// * `limit` {int|undefined} - the maximum amount of candles to fetch
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    async fn fetch_premium_index_ohlcv(&mut self, mut symbol: Value, mut timeframe: Value, mut since: Value, mut limit: Value, mut params: Value) -> Value {
        timeframe = timeframe.or_default(Value::from("1m"));
        params = params.or_default(Value::new_object());
        if self.get("has".into()).get(Value::from("fetchPremiumIndexOHLCV")).is_truthy() {
            let mut request: Value = Value::Json(normalize(&Value::Json(json!({
                "price": "premiumIndex"
            }))).unwrap());
            return Binancecoinm::fetch_ohlcv(self, symbol.clone(), timeframe.clone(), since.clone(), limit.clone(), extend_2(request.clone(), params.clone())).await;
        } else {
            panic!(r###"NotSupported::new(self.get("id".into()) + Value::from(" fetchPremiumIndexOHLCV () is not supported yet"))"###);
        };
        Value::Undefined
    }

    /// Returns returns the exchange specific value for timeInForce
    ///
    /// @ignore
    /// * Must add timeInForce to this.options to use this method
    fn handle_time_in_force(&mut self, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut time_in_force: Value = self.safe_string_upper(params.clone(), Value::from("timeInForce"), Value::Undefined);
        // supported values GTC, IOC, PO
        if time_in_force.clone().is_nonnullish() {
            let mut exchange_value: Value = self.safe_string(self.get("options".into()).get(Value::from("timeInForce")), time_in_force.clone(), Value::Undefined);
            if exchange_value.clone().is_nullish() {
                panic!(r###"ExchangeError::new(self.get("id".into()) + Value::from(r#" does not support timeInForce ""#) + time_in_force.clone() + Value::from(r#"""#))"###);
            };
            return exchange_value.clone();
        };
        return Value::Undefined;
    }

    /// Returns the exchange specific account name or the isolated margin id for transfers
    ///
    /// @ignore
    /// * Must add accountsByType to this.options to use this method
    ///
    /// # Arguments
    ///
    /// * `account` {string} - key for account name in this.options['accountsByType']
    fn parse_account(&self, mut account: Value) -> Value {
        let mut accounts_by_type: Value = self.safe_value(self.get("options".into()), Value::from("accountsByType"), Value::new_object());
        let mut symbols: Value = self.get("symbols".into());
        if accounts_by_type.contains_key(account.clone()) {
            return accounts_by_type.get(account.clone());
        } else if self.in_array(account.clone(), symbols.clone()).is_truthy() {
            let mut market: Value = Binancecoinm::market(self, account.clone());
            return market.get(Value::from("id"));
        } else {
            return account.clone();
        };
        Value::Undefined
    }

    /// Returns {[string|undefined, object]} the marginMode in lowercase as specified by params["marginMode"], params["defaultMarginMode"] this.options["marginMode"] or this.options["defaultMarginMode"]
    ///
    /// @ignore
    ///
    /// # Arguments
    ///
    /// * `params` {object} - extra parameters specific to the exchange api endpoint
    fn handle_margin_mode_and_params(&mut self, mut method_name: Value, mut params: Value) -> Value {
        params = params.or_default(Value::new_object());
        let mut default_margin_mode: Value = self.safe_string_2(self.get("options".into()), Value::from("marginMode"), Value::from("defaultMarginMode"), Value::Undefined);
        let mut method_options: Value = self.safe_value(self.get("options".into()), method_name.clone(), Value::new_object());
        let mut method_margin_mode: Value = self.safe_string_2(method_options.clone(), Value::from("marginMode"), Value::from("defaultMarginMode"), default_margin_mode.clone());
        let mut margin_mode: Value = self.safe_string_lower_2(params.clone(), Value::from("marginMode"), Value::from("defaultMarginMode"), method_margin_mode.clone());
        if margin_mode.clone().is_nonnullish() {
            params = self.omit(params.clone(), Value::Json(serde_json::Value::Array(vec![Value::from("marginMode").into(), Value::from("defaultMarginMode").into()])));
        };
        return Value::Json(serde_json::Value::Array(vec![margin_mode.clone().into(), params.clone().into()]));
    }

    async fn load_markets_helper(&mut self, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        if !reload.is_truthy() && self.get("markets".into()).is_truthy() {
            if !self.get("markets_by_id".into()).is_truthy() {
                return Binancecoinm::set_markets(self, self.get("markets".into()), Value::Undefined);
            };
            return self.get("markets".into());
        };
        let mut currencies: Value = Value::Undefined;
        // only call if exchange API provides endpoint (true), thus avoid emulated versions ('emulated')
        if self.get("has".into()).get(Value::from("fetchCurrencies")) == true.into() {
            currencies = self.fetch_currencies(Value::Undefined).await;
        };
        let mut markets: Value = self.fetch_markets(params.clone()).await;
        return Binancecoinm::set_markets(self, markets.clone(), currencies.clone());
    }

    async fn load_markets(&mut self, mut reload: Value, mut params: Value) -> Value {
        reload = reload.or_default(false.into());
        params = params.or_default(Value::new_object());
        // this method is async, it returns a promise
        if reload.is_truthy() && !self.get("reloading_markets".into()).is_truthy() || !self.get("markets_loading".into()).is_truthy() {
            self.set("reloading_markets".into(), true.into());
            // TODO This should use a finally block
            let mut markets_loading: Value = Binancecoinm::load_markets_helper(self, reload.clone(), params.clone()).await;
            self.set("markets_loading".into(), markets_loading.clone());
            self.set("reloading_markets".into(), false.into());
            return self.get("markets_loading".into());
        };
        return self.get("markets_loading".into());
    }

    
    async fn dispatch(&mut self, method: Value, params: Value, context: Value) -> Value {
        match method {
            Value::Json(serde_json::Value::String(ref m)) => {
                match m.as_ref() {
                    "sapiGetSystemStatus" => Binancecoinm::request(self, "system/status".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetAccountSnapshot" => Binancecoinm::request(self, "accountSnapshot".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginAsset" => Binancecoinm::request(self, "margin/asset".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginPair" => Binancecoinm::request(self, "margin/pair".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginAllAssets" => Binancecoinm::request(self, "margin/allAssets".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginAllPairs" => Binancecoinm::request(self, "margin/allPairs".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginPriceIndex" => Binancecoinm::request(self, "margin/priceIndex".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetAssetAssetDividend" => Binancecoinm::request(self, "asset/assetDividend".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetAssetDribblet" => Binancecoinm::request(self, "asset/dribblet".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetAssetTransfer" => Binancecoinm::request(self, "asset/transfer".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetAssetAssetDetail" => Binancecoinm::request(self, "asset/assetDetail".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetAssetTradeFee" => Binancecoinm::request(self, "asset/tradeFee".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginLoan" => Binancecoinm::request(self, "margin/loan".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginRepay" => Binancecoinm::request(self, "margin/repay".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginAccount" => Binancecoinm::request(self, "margin/account".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginTransfer" => Binancecoinm::request(self, "margin/transfer".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginInterestHistory" => Binancecoinm::request(self, "margin/interestHistory".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginForceLiquidationRec" => Binancecoinm::request(self, "margin/forceLiquidationRec".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginOrder" => Binancecoinm::request(self, "margin/order".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginOpenOrders" => Binancecoinm::request(self, "margin/openOrders".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginAllOrders" => Binancecoinm::request(self, "margin/allOrders".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginMyTrades" => Binancecoinm::request(self, "margin/myTrades".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginMaxBorrowable" => Binancecoinm::request(self, "margin/maxBorrowable".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginMaxTransferable" => Binancecoinm::request(self, "margin/maxTransferable".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginIsolatedTransfer" => Binancecoinm::request(self, "margin/isolated/transfer".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginIsolatedAccount" => Binancecoinm::request(self, "margin/isolated/account".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginIsolatedPair" => Binancecoinm::request(self, "margin/isolated/pair".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginIsolatedAllPairs" => Binancecoinm::request(self, "margin/isolated/allPairs".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginIsolatedAccountLimit" => Binancecoinm::request(self, "margin/isolated/accountLimit".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginInterestRateHistory" => Binancecoinm::request(self, "margin/interestRateHistory".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginOrderList" => Binancecoinm::request(self, "margin/orderList".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginAllOrderList" => Binancecoinm::request(self, "margin/allOrderList".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginOpenOrderList" => Binancecoinm::request(self, "margin/openOrderList".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginCrossMarginData" => Binancecoinm::request(self, "margin/crossMarginData".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginIsolatedMarginData" => Binancecoinm::request(self, "margin/isolatedMarginData".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginIsolatedMarginTier" => Binancecoinm::request(self, "margin/isolatedMarginTier".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginRateLimitOrder" => Binancecoinm::request(self, "margin/rateLimit/order".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMarginDribblet" => Binancecoinm::request(self, "margin/dribblet".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetLoanIncome" => Binancecoinm::request(self, "loan/income".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetFiatOrders" => Binancecoinm::request(self, "fiat/orders".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetFiatPayments" => Binancecoinm::request(self, "fiat/payments".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetFuturesTransfer" => Binancecoinm::request(self, "futures/transfer".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetFuturesLoanBorrowHistory" => Binancecoinm::request(self, "futures/loan/borrow/history".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetFuturesLoanRepayHistory" => Binancecoinm::request(self, "futures/loan/repay/history".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetFuturesLoanWallet" => Binancecoinm::request(self, "futures/loan/wallet".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetFuturesLoanConfigs" => Binancecoinm::request(self, "futures/loan/configs".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetFuturesLoanCalcAdjustLevel" => Binancecoinm::request(self, "futures/loan/calcAdjustLevel".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetFuturesLoanCalcMaxAdjustAmount" => Binancecoinm::request(self, "futures/loan/calcMaxAdjustAmount".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetFuturesLoanAdjustCollateralHistory" => Binancecoinm::request(self, "futures/loan/adjustCollateral/history".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetFuturesLoanLiquidationHistory" => Binancecoinm::request(self, "futures/loan/liquidationHistory".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetRebateTaxQuery" => Binancecoinm::request(self, "rebate/taxQuery".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetCapitalConfigGetall" => Binancecoinm::request(self, "capital/config/getall".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetCapitalDepositAddress" => Binancecoinm::request(self, "capital/deposit/address".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetCapitalDepositHisrec" => Binancecoinm::request(self, "capital/deposit/hisrec".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetCapitalDepositSubAddress" => Binancecoinm::request(self, "capital/deposit/subAddress".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetCapitalDepositSubHisrec" => Binancecoinm::request(self, "capital/deposit/subHisrec".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetCapitalWithdrawHistory" => Binancecoinm::request(self, "capital/withdraw/history".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetConvertTradeFlow" => Binancecoinm::request(self, "convert/tradeFlow".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetAccountStatus" => Binancecoinm::request(self, "account/status".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetAccountApiTradingStatus" => Binancecoinm::request(self, "account/apiTradingStatus".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetAccountApiRestrictionsIpRestriction" => Binancecoinm::request(self, "account/apiRestrictions/ipRestriction".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBnbBurn" => Binancecoinm::request(self, "bnbBurn".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetSubAccountFuturesAccount" => Binancecoinm::request(self, "sub-account/futures/account".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetSubAccountFuturesAccountSummary" => Binancecoinm::request(self, "sub-account/futures/accountSummary".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetSubAccountFuturesPositionRisk" => Binancecoinm::request(self, "sub-account/futures/positionRisk".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetSubAccountFuturesInternalTransfer" => Binancecoinm::request(self, "sub-account/futures/internalTransfer".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetSubAccountList" => Binancecoinm::request(self, "sub-account/list".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetSubAccountMarginAccount" => Binancecoinm::request(self, "sub-account/margin/account".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetSubAccountMarginAccountSummary" => Binancecoinm::request(self, "sub-account/margin/accountSummary".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetSubAccountSpotSummary" => Binancecoinm::request(self, "sub-account/spotSummary".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetSubAccountStatus" => Binancecoinm::request(self, "sub-account/status".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetSubAccountSubTransferHistory" => Binancecoinm::request(self, "sub-account/sub/transfer/history".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetSubAccountTransferSubUserHistory" => Binancecoinm::request(self, "sub-account/transfer/subUserHistory".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetSubAccountUniversalTransfer" => Binancecoinm::request(self, "sub-account/universalTransfer".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetManagedSubaccountAsset" => Binancecoinm::request(self, "managed-subaccount/asset".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetManagedSubaccountAccountSnapshot" => Binancecoinm::request(self, "managed-subaccount/accountSnapshot".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetLendingDailyProductList" => Binancecoinm::request(self, "lending/daily/product/list".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetLendingDailyUserLeftQuota" => Binancecoinm::request(self, "lending/daily/userLeftQuota".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetLendingDailyUserRedemptionQuota" => Binancecoinm::request(self, "lending/daily/userRedemptionQuota".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetLendingDailyTokenPosition" => Binancecoinm::request(self, "lending/daily/token/position".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetLendingUnionAccount" => Binancecoinm::request(self, "lending/union/account".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetLendingUnionPurchaseRecord" => Binancecoinm::request(self, "lending/union/purchaseRecord".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetLendingUnionRedemptionRecord" => Binancecoinm::request(self, "lending/union/redemptionRecord".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetLendingUnionInterestHistory" => Binancecoinm::request(self, "lending/union/interestHistory".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetLendingProjectList" => Binancecoinm::request(self, "lending/project/list".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetLendingProjectPositionList" => Binancecoinm::request(self, "lending/project/position/list".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMiningPubAlgoList" => Binancecoinm::request(self, "mining/pub/algoList".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMiningPubCoinList" => Binancecoinm::request(self, "mining/pub/coinList".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMiningWorkerDetail" => Binancecoinm::request(self, "mining/worker/detail".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMiningWorkerList" => Binancecoinm::request(self, "mining/worker/list".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMiningPaymentList" => Binancecoinm::request(self, "mining/payment/list".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMiningStatisticsUserStatus" => Binancecoinm::request(self, "mining/statistics/user/status".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMiningStatisticsUserList" => Binancecoinm::request(self, "mining/statistics/user/list".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetMiningPaymentUid" => Binancecoinm::request(self, "mining/payment/uid".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBswapPools" => Binancecoinm::request(self, "bswap/pools".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBswapLiquidity" => Binancecoinm::request(self, "bswap/liquidity".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBswapLiquidityOps" => Binancecoinm::request(self, "bswap/liquidityOps".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBswapQuote" => Binancecoinm::request(self, "bswap/quote".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBswapSwap" => Binancecoinm::request(self, "bswap/swap".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBswapPoolConfigure" => Binancecoinm::request(self, "bswap/poolConfigure".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBswapAddLiquidityPreview" => Binancecoinm::request(self, "bswap/addLiquidityPreview".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBswapRemoveLiquidityPreview" => Binancecoinm::request(self, "bswap/removeLiquidityPreview".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBswapUnclaimedRewards" => Binancecoinm::request(self, "bswap/unclaimedRewards".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBswapClaimedHistory" => Binancecoinm::request(self, "bswap/claimedHistory".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBlvtTokenInfo" => Binancecoinm::request(self, "blvt/tokenInfo".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBlvtSubscribeRecord" => Binancecoinm::request(self, "blvt/subscribe/record".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBlvtRedeemRecord" => Binancecoinm::request(self, "blvt/redeem/record".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBlvtUserLimit" => Binancecoinm::request(self, "blvt/userLimit".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetApiReferralIfNewUser" => Binancecoinm::request(self, "apiReferral/ifNewUser".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetApiReferralCustomization" => Binancecoinm::request(self, "apiReferral/customization".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetApiReferralUserCustomization" => Binancecoinm::request(self, "apiReferral/userCustomization".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetApiReferralRebateRecentRecord" => Binancecoinm::request(self, "apiReferral/rebate/recentRecord".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetApiReferralRebateHistoricalRecord" => Binancecoinm::request(self, "apiReferral/rebate/historicalRecord".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetApiReferralKickbackRecentRecord" => Binancecoinm::request(self, "apiReferral/kickback/recentRecord".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetApiReferralKickbackHistoricalRecord" => Binancecoinm::request(self, "apiReferral/kickback/historicalRecord".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerSubAccountApi" => Binancecoinm::request(self, "broker/subAccountApi".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerSubAccount" => Binancecoinm::request(self, "broker/subAccount".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerSubAccountApiCommissionFutures" => Binancecoinm::request(self, "broker/subAccountApi/commission/futures".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerSubAccountApiCommissionCoinFutures" => Binancecoinm::request(self, "broker/subAccountApi/commission/coinFutures".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerInfo" => Binancecoinm::request(self, "broker/info".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerTransfer" => Binancecoinm::request(self, "broker/transfer".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerTransferFutures" => Binancecoinm::request(self, "broker/transfer/futures".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerRebateRecentRecord" => Binancecoinm::request(self, "broker/rebate/recentRecord".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerRebateHistoricalRecord" => Binancecoinm::request(self, "broker/rebate/historicalRecord".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerSubAccountBnbBurnStatus" => Binancecoinm::request(self, "broker/subAccount/bnbBurn/status".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerSubAccountDepositHist" => Binancecoinm::request(self, "broker/subAccount/depositHist".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerSubAccountSpotSummary" => Binancecoinm::request(self, "broker/subAccount/spotSummary".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerSubAccountMarginSummary" => Binancecoinm::request(self, "broker/subAccount/marginSummary".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerSubAccountFuturesSummary" => Binancecoinm::request(self, "broker/subAccount/futuresSummary".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerRebateFuturesRecentRecord" => Binancecoinm::request(self, "broker/rebate/futures/recentRecord".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerSubAccountApiIpRestriction" => Binancecoinm::request(self, "broker/subAccountApi/ipRestriction".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetBrokerUniversalTransfer" => Binancecoinm::request(self, "broker/universalTransfer".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetAccountApiRestrictions" => Binancecoinm::request(self, "account/apiRestrictions".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetC2cOrderMatchListUserOrderHistory" => Binancecoinm::request(self, "c2c/orderMatch/listUserOrderHistory".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetNftHistoryTransactions" => Binancecoinm::request(self, "nft/history/transactions".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetNftHistoryDeposit" => Binancecoinm::request(self, "nft/history/deposit".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetNftHistoryWithdraw" => Binancecoinm::request(self, "nft/history/withdraw".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetNftUserGetAsset" => Binancecoinm::request(self, "nft/user/getAsset".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetPayTransactions" => Binancecoinm::request(self, "pay/transactions".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetGiftcardVerify" => Binancecoinm::request(self, "giftcard/verify".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetGiftcardCryptographyRsaPublicKey" => Binancecoinm::request(self, "giftcard/cryptography/rsa-public-key".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetAlgoFuturesOpenOrders" => Binancecoinm::request(self, "algo/futures/openOrders".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetAlgoFuturesHistoricalOrders" => Binancecoinm::request(self, "algo/futures/historicalOrders".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetAlgoFuturesSubOrders" => Binancecoinm::request(self, "algo/futures/subOrders".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetPortfolioAccount" => Binancecoinm::request(self, "portfolio/account".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetPortfolioCollateralRate" => Binancecoinm::request(self, "portfolio/collateralRate".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetPortfolioPmLoan" => Binancecoinm::request(self, "portfolio/pmLoan".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetStakingProductList" => Binancecoinm::request(self, "staking/productList".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetStakingPosition" => Binancecoinm::request(self, "staking/position".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetStakingStakingRecord" => Binancecoinm::request(self, "staking/stakingRecord".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiGetStakingPersonalLeftQuota" => Binancecoinm::request(self, "staking/personalLeftQuota".into(), "sapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostAssetDust" => Binancecoinm::request(self, "asset/dust".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostAssetDustBtc" => Binancecoinm::request(self, "asset/dust-btc".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostAssetTransfer" => Binancecoinm::request(self, "asset/transfer".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostAssetGetFundingAsset" => Binancecoinm::request(self, "asset/get-funding-asset".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostAccountDisableFastWithdrawSwitch" => Binancecoinm::request(self, "account/disableFastWithdrawSwitch".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostAccountEnableFastWithdrawSwitch" => Binancecoinm::request(self, "account/enableFastWithdrawSwitch".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostCapitalWithdrawApply" => Binancecoinm::request(self, "capital/withdraw/apply".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostMarginTransfer" => Binancecoinm::request(self, "margin/transfer".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostMarginLoan" => Binancecoinm::request(self, "margin/loan".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostMarginRepay" => Binancecoinm::request(self, "margin/repay".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostMarginOrder" => Binancecoinm::request(self, "margin/order".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostMarginOrderOco" => Binancecoinm::request(self, "margin/order/oco".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostMarginIsolatedTransfer" => Binancecoinm::request(self, "margin/isolated/transfer".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostMarginIsolatedAccount" => Binancecoinm::request(self, "margin/isolated/account".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBnbBurn" => Binancecoinm::request(self, "bnbBurn".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostSubAccountMarginTransfer" => Binancecoinm::request(self, "sub-account/margin/transfer".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostSubAccountMarginEnable" => Binancecoinm::request(self, "sub-account/margin/enable".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostSubAccountFuturesEnable" => Binancecoinm::request(self, "sub-account/futures/enable".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostSubAccountFuturesTransfer" => Binancecoinm::request(self, "sub-account/futures/transfer".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostSubAccountFuturesInternalTransfer" => Binancecoinm::request(self, "sub-account/futures/internalTransfer".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostSubAccountTransferSubToSub" => Binancecoinm::request(self, "sub-account/transfer/subToSub".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostSubAccountTransferSubToMaster" => Binancecoinm::request(self, "sub-account/transfer/subToMaster".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostSubAccountUniversalTransfer" => Binancecoinm::request(self, "sub-account/universalTransfer".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostManagedSubaccountDeposit" => Binancecoinm::request(self, "managed-subaccount/deposit".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostManagedSubaccountWithdraw" => Binancecoinm::request(self, "managed-subaccount/withdraw".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostUserDataStream" => Binancecoinm::request(self, "userDataStream".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostUserDataStreamIsolated" => Binancecoinm::request(self, "userDataStream/isolated".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostFuturesTransfer" => Binancecoinm::request(self, "futures/transfer".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostFuturesLoanBorrow" => Binancecoinm::request(self, "futures/loan/borrow".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostFuturesLoanRepay" => Binancecoinm::request(self, "futures/loan/repay".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostFuturesLoanAdjustCollateral" => Binancecoinm::request(self, "futures/loan/adjustCollateral".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostLendingCustomizedFixedPurchase" => Binancecoinm::request(self, "lending/customizedFixed/purchase".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostLendingDailyPurchase" => Binancecoinm::request(self, "lending/daily/purchase".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostLendingDailyRedeem" => Binancecoinm::request(self, "lending/daily/redeem".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBswapLiquidityAdd" => Binancecoinm::request(self, "bswap/liquidityAdd".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBswapLiquidityRemove" => Binancecoinm::request(self, "bswap/liquidityRemove".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBswapSwap" => Binancecoinm::request(self, "bswap/swap".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBswapClaimRewards" => Binancecoinm::request(self, "bswap/claimRewards".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBlvtSubscribe" => Binancecoinm::request(self, "blvt/subscribe".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBlvtRedeem" => Binancecoinm::request(self, "blvt/redeem".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostApiReferralCustomization" => Binancecoinm::request(self, "apiReferral/customization".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostApiReferralUserCustomization" => Binancecoinm::request(self, "apiReferral/userCustomization".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostApiReferralRebateHistoricalRecord" => Binancecoinm::request(self, "apiReferral/rebate/historicalRecord".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostApiReferralKickbackHistoricalRecord" => Binancecoinm::request(self, "apiReferral/kickback/historicalRecord".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerSubAccount" => Binancecoinm::request(self, "broker/subAccount".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerSubAccountMargin" => Binancecoinm::request(self, "broker/subAccount/margin".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerSubAccountFutures" => Binancecoinm::request(self, "broker/subAccount/futures".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerSubAccountApi" => Binancecoinm::request(self, "broker/subAccountApi".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerSubAccountApiPermission" => Binancecoinm::request(self, "broker/subAccountApi/permission".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerSubAccountApiCommission" => Binancecoinm::request(self, "broker/subAccountApi/commission".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerSubAccountApiCommissionFutures" => Binancecoinm::request(self, "broker/subAccountApi/commission/futures".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerSubAccountApiCommissionCoinFutures" => Binancecoinm::request(self, "broker/subAccountApi/commission/coinFutures".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerTransfer" => Binancecoinm::request(self, "broker/transfer".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerTransferFutures" => Binancecoinm::request(self, "broker/transfer/futures".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerRebateHistoricalRecord" => Binancecoinm::request(self, "broker/rebate/historicalRecord".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerSubAccountBnbBurnSpot" => Binancecoinm::request(self, "broker/subAccount/bnbBurn/spot".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerSubAccountBnbBurnMarginInterest" => Binancecoinm::request(self, "broker/subAccount/bnbBurn/marginInterest".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerSubAccountBlvt" => Binancecoinm::request(self, "broker/subAccount/blvt".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerSubAccountApiIpRestriction" => Binancecoinm::request(self, "broker/subAccountApi/ipRestriction".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerSubAccountApiIpRestrictionIpList" => Binancecoinm::request(self, "broker/subAccountApi/ipRestriction/ipList".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerUniversalTransfer" => Binancecoinm::request(self, "broker/universalTransfer".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerSubAccountApiPermissionUniversalTransfer" => Binancecoinm::request(self, "broker/subAccountApi/permission/universalTransfer".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostBrokerSubAccountApiPermissionVanillaOptions" => Binancecoinm::request(self, "broker/subAccountApi/permission/vanillaOptions".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostGiftcardCreateCode" => Binancecoinm::request(self, "giftcard/createCode".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostGiftcardRedeemCode" => Binancecoinm::request(self, "giftcard/redeemCode".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostAlgoFuturesNewOrderVp" => Binancecoinm::request(self, "algo/futures/newOrderVp".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostAlgoFuturesNewOrderTwap" => Binancecoinm::request(self, "algo/futures/newOrderTwap".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostStakingPurchase" => Binancecoinm::request(self, "staking/purchase".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostStakingRedeem" => Binancecoinm::request(self, "staking/redeem".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostStakingSetAutoStaking" => Binancecoinm::request(self, "staking/setAutoStaking".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPostPortfolioRepay" => Binancecoinm::request(self, "portfolio/repay".into(), "sapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPutUserDataStream" => Binancecoinm::request(self, "userDataStream".into(), "sapi".into(), "PUT".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiPutUserDataStreamIsolated" => Binancecoinm::request(self, "userDataStream/isolated".into(), "sapi".into(), "PUT".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiDeleteMarginOpenOrders" => Binancecoinm::request(self, "margin/openOrders".into(), "sapi".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiDeleteMarginOrder" => Binancecoinm::request(self, "margin/order".into(), "sapi".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiDeleteMarginOrderList" => Binancecoinm::request(self, "margin/orderList".into(), "sapi".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiDeleteMarginIsolatedAccount" => Binancecoinm::request(self, "margin/isolated/account".into(), "sapi".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiDeleteUserDataStream" => Binancecoinm::request(self, "userDataStream".into(), "sapi".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiDeleteUserDataStreamIsolated" => Binancecoinm::request(self, "userDataStream/isolated".into(), "sapi".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiDeleteBrokerSubAccountApi" => Binancecoinm::request(self, "broker/subAccountApi".into(), "sapi".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiDeleteBrokerSubAccountApiIpRestrictionIpList" => Binancecoinm::request(self, "broker/subAccountApi/ipRestriction/ipList".into(), "sapi".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiDeleteAlgoFuturesOrder" => Binancecoinm::request(self, "algo/futures/order".into(), "sapi".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiV3GetSubAccountAssets" => Binancecoinm::request(self, "sub-account/assets".into(), "sapiV3".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "sapiV3PostAssetGetUserAsset" => Binancecoinm::request(self, "asset/getUserAsset".into(), "sapiV3".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "wapiPostWithdraw" => Binancecoinm::request(self, "withdraw".into(), "wapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "wapiPostSubAccountTransfer" => Binancecoinm::request(self, "sub-account/transfer".into(), "wapi".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "wapiGetDepositHistory" => Binancecoinm::request(self, "depositHistory".into(), "wapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "wapiGetWithdrawHistory" => Binancecoinm::request(self, "withdrawHistory".into(), "wapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "wapiGetDepositAddress" => Binancecoinm::request(self, "depositAddress".into(), "wapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "wapiGetAccountStatus" => Binancecoinm::request(self, "accountStatus".into(), "wapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "wapiGetSystemStatus" => Binancecoinm::request(self, "systemStatus".into(), "wapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "wapiGetApiTradingStatus" => Binancecoinm::request(self, "apiTradingStatus".into(), "wapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "wapiGetUserAssetDribbletLog" => Binancecoinm::request(self, "userAssetDribbletLog".into(), "wapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "wapiGetTradeFee" => Binancecoinm::request(self, "tradeFee".into(), "wapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "wapiGetAssetDetail" => Binancecoinm::request(self, "assetDetail".into(), "wapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "wapiGetSubAccountList" => Binancecoinm::request(self, "sub-account/list".into(), "wapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "wapiGetSubAccountTransferHistory" => Binancecoinm::request(self, "sub-account/transfer/history".into(), "wapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "wapiGetSubAccountAssets" => Binancecoinm::request(self, "sub-account/assets".into(), "wapi".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetPing" => Binancecoinm::request(self, "ping".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetTime" => Binancecoinm::request(self, "time".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetExchangeInfo" => Binancecoinm::request(self, "exchangeInfo".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetDepth" => Binancecoinm::request(self, "depth".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetTrades" => Binancecoinm::request(self, "trades".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetHistoricalTrades" => Binancecoinm::request(self, "historicalTrades".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetAggTrades" => Binancecoinm::request(self, "aggTrades".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetPremiumIndex" => Binancecoinm::request(self, "premiumIndex".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetFundingRate" => Binancecoinm::request(self, "fundingRate".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetKlines" => Binancecoinm::request(self, "klines".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetContinuousKlines" => Binancecoinm::request(self, "continuousKlines".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetIndexPriceKlines" => Binancecoinm::request(self, "indexPriceKlines".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetMarkPriceKlines" => Binancecoinm::request(self, "markPriceKlines".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetTicker24hr" => Binancecoinm::request(self, "ticker/24hr".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetTickerPrice" => Binancecoinm::request(self, "ticker/price".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetTickerBookTicker" => Binancecoinm::request(self, "ticker/bookTicker".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetOpenInterest" => Binancecoinm::request(self, "openInterest".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPublicGetPmExchangeInfo" => Binancecoinm::request(self, "pmExchangeInfo".into(), "dapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiDataGetOpenInterestHist" => Binancecoinm::request(self, "openInterestHist".into(), "dapiData".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiDataGetTopLongShortAccountRatio" => Binancecoinm::request(self, "topLongShortAccountRatio".into(), "dapiData".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiDataGetTopLongShortPositionRatio" => Binancecoinm::request(self, "topLongShortPositionRatio".into(), "dapiData".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiDataGetGlobalLongShortAccountRatio" => Binancecoinm::request(self, "globalLongShortAccountRatio".into(), "dapiData".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiDataGetTakerBuySellVol" => Binancecoinm::request(self, "takerBuySellVol".into(), "dapiData".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiDataGetBasis" => Binancecoinm::request(self, "basis".into(), "dapiData".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateGetPositionSideDual" => Binancecoinm::request(self, "positionSide/dual".into(), "dapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateGetOrder" => Binancecoinm::request(self, "order".into(), "dapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateGetOpenOrder" => Binancecoinm::request(self, "openOrder".into(), "dapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateGetOpenOrders" => Binancecoinm::request(self, "openOrders".into(), "dapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateGetAllOrders" => Binancecoinm::request(self, "allOrders".into(), "dapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateGetBalance" => Binancecoinm::request(self, "balance".into(), "dapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateGetAccount" => Binancecoinm::request(self, "account".into(), "dapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateGetPositionMarginHistory" => Binancecoinm::request(self, "positionMargin/history".into(), "dapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateGetPositionRisk" => Binancecoinm::request(self, "positionRisk".into(), "dapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateGetUserTrades" => Binancecoinm::request(self, "userTrades".into(), "dapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateGetIncome" => Binancecoinm::request(self, "income".into(), "dapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateGetLeverageBracket" => Binancecoinm::request(self, "leverageBracket".into(), "dapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateGetForceOrders" => Binancecoinm::request(self, "forceOrders".into(), "dapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateGetAdlQuantile" => Binancecoinm::request(self, "adlQuantile".into(), "dapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateGetOrderAmendment" => Binancecoinm::request(self, "orderAmendment".into(), "dapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivatePostPositionSideDual" => Binancecoinm::request(self, "positionSide/dual".into(), "dapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivatePostOrder" => Binancecoinm::request(self, "order".into(), "dapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivatePostBatchOrders" => Binancecoinm::request(self, "batchOrders".into(), "dapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivatePostCountdownCancelAll" => Binancecoinm::request(self, "countdownCancelAll".into(), "dapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivatePostLeverage" => Binancecoinm::request(self, "leverage".into(), "dapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivatePostMarginType" => Binancecoinm::request(self, "marginType".into(), "dapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivatePostPositionMargin" => Binancecoinm::request(self, "positionMargin".into(), "dapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivatePostListenKey" => Binancecoinm::request(self, "listenKey".into(), "dapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivatePutListenKey" => Binancecoinm::request(self, "listenKey".into(), "dapiPrivate".into(), "PUT".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivatePutOrder" => Binancecoinm::request(self, "order".into(), "dapiPrivate".into(), "PUT".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivatePutBatchOrders" => Binancecoinm::request(self, "batchOrders".into(), "dapiPrivate".into(), "PUT".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateDeleteOrder" => Binancecoinm::request(self, "order".into(), "dapiPrivate".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateDeleteAllOpenOrders" => Binancecoinm::request(self, "allOpenOrders".into(), "dapiPrivate".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateDeleteBatchOrders" => Binancecoinm::request(self, "batchOrders".into(), "dapiPrivate".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateDeleteListenKey" => Binancecoinm::request(self, "listenKey".into(), "dapiPrivate".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "dapiPrivateV2GetLeverageBracket" => Binancecoinm::request(self, "leverageBracket".into(), "dapiPrivateV2".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetPing" => Binancecoinm::request(self, "ping".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetTime" => Binancecoinm::request(self, "time".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetExchangeInfo" => Binancecoinm::request(self, "exchangeInfo".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetDepth" => Binancecoinm::request(self, "depth".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetTrades" => Binancecoinm::request(self, "trades".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetHistoricalTrades" => Binancecoinm::request(self, "historicalTrades".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetAggTrades" => Binancecoinm::request(self, "aggTrades".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetKlines" => Binancecoinm::request(self, "klines".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetContinuousKlines" => Binancecoinm::request(self, "continuousKlines".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetMarkPriceKlines" => Binancecoinm::request(self, "markPriceKlines".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetIndexPriceKlines" => Binancecoinm::request(self, "indexPriceKlines".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetFundingRate" => Binancecoinm::request(self, "fundingRate".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetPremiumIndex" => Binancecoinm::request(self, "premiumIndex".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetTicker24hr" => Binancecoinm::request(self, "ticker/24hr".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetTickerPrice" => Binancecoinm::request(self, "ticker/price".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetTickerBookTicker" => Binancecoinm::request(self, "ticker/bookTicker".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetOpenInterest" => Binancecoinm::request(self, "openInterest".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetIndexInfo" => Binancecoinm::request(self, "indexInfo".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetApiTradingStatus" => Binancecoinm::request(self, "apiTradingStatus".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetLvtKlines" => Binancecoinm::request(self, "lvtKlines".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPublicGetPmExchangeInfo" => Binancecoinm::request(self, "pmExchangeInfo".into(), "fapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiDataGetOpenInterestHist" => Binancecoinm::request(self, "openInterestHist".into(), "fapiData".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiDataGetTopLongShortAccountRatio" => Binancecoinm::request(self, "topLongShortAccountRatio".into(), "fapiData".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiDataGetTopLongShortPositionRatio" => Binancecoinm::request(self, "topLongShortPositionRatio".into(), "fapiData".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiDataGetGlobalLongShortAccountRatio" => Binancecoinm::request(self, "globalLongShortAccountRatio".into(), "fapiData".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiDataGetTakerlongshortRatio" => Binancecoinm::request(self, "takerlongshortRatio".into(), "fapiData".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetForceOrders" => Binancecoinm::request(self, "forceOrders".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetAllOrders" => Binancecoinm::request(self, "allOrders".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetOpenOrder" => Binancecoinm::request(self, "openOrder".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetOpenOrders" => Binancecoinm::request(self, "openOrders".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetOrder" => Binancecoinm::request(self, "order".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetAccount" => Binancecoinm::request(self, "account".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetBalance" => Binancecoinm::request(self, "balance".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetLeverageBracket" => Binancecoinm::request(self, "leverageBracket".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetPositionMarginHistory" => Binancecoinm::request(self, "positionMargin/history".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetPositionRisk" => Binancecoinm::request(self, "positionRisk".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetPositionSideDual" => Binancecoinm::request(self, "positionSide/dual".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetUserTrades" => Binancecoinm::request(self, "userTrades".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetIncome" => Binancecoinm::request(self, "income".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetCommissionRate" => Binancecoinm::request(self, "commissionRate".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetApiTradingStatus" => Binancecoinm::request(self, "apiTradingStatus".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetMultiAssetsMargin" => Binancecoinm::request(self, "multiAssetsMargin".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetApiReferralIfNewUser" => Binancecoinm::request(self, "apiReferral/ifNewUser".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetApiReferralCustomization" => Binancecoinm::request(self, "apiReferral/customization".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetApiReferralUserCustomization" => Binancecoinm::request(self, "apiReferral/userCustomization".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetApiReferralTraderNum" => Binancecoinm::request(self, "apiReferral/traderNum".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetApiReferralOverview" => Binancecoinm::request(self, "apiReferral/overview".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetApiReferralTradeVol" => Binancecoinm::request(self, "apiReferral/tradeVol".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetApiReferralRebateVol" => Binancecoinm::request(self, "apiReferral/rebateVol".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetApiReferralTraderSummary" => Binancecoinm::request(self, "apiReferral/traderSummary".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateGetAdlQuantile" => Binancecoinm::request(self, "adlQuantile".into(), "fapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivatePostBatchOrders" => Binancecoinm::request(self, "batchOrders".into(), "fapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivatePostPositionSideDual" => Binancecoinm::request(self, "positionSide/dual".into(), "fapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivatePostPositionMargin" => Binancecoinm::request(self, "positionMargin".into(), "fapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivatePostMarginType" => Binancecoinm::request(self, "marginType".into(), "fapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivatePostOrder" => Binancecoinm::request(self, "order".into(), "fapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivatePostLeverage" => Binancecoinm::request(self, "leverage".into(), "fapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivatePostListenKey" => Binancecoinm::request(self, "listenKey".into(), "fapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivatePostCountdownCancelAll" => Binancecoinm::request(self, "countdownCancelAll".into(), "fapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivatePostMultiAssetsMargin" => Binancecoinm::request(self, "multiAssetsMargin".into(), "fapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivatePostApiReferralCustomization" => Binancecoinm::request(self, "apiReferral/customization".into(), "fapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivatePostApiReferralUserCustomization" => Binancecoinm::request(self, "apiReferral/userCustomization".into(), "fapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivatePutListenKey" => Binancecoinm::request(self, "listenKey".into(), "fapiPrivate".into(), "PUT".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateDeleteBatchOrders" => Binancecoinm::request(self, "batchOrders".into(), "fapiPrivate".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateDeleteOrder" => Binancecoinm::request(self, "order".into(), "fapiPrivate".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateDeleteAllOpenOrders" => Binancecoinm::request(self, "allOpenOrders".into(), "fapiPrivate".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateDeleteListenKey" => Binancecoinm::request(self, "listenKey".into(), "fapiPrivate".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateV2GetAccount" => Binancecoinm::request(self, "account".into(), "fapiPrivateV2".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateV2GetBalance" => Binancecoinm::request(self, "balance".into(), "fapiPrivateV2".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "fapiPrivateV2GetPositionRisk" => Binancecoinm::request(self, "positionRisk".into(), "fapiPrivateV2".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPublicGetPing" => Binancecoinm::request(self, "ping".into(), "vapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPublicGetTime" => Binancecoinm::request(self, "time".into(), "vapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPublicGetOptionInfo" => Binancecoinm::request(self, "optionInfo".into(), "vapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPublicGetExchangeInfo" => Binancecoinm::request(self, "exchangeInfo".into(), "vapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPublicGetIndex" => Binancecoinm::request(self, "index".into(), "vapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPublicGetTicker" => Binancecoinm::request(self, "ticker".into(), "vapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPublicGetMark" => Binancecoinm::request(self, "mark".into(), "vapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPublicGetDepth" => Binancecoinm::request(self, "depth".into(), "vapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPublicGetKlines" => Binancecoinm::request(self, "klines".into(), "vapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPublicGetTrades" => Binancecoinm::request(self, "trades".into(), "vapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPublicGetHistoricalTrades" => Binancecoinm::request(self, "historicalTrades".into(), "vapiPublic".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivateGetAccount" => Binancecoinm::request(self, "account".into(), "vapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivateGetPosition" => Binancecoinm::request(self, "position".into(), "vapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivateGetOrder" => Binancecoinm::request(self, "order".into(), "vapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivateGetOpenOrders" => Binancecoinm::request(self, "openOrders".into(), "vapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivateGetHistoryOrders" => Binancecoinm::request(self, "historyOrders".into(), "vapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivateGetUserTrades" => Binancecoinm::request(self, "userTrades".into(), "vapiPrivate".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivatePostTransfer" => Binancecoinm::request(self, "transfer".into(), "vapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivatePostBill" => Binancecoinm::request(self, "bill".into(), "vapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivatePostOrder" => Binancecoinm::request(self, "order".into(), "vapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivatePostBatchOrders" => Binancecoinm::request(self, "batchOrders".into(), "vapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivatePostUserDataStream" => Binancecoinm::request(self, "userDataStream".into(), "vapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivatePostOpenAccount" => Binancecoinm::request(self, "openAccount".into(), "vapiPrivate".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivatePutUserDataStream" => Binancecoinm::request(self, "userDataStream".into(), "vapiPrivate".into(), "PUT".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivateDeleteOrder" => Binancecoinm::request(self, "order".into(), "vapiPrivate".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivateDeleteBatchOrders" => Binancecoinm::request(self, "batchOrders".into(), "vapiPrivate".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivateDeleteAllOpenOrders" => Binancecoinm::request(self, "allOpenOrders".into(), "vapiPrivate".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "vapiPrivateDeleteUserDataStream" => Binancecoinm::request(self, "userDataStream".into(), "vapiPrivate".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetPing" => Binancecoinm::request(self, "ping".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetTime" => Binancecoinm::request(self, "time".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetDepth" => Binancecoinm::request(self, "depth".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetTrades" => Binancecoinm::request(self, "trades".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetAggTrades" => Binancecoinm::request(self, "aggTrades".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetHistoricalTrades" => Binancecoinm::request(self, "historicalTrades".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetKlines" => Binancecoinm::request(self, "klines".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetTicker24hr" => Binancecoinm::request(self, "ticker/24hr".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetTickerPrice" => Binancecoinm::request(self, "ticker/price".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetTickerBookTicker" => Binancecoinm::request(self, "ticker/bookTicker".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicGetExchangeInfo" => Binancecoinm::request(self, "exchangeInfo".into(), "public".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicPutUserDataStream" => Binancecoinm::request(self, "userDataStream".into(), "public".into(), "PUT".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicPostUserDataStream" => Binancecoinm::request(self, "userDataStream".into(), "public".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "publicDeleteUserDataStream" => Binancecoinm::request(self, "userDataStream".into(), "public".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetAllOrderList" => Binancecoinm::request(self, "allOrderList".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOpenOrderList" => Binancecoinm::request(self, "openOrderList".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOrderList" => Binancecoinm::request(self, "orderList".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOrder" => Binancecoinm::request(self, "order".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetOpenOrders" => Binancecoinm::request(self, "openOrders".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetAllOrders" => Binancecoinm::request(self, "allOrders".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetAccount" => Binancecoinm::request(self, "account".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetMyTrades" => Binancecoinm::request(self, "myTrades".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateGetRateLimitOrder" => Binancecoinm::request(self, "rateLimit/order".into(), "private".into(), "GET".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostOrderOco" => Binancecoinm::request(self, "order/oco".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostOrder" => Binancecoinm::request(self, "order".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privatePostOrderTest" => Binancecoinm::request(self, "order/test".into(), "private".into(), "POST".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteOpenOrders" => Binancecoinm::request(self, "openOrders".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteOrderList" => Binancecoinm::request(self, "orderList".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    "privateDeleteOrder" => Binancecoinm::request(self, "order".into(), "private".into(), "DELETE".into(), params, Value::Undefined, Value::Undefined, Value::Undefined, context).await,
                    _ => unimplemented!(),
                }
            },
            _ => unimplemented!()
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub struct BinancecoinmImpl(Value);
impl Exchange for BinancecoinmImpl {}
impl Binancecoinm for BinancecoinmImpl {}
impl ValueTrait for BinancecoinmImpl {
    fn is_undefined(&self) -> bool { self.0.is_undefined() }
    fn is_nullish(&self) -> bool { self.0.is_nullish() }
    fn is_nonnullish(&self) -> bool { self.0.is_nonnullish() }
    fn is_truthy(&self) -> bool { self.0.is_truthy() }
    fn or_default(&self, default: Value) -> Value { self.0.or_default(default) }
    fn is_number(&self) -> bool { self.0.is_number() }
    fn is_string(&self) -> bool { self.0.is_string() }
    fn is_object(&self) -> bool { self.0.is_object() }
    fn is_falsy(&self) -> bool { self.0.is_falsy() }
    fn to_upper_case(&self) -> Value { self.0.to_upper_case() }
    fn unwrap_str(&self) -> &str { self.0.unwrap_str() }
    fn unwrap_usize(&self) -> usize { self.0.unwrap_usize() }
    fn unwrap_bool(&self) -> bool { self.0.unwrap_bool() }
    fn unwrap_precise(&self) -> &Precise { self.0.unwrap_precise() }
    fn unwrap_json(&self) -> &serde_json::Value { self.0.unwrap_json() }
    fn unwrap_json_mut(&mut self) -> &mut serde_json::Value { self.0.unwrap_json_mut() }
    fn unwrap_precise_mut(&mut self) -> &mut Precise { self.0.unwrap_precise_mut() }
    fn len(&self) -> usize { self.0.len() }
    fn get(&self, key: Value) -> Value { self.0.get(key) }
    fn set(&mut self, key: Value, value: Value) { self.0.set(key, value) }
    fn push(&mut self, value: Value) { self.0.push(value) }
    fn split(&self, separator: Value) -> Value { self.0.split(separator) }
    fn contains_key(&self, key: Value) -> bool { self.0.contains_key(key) }
    fn keys(&self) -> Vec<Value> { self.0.keys() }
    fn values(&self) -> Vec<Value> { self.0.values() }
    fn to_array(&self, x: Value) -> Value { self.0.to_array(x) }
    fn index_of(&self, x: Value) -> Value { self.0.index_of(x) }
    fn join(&self, glue: Value) -> Value { self.0.join(glue) }
    fn to_string(&self) -> Value { self.0.to_string() }
    fn typeof_(&self) -> Value { self.0.typeof_() }
    fn slice(&self, start: Value) -> Value { self.0.slice(start) }
}

impl BinancecoinmImpl {
    pub fn new(params: Value) -> Self {
        let mut rv = BinancecoinmImpl(match params {
            Value::Json(_) => params,
            _ => Value::new_object()
        });
        ExchangeImpl::init(&mut rv.0);

        let config_entries = Binancecoinm::describe(&rv);
        for k in config_entries.keys() {
            rv.set(k.clone(), config_entries.get(k).clone());
        }
        rv
    }
}

